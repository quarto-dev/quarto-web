[
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Format of the pandoc writer being used (html5, latex, etc.),",
                "extends": {
                    "finish": [
                        3,
                        15
                    ],
                    "start": [
                        3,
                        9
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    3,
                    6
                ],
                "rawdesc": "Format of the pandoc writer being used (html5, latex, etc.),",
                "start": [
                    3,
                    0
                ],
                "type": "setglobal",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "FORMAT",
        "type": "variable",
        "view": "unknown"
    },
    {
        "DOC": "/Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types",
        "defines": [],
        "fields": [],
        "name": "LuaLS",
        "type": "luals.config"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "extends": {
                    "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                    "finish": [
                        9,
                        51
                    ],
                    "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                    "start": [
                        9,
                        21
                    ],
                    "type": "select",
                    "view": "pandoc.Version"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    9,
                    18
                ],
                "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "start": [
                    9,
                    0
                ],
                "type": "setglobal",
                "view": "pandoc.Version",
                "visible": "public"
            }
        ],
        "name": "PANDOC_API_VERSION",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pandoc reader options\n",
                "extends": {
                    "desc": "Pandoc reader options\n",
                    "finish": [
                        15,
                        26
                    ],
                    "rawdesc": "Pandoc reader options\n",
                    "start": [
                        15,
                        24
                    ],
                    "type": "table",
                    "view": "pandoc.ReaderOptions"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    15,
                    21
                ],
                "rawdesc": "Pandoc reader options\n",
                "start": [
                    15,
                    0
                ],
                "type": "setglobal",
                "view": "pandoc.ReaderOptions",
                "visible": "public"
            }
        ],
        "name": "PANDOC_READER_OPTIONS",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The name used to involve the filter. This value can be used to find files relative to the script file.",
                "extends": {
                    "finish": [
                        12,
                        27
                    ],
                    "start": [
                        12,
                        21
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    12,
                    18
                ],
                "rawdesc": "The name used to involve the filter. This value can be used to find files relative to the script file.",
                "start": [
                    12,
                    0
                ],
                "type": "setglobal",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "PANDOC_SCRIPT_FILE",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The state shared by all readers and writers. It is used by pandoc to collect and pass information.\n",
                "extends": {
                    "desc": "The state shared by all readers and writers. It is used by pandoc to collect and pass information.\n",
                    "finish": [
                        21,
                        17
                    ],
                    "rawdesc": "The state shared by all readers and writers. It is used by pandoc to collect and pass information.\n",
                    "start": [
                        21,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.CommonState"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    21,
                    12
                ],
                "rawdesc": "The state shared by all readers and writers. It is used by pandoc to collect and pass information.\n",
                "start": [
                    21,
                    0
                ],
                "type": "setglobal",
                "view": "pandoc.CommonState",
                "visible": "public"
            }
        ],
        "name": "PANDOC_STATE",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "extends": {
                    "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                    "finish": [
                        6,
                        46
                    ],
                    "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                    "start": [
                        6,
                        17
                    ],
                    "type": "select",
                    "view": "pandoc.Version"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    6,
                    14
                ],
                "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "start": [
                    6,
                    0
                ],
                "type": "setglobal",
                "view": "pandoc.Version",
                "visible": "public"
            }
        ],
        "name": "PANDOC_VERSION",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table of the options that will be passed to the writer. While the object can be modified, the changes will not be picked up by pandoc.\n",
                "extends": {
                    "desc": "Table of the options that will be passed to the writer. While the object can be modified, the changes will not be picked up by pandoc.\n",
                    "finish": [
                        18,
                        26
                    ],
                    "rawdesc": "Table of the options that will be passed to the writer. While the object can be modified, the changes will not be picked up by pandoc.\n",
                    "start": [
                        18,
                        24
                    ],
                    "type": "table",
                    "view": "pandoc.WriterOptions"
                },
                "file": "pandoc/global.lua",
                "finish": [
                    18,
                    21
                ],
                "rawdesc": "Table of the options that will be passed to the writer. While the object can be modified, the changes will not be picked up by pandoc.\n",
                "start": [
                    18,
                    0
                ],
                "type": "setglobal",
                "view": "pandoc.WriterOptions",
                "visible": "public"
            }
        ],
        "name": "PANDOC_WRITER_OPTIONS",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "extends": {
                    "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "finish": [
                        70,
                        7
                    ],
                    "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "start": [
                        70,
                        5
                    ],
                    "type": "table",
                    "view": "_G"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    70,
                    2
                ],
                "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "start": [
                    70,
                    0
                ],
                "type": "setglobal",
                "view": "_G",
                "visible": "public"
            }
        ],
        "name": "_G",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    69,
                    12
                ],
                "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                "start": [
                    69,
                    10
                ],
                "type": "doc.class",
                "view": "_G",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "_G",
        "type": "type",
        "view": "_G"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                "extends": {
                    "finish": [
                        404,
                        20
                    ],
                    "start": [
                        404,
                        11
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    404,
                    8
                ],
                "rawdesc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                "start": [
                    404,
                    0
                ],
                "type": "setglobal",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "_VERSION",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    3,
                    13
                ],
                "start": [
                    3,
                    10
                ],
                "type": "doc.class",
                "view": "any",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "any",
        "type": "type",
        "view": "any"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                "extends": {
                    "finish": [
                        8,
                        8
                    ],
                    "start": [
                        8,
                        6
                    ],
                    "type": "table",
                    "view": "string[]"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    8,
                    3
                ],
                "rawdesc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "string[]",
                "visible": "public"
            }
        ],
        "name": "arg",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                17
                            ],
                            "name": "v",
                            "start": [
                                21,
                                16
                            ],
                            "type": "local",
                            "view": "<T>?"
                        },
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "name": "message",
                            "start": [
                                21,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                21,
                                31
                            ],
                            "start": [
                                21,
                                28
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "finish": [
                        21,
                        36
                    ],
                    "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function assert(v?: <T>, message?: any, ...any)\n  -> <T>\n  2. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    21,
                    15
                ],
                "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                "start": [
                    21,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "assert",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "Inline element\n",
                "finish": [
                    2,
                    70
                ],
                "rawdesc": "Inline element\n",
                "start": [
                    2,
                    10
                ],
                "type": "doc.alias",
                "view": "string|pandoc.Block|pandoc.Inline|pandoc.List"
            }
        ],
        "fields": [],
        "name": "blocks_content",
        "type": "type",
        "view": "blocks_content"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    5,
                    17
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "boolean",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "boolean",
        "type": "type",
        "view": "boolean"
    },
    {
        "defines": [
            {
                "desc": "```lua\ncitation_mode:\n    | 'AuthorInText'\n    | 'SuppressAuthor'\n    | 'NormalCitation'\n```",
                "finish": [
                    104,
                    72
                ],
                "rawdesc": "```lua\ncitation_mode:\n    | 'AuthorInText'\n    | 'SuppressAuthor'\n    | 'NormalCitation'\n```",
                "start": [
                    104,
                    10
                ],
                "type": "doc.alias",
                "view": "'AuthorInText'|'NormalCitation'|'SuppressAuthor'"
            }
        ],
        "fields": [],
        "name": "citation_mode",
        "type": "type",
        "view": "citation_mode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                41,
                                27
                            ],
                            "name": "opt",
                            "start": [
                                41,
                                24
                            ],
                            "type": "local",
                            "view": "(\"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3))?"
                        },
                        {
                            "finish": [
                                41,
                                32
                            ],
                            "start": [
                                41,
                                29
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "finish": [
                        41,
                        37
                    ],
                    "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function collectgarbage(opt?: \"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3), ...any)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    41,
                    23
                ],
                "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                "start": [
                    41,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "collectgarbage",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "finish": [
                        8,
                        14
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "start": [
                        8,
                        12
                    ],
                    "type": "table",
                    "view": "coroutinelib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    8,
                    9
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "coroutinelib",
                "visible": "public"
            }
        ],
        "name": "coroutine",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                39,
                                27
                            ],
                            "name": "co",
                            "start": [
                                39,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "finish": [
                        39,
                        32
                    ],
                    "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    39,
                    24
                ],
                "name": "close",
                "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.close",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                27
                            ],
                            "name": "f",
                            "start": [
                                18,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "finish": [
                        18,
                        32
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    18,
                    25
                ],
                "name": "create",
                "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.create",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                33
                            ],
                            "name": "co",
                            "start": [
                                28,
                                31
                            ],
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "finish": [
                        28,
                        38
                    ],
                    "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.isyieldable(co?: thread)\n  -> boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    28,
                    30
                ],
                "name": "isyieldable",
                "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.isyieldable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                28
                            ],
                            "name": "co",
                            "start": [
                                50,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                50,
                                34
                            ],
                            "name": "val1",
                            "start": [
                                50,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                50,
                                39
                            ],
                            "start": [
                                50,
                                36
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "finish": [
                        50,
                        44
                    ],
                    "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    50,
                    25
                ],
                "name": "resume",
                "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.resume",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "finish": [
                        60,
                        32
                    ],
                    "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        60,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    60,
                    26
                ],
                "name": "running",
                "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "start": [
                    60,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.running",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                28
                            ],
                            "name": "co",
                            "start": [
                                74,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": [
                        74,
                        33
                    ],
                    "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    74,
                    25
                ],
                "name": "status",
                "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.status",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                25
                            ],
                            "name": "f",
                            "start": [
                                84,
                                24
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "finish": [
                        84,
                        30
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    84,
                    23
                ],
                "name": "wrap",
                "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.wrap",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": true,
                "deprecated": false,
                "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                28
                            ],
                            "start": [
                                93,
                                25
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "finish": [
                        93,
                        33
                    ],
                    "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    93,
                    24
                ],
                "name": "yield",
                "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutine.yield",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    7,
                    22
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "coroutinelib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                39,
                                27
                            ],
                            "name": "co",
                            "start": [
                                39,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "finish": [
                        39,
                        32
                    ],
                    "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    39,
                    24
                ],
                "name": "close",
                "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                18,
                                27
                            ],
                            "name": "f",
                            "start": [
                                18,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "finish": [
                        18,
                        32
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    18,
                    25
                ],
                "name": "create",
                "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                28,
                                33
                            ],
                            "name": "co",
                            "start": [
                                28,
                                31
                            ],
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "finish": [
                        28,
                        38
                    ],
                    "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.isyieldable(co?: thread)\n  -> boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    28,
                    30
                ],
                "name": "isyieldable",
                "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                28
                            ],
                            "name": "co",
                            "start": [
                                50,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                50,
                                34
                            ],
                            "name": "val1",
                            "start": [
                                50,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                50,
                                39
                            ],
                            "start": [
                                50,
                                36
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "finish": [
                        50,
                        44
                    ],
                    "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    50,
                    25
                ],
                "name": "resume",
                "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "finish": [
                        60,
                        32
                    ],
                    "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        60,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    60,
                    26
                ],
                "name": "running",
                "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                "start": [
                    60,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                28
                            ],
                            "name": "co",
                            "start": [
                                74,
                                26
                            ],
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": [
                        74,
                        33
                    ],
                    "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    74,
                    25
                ],
                "name": "status",
                "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                25
                            ],
                            "name": "f",
                            "start": [
                                84,
                                24
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "finish": [
                        84,
                        30
                    ],
                    "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    84,
                    23
                ],
                "name": "wrap",
                "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": true,
                "deprecated": false,
                "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                28
                            ],
                            "start": [
                                93,
                                25
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "finish": [
                        93,
                        33
                    ],
                    "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/coroutine.lua",
                "finish": [
                    93,
                    24
                ],
                "name": "yield",
                "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "coroutinelib",
        "type": "type",
        "view": "coroutinelib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "finish": [
                        8,
                        10
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "start": [
                        8,
                        8
                    ],
                    "type": "table",
                    "view": "debuglib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    8,
                    5
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "debuglib",
                "visible": "public"
            }
        ],
        "name": "debug",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "finish": [
                        33,
                        26
                    ],
                    "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "start": [
                        33,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    33,
                    20
                ],
                "name": "debug",
                "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "start": [
                    33,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.debug",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                44,
                                24
                            ],
                            "name": "o",
                            "start": [
                                44,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "finish": [
                        44,
                        29
                    ],
                    "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        44,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    44,
                    22
                ],
                "name": "getfenv",
                "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "start": [
                    44,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                56,
                                25
                            ],
                            "name": "co",
                            "start": [
                                56,
                                23
                            ],
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "finish": [
                        56,
                        30
                    ],
                    "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        56,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    56,
                    22
                ],
                "name": "gethook",
                "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "start": [
                    56,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.gethook",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                79,
                                32
                            ],
                            "name": "f",
                            "start": [
                                79,
                                31
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                79,
                                38
                            ],
                            "name": "what",
                            "start": [
                                79,
                                34
                            ],
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "finish": [
                        79,
                        43
                    ],
                    "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))\n  -> debuginfo"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "getinfo",
                "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getinfo",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                93,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                93,
                                33
                            ],
                            "name": "f",
                            "start": [
                                93,
                                32
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                93,
                                40
                            ],
                            "name": "index",
                            "start": [
                                93,
                                35
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "finish": [
                        93,
                        45
                    ],
                    "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    93,
                    23
                ],
                "name": "getlocal",
                "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getlocal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                103,
                                34
                            ],
                            "name": "object",
                            "start": [
                                103,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "finish": [
                        103,
                        39
                    ],
                    "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        103,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    103,
                    27
                ],
                "name": "getmetatable",
                "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "start": [
                    103,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "finish": [
                        112,
                        32
                    ],
                    "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    112,
                    26
                ],
                "name": "getregistry",
                "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getregistry",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                27
                            ],
                            "name": "f",
                            "start": [
                                124,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                124,
                                31
                            ],
                            "name": "up",
                            "start": [
                                124,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "finish": [
                        124,
                        36
                    ],
                    "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    124,
                    25
                ],
                "name": "getupvalue",
                "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getupvalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                139,
                                29
                            ],
                            "name": "u",
                            "start": [
                                139,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": [
                                139,
                                32
                            ],
                            "name": "n",
                            "start": [
                                139,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "finish": [
                        139,
                        37
                    ],
                    "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata, n?: integer)\n  -> any\n  2. boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    139,
                    27
                ],
                "name": "getuservalue",
                "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.getuservalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                154,
                                35
                            ],
                            "name": "limit",
                            "start": [
                                154,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "finish": [
                        154,
                        40
                    ],
                    "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    154,
                    29
                ],
                "name": "setcstacklimit",
                "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setcstacklimit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                166,
                                29
                            ],
                            "name": "object",
                            "start": [
                                166,
                                23
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                166,
                                34
                            ],
                            "name": "env",
                            "start": [
                                166,
                                31
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "finish": [
                        166,
                        39
                    ],
                    "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        166,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    166,
                    22
                ],
                "name": "setfenv",
                "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "start": [
                    166,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                185,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                185,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                185,
                                35
                            ],
                            "name": "hook",
                            "start": [
                                185,
                                31
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                185,
                                41
                            ],
                            "name": "mask",
                            "start": [
                                185,
                                37
                            ],
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "finish": [
                                185,
                                48
                            ],
                            "name": "count",
                            "start": [
                                185,
                                43
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": [
                        185,
                        53
                    ],
                    "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "start": [
                        185,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    185,
                    22
                ],
                "name": "sethook",
                "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "start": [
                    185,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.sethook",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                198,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                198,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                198,
                                37
                            ],
                            "name": "level",
                            "start": [
                                198,
                                32
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                198,
                                44
                            ],
                            "name": "index",
                            "start": [
                                198,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                198,
                                51
                            ],
                            "name": "value",
                            "start": [
                                198,
                                46
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "finish": [
                        198,
                        56
                    ],
                    "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        198,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    198,
                    23
                ],
                "name": "setlocal",
                "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "start": [
                    198,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setlocal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                209,
                                33
                            ],
                            "name": "value",
                            "start": [
                                209,
                                28
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                209,
                                39
                            ],
                            "name": "meta",
                            "start": [
                                209,
                                35
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "finish": [
                        209,
                        44
                    ],
                    "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        209,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    209,
                    27
                ],
                "name": "setmetatable",
                "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "start": [
                    209,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                220,
                                27
                            ],
                            "name": "f",
                            "start": [
                                220,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                220,
                                31
                            ],
                            "name": "up",
                            "start": [
                                220,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                220,
                                38
                            ],
                            "name": "value",
                            "start": [
                                220,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "finish": [
                        220,
                        43
                    ],
                    "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        220,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    220,
                    25
                ],
                "name": "setupvalue",
                "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "start": [
                    220,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setupvalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                234,
                                33
                            ],
                            "name": "udata",
                            "start": [
                                234,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": [
                                234,
                                40
                            ],
                            "name": "value",
                            "start": [
                                234,
                                35
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                234,
                                43
                            ],
                            "name": "n",
                            "start": [
                                234,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "finish": [
                        234,
                        48
                    ],
                    "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": [
                        234,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any, n?: integer)\n  -> udata: userdata"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    234,
                    27
                ],
                "name": "setuservalue",
                "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "start": [
                    234,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.setuservalue",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                247,
                                31
                            ],
                            "name": "thread",
                            "start": [
                                247,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                247,
                                40
                            ],
                            "name": "message",
                            "start": [
                                247,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                247,
                                47
                            ],
                            "name": "level",
                            "start": [
                                247,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "finish": [
                        247,
                        52
                    ],
                    "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        247,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    247,
                    24
                ],
                "name": "traceback",
                "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "start": [
                    247,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.traceback",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                259,
                                26
                            ],
                            "name": "f",
                            "start": [
                                259,
                                25
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                259,
                                29
                            ],
                            "name": "n",
                            "start": [
                                259,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "finish": [
                        259,
                        34
                    ],
                    "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": [
                        259,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    259,
                    24
                ],
                "name": "upvalueid",
                "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "start": [
                    259,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.upvalueid",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                271,
                                29
                            ],
                            "name": "f1",
                            "start": [
                                271,
                                27
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                271,
                                33
                            ],
                            "name": "n1",
                            "start": [
                                271,
                                31
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                271,
                                37
                            ],
                            "name": "f2",
                            "start": [
                                271,
                                35
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                271,
                                41
                            ],
                            "name": "n2",
                            "start": [
                                271,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "finish": [
                        271,
                        46
                    ],
                    "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "start": [
                        271,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    271,
                    26
                ],
                "name": "upvaluejoin",
                "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "start": [
                    271,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debug.upvaluejoin",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    10,
                    19
                ],
                "start": [
                    10,
                    10
                ],
                "type": "doc.class",
                "view": "debuginfo",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        26,
                        31
                    ],
                    "start": [
                        26,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                26,
                                31
                            ],
                            "start": [
                                26,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    26,
                    31
                ],
                "name": "activelines",
                "start": [
                    26,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        18,
                        33
                    ],
                    "start": [
                        18,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                18,
                                33
                            ],
                            "start": [
                                18,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    18,
                    33
                ],
                "name": "currentline",
                "start": [
                    18,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        24,
                        33
                    ],
                    "start": [
                        24,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                24,
                                33
                            ],
                            "start": [
                                24,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    24,
                    33
                ],
                "name": "ftransfer",
                "start": [
                    24,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        23,
                        34
                    ],
                    "start": [
                        23,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                23,
                                34
                            ],
                            "start": [
                                23,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "function"
                        }
                    ],
                    "view": "function"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    23,
                    34
                ],
                "name": "func",
                "start": [
                    23,
                    10
                ],
                "type": "doc.field",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        19,
                        33
                    ],
                    "start": [
                        19,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                19,
                                33
                            ],
                            "start": [
                                19,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    19,
                    33
                ],
                "name": "istailcall",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        22,
                        33
                    ],
                    "start": [
                        22,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                22,
                                33
                            ],
                            "start": [
                                22,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    22,
                    33
                ],
                "name": "isvararg",
                "start": [
                    22,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        16,
                        33
                    ],
                    "start": [
                        16,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                16,
                                33
                            ],
                            "start": [
                                16,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    16,
                    33
                ],
                "name": "lastlinedefined",
                "start": [
                    16,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        15,
                        33
                    ],
                    "start": [
                        15,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                15,
                                33
                            ],
                            "start": [
                                15,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    15,
                    33
                ],
                "name": "linedefined",
                "start": [
                    15,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        11,
                        32
                    ],
                    "start": [
                        11,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                11,
                                32
                            ],
                            "start": [
                                11,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    11,
                    32
                ],
                "name": "name",
                "start": [
                    11,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        12,
                        32
                    ],
                    "start": [
                        12,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                12,
                                32
                            ],
                            "start": [
                                12,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    12,
                    32
                ],
                "name": "namewhat",
                "start": [
                    12,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        21,
                        33
                    ],
                    "start": [
                        21,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                21,
                                33
                            ],
                            "start": [
                                21,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    21,
                    33
                ],
                "name": "nparams",
                "start": [
                    21,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        25,
                        33
                    ],
                    "start": [
                        25,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                25,
                                33
                            ],
                            "start": [
                                25,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    25,
                    33
                ],
                "name": "ntransfer",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        20,
                        33
                    ],
                    "start": [
                        20,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                20,
                                33
                            ],
                            "start": [
                                20,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    20,
                    33
                ],
                "name": "nups",
                "start": [
                    20,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        14,
                        32
                    ],
                    "start": [
                        14,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                32
                            ],
                            "start": [
                                14,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    14,
                    32
                ],
                "name": "short_src",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        13,
                        32
                    ],
                    "start": [
                        13,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                32
                            ],
                            "start": [
                                13,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    13,
                    32
                ],
                "name": "source",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        17,
                        32
                    ],
                    "start": [
                        17,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                17,
                                32
                            ],
                            "start": [
                                17,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    17,
                    32
                ],
                "name": "what",
                "start": [
                    17,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "debuginfo",
        "type": "type",
        "view": "debuginfo"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    7,
                    18
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "debuglib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "finish": [
                        33,
                        26
                    ],
                    "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "start": [
                        33,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    33,
                    20
                ],
                "name": "debug",
                "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                "start": [
                    33,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                44,
                                24
                            ],
                            "name": "o",
                            "start": [
                                44,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "finish": [
                        44,
                        29
                    ],
                    "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        44,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    44,
                    22
                ],
                "name": "getfenv",
                "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                "start": [
                    44,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                56,
                                25
                            ],
                            "name": "co",
                            "start": [
                                56,
                                23
                            ],
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "finish": [
                        56,
                        30
                    ],
                    "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        56,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    56,
                    22
                ],
                "name": "gethook",
                "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                "start": [
                    56,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                79,
                                32
                            ],
                            "name": "f",
                            "start": [
                                79,
                                31
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                79,
                                38
                            ],
                            "name": "what",
                            "start": [
                                79,
                                34
                            ],
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "finish": [
                        79,
                        43
                    ],
                    "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))\n  -> debuginfo"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "getinfo",
                "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                93,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                93,
                                33
                            ],
                            "name": "f",
                            "start": [
                                93,
                                32
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                93,
                                40
                            ],
                            "name": "index",
                            "start": [
                                93,
                                35
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "finish": [
                        93,
                        45
                    ],
                    "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    93,
                    23
                ],
                "name": "getlocal",
                "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                103,
                                34
                            ],
                            "name": "object",
                            "start": [
                                103,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "finish": [
                        103,
                        39
                    ],
                    "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        103,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    103,
                    27
                ],
                "name": "getmetatable",
                "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                "start": [
                    103,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "finish": [
                        112,
                        32
                    ],
                    "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    112,
                    26
                ],
                "name": "getregistry",
                "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                27
                            ],
                            "name": "f",
                            "start": [
                                124,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                124,
                                31
                            ],
                            "name": "up",
                            "start": [
                                124,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "finish": [
                        124,
                        36
                    ],
                    "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    124,
                    25
                ],
                "name": "getupvalue",
                "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                139,
                                29
                            ],
                            "name": "u",
                            "start": [
                                139,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": [
                                139,
                                32
                            ],
                            "name": "n",
                            "start": [
                                139,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "finish": [
                        139,
                        37
                    ],
                    "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata, n?: integer)\n  -> any\n  2. boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    139,
                    27
                ],
                "name": "getuservalue",
                "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                154,
                                35
                            ],
                            "name": "limit",
                            "start": [
                                154,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "finish": [
                        154,
                        40
                    ],
                    "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    154,
                    29
                ],
                "name": "setcstacklimit",
                "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                166,
                                29
                            ],
                            "name": "object",
                            "start": [
                                166,
                                23
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                166,
                                34
                            ],
                            "name": "env",
                            "start": [
                                166,
                                31
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "finish": [
                        166,
                        39
                    ],
                    "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        166,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    166,
                    22
                ],
                "name": "setfenv",
                "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                "start": [
                    166,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                185,
                                29
                            ],
                            "name": "thread",
                            "start": [
                                185,
                                23
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                185,
                                35
                            ],
                            "name": "hook",
                            "start": [
                                185,
                                31
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                185,
                                41
                            ],
                            "name": "mask",
                            "start": [
                                185,
                                37
                            ],
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "finish": [
                                185,
                                48
                            ],
                            "name": "count",
                            "start": [
                                185,
                                43
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": [
                        185,
                        53
                    ],
                    "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "start": [
                        185,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    185,
                    22
                ],
                "name": "sethook",
                "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "start": [
                    185,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                198,
                                30
                            ],
                            "name": "thread",
                            "start": [
                                198,
                                24
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                198,
                                37
                            ],
                            "name": "level",
                            "start": [
                                198,
                                32
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                198,
                                44
                            ],
                            "name": "index",
                            "start": [
                                198,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                198,
                                51
                            ],
                            "name": "value",
                            "start": [
                                198,
                                46
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "finish": [
                        198,
                        56
                    ],
                    "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        198,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    198,
                    23
                ],
                "name": "setlocal",
                "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                "start": [
                    198,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                209,
                                33
                            ],
                            "name": "value",
                            "start": [
                                209,
                                28
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": [
                                209,
                                39
                            ],
                            "name": "meta",
                            "start": [
                                209,
                                35
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "finish": [
                        209,
                        44
                    ],
                    "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        209,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    209,
                    27
                ],
                "name": "setmetatable",
                "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                "start": [
                    209,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                220,
                                27
                            ],
                            "name": "f",
                            "start": [
                                220,
                                26
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                220,
                                31
                            ],
                            "name": "up",
                            "start": [
                                220,
                                29
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                220,
                                38
                            ],
                            "name": "value",
                            "start": [
                                220,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "finish": [
                        220,
                        43
                    ],
                    "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        220,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    220,
                    25
                ],
                "name": "setupvalue",
                "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                "start": [
                    220,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                234,
                                33
                            ],
                            "name": "udata",
                            "start": [
                                234,
                                28
                            ],
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": [
                                234,
                                40
                            ],
                            "name": "value",
                            "start": [
                                234,
                                35
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                234,
                                43
                            ],
                            "name": "n",
                            "start": [
                                234,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "finish": [
                        234,
                        48
                    ],
                    "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": [
                        234,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any, n?: integer)\n  -> udata: userdata"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    234,
                    27
                ],
                "name": "setuservalue",
                "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                "start": [
                    234,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                247,
                                31
                            ],
                            "name": "thread",
                            "start": [
                                247,
                                25
                            ],
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": [
                                247,
                                40
                            ],
                            "name": "message",
                            "start": [
                                247,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                247,
                                47
                            ],
                            "name": "level",
                            "start": [
                                247,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "finish": [
                        247,
                        52
                    ],
                    "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        247,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    247,
                    24
                ],
                "name": "traceback",
                "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                "start": [
                    247,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                259,
                                26
                            ],
                            "name": "f",
                            "start": [
                                259,
                                25
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                259,
                                29
                            ],
                            "name": "n",
                            "start": [
                                259,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "finish": [
                        259,
                        34
                    ],
                    "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": [
                        259,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    259,
                    24
                ],
                "name": "upvalueid",
                "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                "start": [
                    259,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                271,
                                29
                            ],
                            "name": "f1",
                            "start": [
                                271,
                                27
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                271,
                                33
                            ],
                            "name": "n1",
                            "start": [
                                271,
                                31
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                271,
                                37
                            ],
                            "name": "f2",
                            "start": [
                                271,
                                35
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                271,
                                41
                            ],
                            "name": "n2",
                            "start": [
                                271,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "finish": [
                        271,
                        46
                    ],
                    "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "start": [
                        271,
                        0
                    ],
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/debug.lua",
                "finish": [
                    271,
                    26
                ],
                "name": "upvaluejoin",
                "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                "start": [
                    271,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "debuglib",
        "type": "type",
        "view": "debuglib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                24
                            ],
                            "name": "filename",
                            "start": [
                                50,
                                16
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "finish": [
                        50,
                        29
                    ],
                    "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function dofile(filename?: string)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    50,
                    15
                ],
                "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                "start": [
                    50,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "dofile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                62,
                                22
                            ],
                            "name": "message",
                            "start": [
                                62,
                                15
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                62,
                                29
                            ],
                            "name": "level",
                            "start": [
                                62,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "finish": [
                        62,
                        34
                    ],
                    "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function error(message: any, level?: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    62,
                    14
                ],
                "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                "start": [
                    62,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "error",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "finish": [
                    179,
                    34
                ],
                "rawdesc": "```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    179,
                    10
                ],
                "type": "doc.alias",
                "view": "\"exit\"|\"signal\""
            }
        ],
        "fields": [],
        "name": "exitcode",
        "type": "type",
        "view": "exitcode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            7,
                            24
                        ],
                        "start": [
                            7,
                            17
                        ],
                        "type": "doc.extends.name",
                        "view": "boolean"
                    }
                ],
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    7,
                    24
                ],
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "false",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "false",
        "type": "type",
        "view": "false"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    170,
                    15
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                "start": [
                    170,
                    10
                ],
                "type": "doc.class",
                "view": "file*",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                189,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                189,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        189,
                        25
                    ],
                    "rawdesc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        189,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:close()\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    189,
                    19
                ],
                "name": "close",
                "rawdesc": "\nClose `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    189,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                196,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                196,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                    "finish": [
                        196,
                        25
                    ],
                    "rawdesc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:flush()"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    196,
                    19
                ],
                "name": "flush",
                "rawdesc": "\nSaves any written data to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:flush\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                211,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                211,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                211,
                                23
                            ],
                            "start": [
                                211,
                                20
                            ],
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        211,
                        28
                    ],
                    "rawdesc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": [
                        211,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:lines(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    211,
                    19
                ],
                "name": "lines",
                "rawdesc": "\n------\n```lua\nfor c in file:lines(...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    211,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                222,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                222,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                222,
                                22
                            ],
                            "start": [
                                222,
                                19
                            ],
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        222,
                        27
                    ],
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        222,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:read(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    222,
                    18
                ],
                "name": "read",
                "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    222,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                238,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                238,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                238,
                                25
                            ],
                            "name": "whence",
                            "start": [
                                238,
                                19
                            ],
                            "type": "local",
                            "view": "(\"cur\"|\"end\"|\"set\")?"
                        },
                        {
                            "finish": [
                                238,
                                33
                            ],
                            "name": "offset",
                            "start": [
                                238,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                    "finish": [
                        238,
                        38
                    ],
                    "rawdesc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                    "returns": [
                        {
                            "name": "offset",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        238,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:seek(whence?: \"cur\"|\"end\"|\"set\", offset?: integer)\n  -> offset: integer\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    238,
                    18
                ],
                "name": "seek",
                "rawdesc": "\nSets and gets the file position, measured from the beginning of the file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:seek\"])\n\n\n```lua\nwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "start": [
                    238,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                252,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                252,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                252,
                                26
                            ],
                            "name": "mode",
                            "start": [
                                252,
                                22
                            ],
                            "type": "local",
                            "view": "\"full\"|\"line\"|\"no\""
                        },
                        {
                            "finish": [
                                252,
                                32
                            ],
                            "name": "size",
                            "start": [
                                252,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                    "finish": [
                        252,
                        37
                    ],
                    "rawdesc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                    "start": [
                        252,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:setvbuf(mode: \"full\"|\"line\"|\"no\", size?: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    252,
                    21
                ],
                "name": "setvbuf",
                "rawdesc": "\nSets the buffering mode for an output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:setvbuf\"])\n\n\n```lua\nmode:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "start": [
                    252,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                262,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                262,
                                8
                            ],
                            "type": "self",
                            "view": "file*"
                        },
                        {
                            "finish": [
                                262,
                                23
                            ],
                            "start": [
                                262,
                                20
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                    "finish": [
                        262,
                        28
                    ],
                    "rawdesc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        262,
                        0
                    ],
                    "type": "function",
                    "view": "(method) file*:write(...string|number)\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    262,
                    19
                ],
                "name": "write",
                "rawdesc": "\nWrites the value of each of its arguments to `file`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file:write\"])",
                "start": [
                    262,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "file*",
        "type": "type",
        "view": "file*"
    },
    {
        "defines": [
            {
                "desc": "```lua\nfiletype:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "finish": [
                    144,
                    10
                ],
                "rawdesc": "```lua\nfiletype:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "start": [
                    141,
                    10
                ],
                "type": "doc.alias",
                "view": "\"closed file\"|\"file\"|`nil`"
            }
        ],
        "fields": [],
        "name": "filetype",
        "type": "type",
        "view": "filetype"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    15,
                    18
                ],
                "start": [
                    15,
                    10
                ],
                "type": "doc.class",
                "view": "function",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "function",
        "type": "type",
        "view": "function"
    },
    {
        "defines": [
            {
                "desc": "```lua\ngcoptions:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                "finish": [
                    31,
                    19
                ],
                "rawdesc": "```lua\ngcoptions:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                "start": [
                    23,
                    10
                ],
                "type": "doc.alias",
                "view": "\"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3)"
            }
        ],
        "fields": [],
        "name": "gcoptions",
        "type": "type",
        "view": "gcoptions"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                81,
                                18
                            ],
                            "name": "f",
                            "start": [
                                81,
                                17
                            ],
                            "type": "local",
                            "view": "(integer|fun(...any):...unknown)?"
                        }
                    ],
                    "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "finish": [
                        81,
                        23
                    ],
                    "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        81,
                        0
                    ],
                    "type": "function",
                    "view": "function getfenv(f?: integer|fun(...any):...unknown)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    81,
                    16
                ],
                "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                "start": [
                    81,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "getfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                91,
                                28
                            ],
                            "name": "object",
                            "start": [
                                91,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "finish": [
                        91,
                        33
                    ],
                    "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        91,
                        0
                    ],
                    "type": "function",
                    "view": "function getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    91,
                    21
                ],
                "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                "start": [
                    91,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "getmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nhookmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "finish": [
                    171,
                    8
                ],
                "rawdesc": "```lua\nhookmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                "start": [
                    168,
                    10
                ],
                "type": "doc.alias",
                "view": "string|\"c\"|\"l\"|\"r\""
            }
        ],
        "fields": [],
        "name": "hookmask",
        "type": "type",
        "view": "hookmask"
    },
    {
        "defines": [
            {
                "desc": "```lua\nhtml_math_methods:\n    | 'plain'\n    | 'gladtex'\n    | 'webtex'\n    | 'mathml'\n    | 'mathjax'\n```",
                "finish": [
                    16,
                    73
                ],
                "rawdesc": "```lua\nhtml_math_methods:\n    | 'plain'\n    | 'gladtex'\n    | 'webtex'\n    | 'mathml'\n    | 'mathjax'\n```",
                "start": [
                    16,
                    10
                ],
                "type": "doc.alias",
                "view": "'gladtex'|'mathjax'|'mathml'|'plain'|'webtex'"
            }
        ],
        "fields": [],
        "name": "html_math_methods",
        "type": "type",
        "view": "html_math_methods"
    },
    {
        "defines": [
            {
                "desc": "```lua\ninfowhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                "finish": [
                    66,
                    8
                ],
                "rawdesc": "```lua\ninfowhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                "start": [
                    58,
                    10
                ],
                "type": "doc.alias",
                "view": "string|\"L\"|\"S\"|\"f\"|\"l\"...(+4)"
            }
        ],
        "fields": [],
        "name": "infowhat",
        "type": "type",
        "view": "infowhat"
    },
    {
        "defines": [
            {
                "desc": "Inline element\n",
                "finish": [
                    2,
                    58
                ],
                "rawdesc": "Inline element\n",
                "start": [
                    2,
                    10
                ],
                "type": "doc.alias",
                "view": "string|pandoc.Inline|pandoc.List"
            }
        ],
        "fields": [],
        "name": "inlines_content",
        "type": "type",
        "view": "inlines_content"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            9,
                            25
                        ],
                        "start": [
                            9,
                            19
                        ],
                        "type": "doc.extends.name",
                        "view": "number"
                    }
                ],
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    9,
                    25
                ],
                "start": [
                    9,
                    10
                ],
                "type": "doc.class",
                "view": "integer",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "integer",
        "type": "type",
        "view": "integer"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "finish": [
                        26,
                        7
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "start": [
                        26,
                        5
                    ],
                    "type": "table",
                    "view": "iolib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    26,
                    2
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "start": [
                    26,
                    0
                ],
                "type": "setglobal",
                "view": "iolib",
                "visible": "public"
            }
        ],
        "name": "io",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                51,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                51,
                                18
                            ],
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        51,
                        27
                    ],
                    "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    51,
                    17
                ],
                "name": "close",
                "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.close",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "finish": [
                        58,
                        23
                    ],
                    "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    58,
                    17
                ],
                "name": "flush",
                "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "start": [
                    58,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.flush",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                67,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                67,
                                18
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "finish": [
                        67,
                        27
                    ],
                    "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "start": [
                        67,
                        0
                    ],
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    67,
                    17
                ],
                "name": "input",
                "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "start": [
                    67,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.input",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "filename",
                            "start": [
                                83,
                                18
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "start": [
                                83,
                                28
                            ],
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    83,
                    17
                ],
                "name": "lines",
                "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.lines",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                25
                            ],
                            "name": "filename",
                            "start": [
                                95,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                31
                            ],
                            "name": "mode",
                            "start": [
                                95,
                                27
                            ],
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": [
                        95,
                        36
                    ],
                    "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    95,
                    16
                ],
                "name": "open",
                "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.open",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                104,
                                23
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                104,
                                19
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "finish": [
                        104,
                        28
                    ],
                    "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    104,
                    18
                ],
                "name": "output",
                "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                119,
                                22
                            ],
                            "name": "prog",
                            "start": [
                                119,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                119,
                                28
                            ],
                            "name": "mode",
                            "start": [
                                119,
                                24
                            ],
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": [
                        119,
                        33
                    ],
                    "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        119,
                        0
                    ],
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    119,
                    17
                ],
                "name": "popen",
                "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "start": [
                    119,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.popen",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                130,
                                20
                            ],
                            "start": [
                                130,
                                17
                            ],
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        130,
                        25
                    ],
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "function io.read(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    130,
                    16
                ],
                "name": "read",
                "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    130,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.read",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "finish": [
                        139,
                        25
                    ],
                    "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    139,
                    19
                ],
                "name": "tmpfile",
                "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.tmpfile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                154,
                                21
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                154,
                                17
                            ],
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": [
                        154,
                        26
                    ],
                    "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    154,
                    16
                ],
                "name": "type",
                "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                163,
                                21
                            ],
                            "start": [
                                163,
                                18
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "finish": [
                        163,
                        26
                    ],
                    "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        163,
                        0
                    ],
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    163,
                    17
                ],
                "name": "write",
                "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "start": [
                    163,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "io.write",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    7,
                    15
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "iolib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                51,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                51,
                                18
                            ],
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        51,
                        27
                    ],
                    "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        51,
                        0
                    ],
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    51,
                    17
                ],
                "name": "close",
                "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    51,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "finish": [
                        58,
                        23
                    ],
                    "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    58,
                    17
                ],
                "name": "flush",
                "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                "start": [
                    58,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                67,
                                22
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                67,
                                18
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "finish": [
                        67,
                        27
                    ],
                    "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "start": [
                        67,
                        0
                    ],
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    67,
                    17
                ],
                "name": "input",
                "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                "start": [
                    67,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "filename",
                            "start": [
                                83,
                                18
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "start": [
                                83,
                                28
                            ],
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    83,
                    17
                ],
                "name": "lines",
                "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                25
                            ],
                            "name": "filename",
                            "start": [
                                95,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                31
                            ],
                            "name": "mode",
                            "start": [
                                95,
                                27
                            ],
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": [
                        95,
                        36
                    ],
                    "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    95,
                    16
                ],
                "name": "open",
                "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                104,
                                23
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                104,
                                19
                            ],
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "finish": [
                        104,
                        28
                    ],
                    "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    104,
                    18
                ],
                "name": "output",
                "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                119,
                                22
                            ],
                            "name": "prog",
                            "start": [
                                119,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                119,
                                28
                            ],
                            "name": "mode",
                            "start": [
                                119,
                                24
                            ],
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": [
                        119,
                        33
                    ],
                    "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        119,
                        0
                    ],
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    119,
                    17
                ],
                "name": "popen",
                "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "start": [
                    119,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                130,
                                20
                            ],
                            "start": [
                                130,
                                17
                            ],
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": [
                        130,
                        25
                    ],
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "function io.read(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    130,
                    16
                ],
                "name": "read",
                "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    130,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nstandard error.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stderr\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "finish": [
                        25,
                        22
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "start": [
                        25,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                25,
                                22
                            ],
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                25,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "file*"
                        }
                    ],
                    "view": "file*"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    25,
                    22
                ],
                "name": "stderr",
                "rawdesc": "\nstandard error.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stderr\"])\n",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "file*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nstandard input.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdin\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "finish": [
                        13,
                        22
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "start": [
                        13,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                13,
                                22
                            ],
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                13,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "file*"
                        }
                    ],
                    "view": "file*"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    13,
                    22
                ],
                "name": "stdin",
                "rawdesc": "\nstandard input.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdin\"])\n",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "file*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nstandard output.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdout\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "finish": [
                        19,
                        22
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                    "start": [
                        19,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                19,
                                22
                            ],
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                19,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "file*"
                        }
                    ],
                    "view": "file*"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    19,
                    22
                ],
                "name": "stdout",
                "rawdesc": "\nstandard output.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.stdout\"])\n",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "file*",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "finish": [
                        139,
                        25
                    ],
                    "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    139,
                    19
                ],
                "name": "tmpfile",
                "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": [
                                154,
                                21
                            ],
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": [
                                154,
                                17
                            ],
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": [
                        154,
                        26
                    ],
                    "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    154,
                    16
                ],
                "name": "type",
                "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                163,
                                21
                            ],
                            "start": [
                                163,
                                18
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "finish": [
                        163,
                        26
                    ],
                    "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        163,
                        0
                    ],
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/io.lua",
                "finish": [
                    163,
                    17
                ],
                "name": "write",
                "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                "start": [
                    163,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "iolib",
        "type": "type",
        "view": "iolib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                108,
                                17
                            ],
                            "name": "t",
                            "start": [
                                108,
                                16
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "finish": [
                        108,
                        22
                    ],
                    "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: <V>[], i?: integer):integer, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        },
                        {
                            "name": "i",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        108,
                        0
                    ],
                    "type": "function",
                    "view": "function ipairs(t: <T:table>)\n  -> fun(table: <V>[], i?: integer):integer, <V>\n  2. <T:table>\n  3. i: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    108,
                    15
                ],
                "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                "start": [
                    108,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "ipairs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    14,
                    23
                ],
                "start": [
                    14,
                    10
                ],
                "type": "doc.class",
                "view": "lightuserdata",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "lightuserdata",
        "type": "type",
        "view": "lightuserdata"
    },
    {
        "defines": [
            {
                "desc": "```lua\nlist_delimeter:\n    | 'DefaultDelim'\n    | 'Period'\n    | 'OneParen'\n    | 'TwoParens'\n```",
                "finish": [
                    148,
                    71
                ],
                "rawdesc": "```lua\nlist_delimeter:\n    | 'DefaultDelim'\n    | 'Period'\n    | 'OneParen'\n    | 'TwoParens'\n```",
                "start": [
                    148,
                    10
                ],
                "type": "doc.alias",
                "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'"
            }
        ],
        "fields": [],
        "name": "list_delimeter",
        "type": "type",
        "view": "list_delimeter"
    },
    {
        "defines": [
            {
                "desc": "```lua\nlist_style:\n    | 'DefaultStyle'\n    | 'Example'\n    | 'Decimal'\n    | 'LowerRoman'\n    | 'UpperRoman'\n    | 'LowerAlpha'\n    | 'UpperAlpha'\n```",
                "finish": [
                    147,
                    108
                ],
                "rawdesc": "```lua\nlist_style:\n    | 'DefaultStyle'\n    | 'Example'\n    | 'Decimal'\n    | 'LowerRoman'\n    | 'UpperRoman'\n    | 'LowerAlpha'\n    | 'UpperAlpha'\n```",
                "start": [
                    147,
                    10
                ],
                "type": "doc.alias",
                "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)"
            }
        ],
        "fields": [],
        "name": "list_style",
        "type": "type",
        "view": "list_style"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                130,
                                19
                            ],
                            "name": "chunk",
                            "start": [
                                130,
                                14
                            ],
                            "type": "local",
                            "view": "string|function"
                        },
                        {
                            "finish": [
                                130,
                                30
                            ],
                            "name": "chunkname",
                            "start": [
                                130,
                                21
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                130,
                                36
                            ],
                            "name": "mode",
                            "start": [
                                130,
                                32
                            ],
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": [
                                130,
                                41
                            ],
                            "name": "env",
                            "start": [
                                130,
                                38
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": [
                        130,
                        46
                    ],
                    "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "function load(chunk: string|function, chunkname?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    130,
                    13
                ],
                "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "start": [
                    130,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "load",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                143,
                                26
                            ],
                            "name": "filename",
                            "start": [
                                143,
                                18
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                143,
                                32
                            ],
                            "name": "mode",
                            "start": [
                                143,
                                28
                            ],
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": [
                                143,
                                37
                            ],
                            "name": "env",
                            "start": [
                                143,
                                34
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": [
                        143,
                        42
                    ],
                    "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        143,
                        0
                    ],
                    "type": "function",
                    "view": "function loadfile(filename?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    143,
                    17
                ],
                "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "start": [
                    143,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "loadfile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nloadmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "finish": [
                    113,
                    9
                ],
                "rawdesc": "```lua\nloadmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                "start": [
                    110,
                    10
                ],
                "type": "doc.alias",
                "view": "\"b\"|\"bt\"|\"t\""
            }
        ],
        "fields": [],
        "name": "loadmode",
        "type": "type",
        "view": "loadmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                156,
                                24
                            ],
                            "name": "text",
                            "start": [
                                156,
                                20
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                156,
                                35
                            ],
                            "name": "chunkname",
                            "start": [
                                156,
                                26
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "finish": [
                        156,
                        40
                    ],
                    "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        156,
                        0
                    ],
                    "type": "function",
                    "view": "function loadstring(text: string, chunkname?: string)\n  -> function?\n  2. error_message: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    156,
                    19
                ],
                "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                "start": [
                    156,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "loadstring",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nlocalecategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "finish": [
                    154,
                    11
                ],
                "rawdesc": "```lua\nlocalecategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "start": [
                    148,
                    10
                ],
                "type": "doc.alias",
                "view": "\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1)"
            }
        ],
        "fields": [],
        "name": "localecategory",
        "type": "type",
        "view": "localecategory"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        9
                    ],
                    "start": [
                        4,
                        7
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "lpeg.lua",
                "finish": [
                    4,
                    4
                ],
                "start": [
                    4,
                    0
                ],
                "type": "setglobal",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "lpeg",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "finish": [
                        32,
                        9
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "start": [
                        32,
                        7
                    ],
                    "type": "table",
                    "view": "mathlib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    32,
                    4
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "start": [
                    32,
                    0
                ],
                "type": "setglobal",
                "view": "mathlib",
                "visible": "public"
            }
        ],
        "name": "math",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                19
                            ],
                            "name": "x",
                            "start": [
                                43,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "finish": [
                        43,
                        24
                    ],
                    "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    43,
                    17
                ],
                "name": "abs",
                "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.abs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                53,
                                20
                            ],
                            "name": "x",
                            "start": [
                                53,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "finish": [
                        53,
                        25
                    ],
                    "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        53,
                        0
                    ],
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    53,
                    18
                ],
                "name": "acos",
                "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "start": [
                    53,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.acos",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                20
                            ],
                            "name": "x",
                            "start": [
                                63,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "finish": [
                        63,
                        25
                    ],
                    "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    63,
                    18
                ],
                "name": "asin",
                "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.asin",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                20
                            ],
                            "name": "y",
                            "start": [
                                74,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                74,
                                23
                            ],
                            "name": "x",
                            "start": [
                                74,
                                22
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "finish": [
                        74,
                        28
                    ],
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan(y: number, x?: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    74,
                    18
                ],
                "name": "atan",
                "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.atan",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                86,
                                21
                            ],
                            "name": "y",
                            "start": [
                                86,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                86,
                                24
                            ],
                            "name": "x",
                            "start": [
                                86,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "finish": [
                        86,
                        29
                    ],
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        86,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    86,
                    19
                ],
                "name": "atan2",
                "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "start": [
                    86,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.atan2",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                96,
                                20
                            ],
                            "name": "x",
                            "start": [
                                96,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "finish": [
                        96,
                        25
                    ],
                    "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        96,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    96,
                    18
                ],
                "name": "ceil",
                "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "start": [
                    96,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.ceil",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                106,
                                19
                            ],
                            "name": "x",
                            "start": [
                                106,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "finish": [
                        106,
                        24
                    ],
                    "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    106,
                    17
                ],
                "name": "cos",
                "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.cos",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                117,
                                20
                            ],
                            "name": "x",
                            "start": [
                                117,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "finish": [
                        117,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        117,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    117,
                    18
                ],
                "name": "cosh",
                "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "start": [
                    117,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.cosh",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                127,
                                19
                            ],
                            "name": "x",
                            "start": [
                                127,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "finish": [
                        127,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        127,
                        0
                    ],
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    127,
                    17
                ],
                "name": "deg",
                "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "start": [
                    127,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.deg",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                137,
                                19
                            ],
                            "name": "x",
                            "start": [
                                137,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "finish": [
                        137,
                        24
                    ],
                    "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        137,
                        0
                    ],
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    137,
                    17
                ],
                "name": "exp",
                "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "start": [
                    137,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.exp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                147,
                                21
                            ],
                            "name": "x",
                            "start": [
                                147,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "finish": [
                        147,
                        26
                    ],
                    "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        147,
                        0
                    ],
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    147,
                    19
                ],
                "name": "floor",
                "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "start": [
                    147,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.floor",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                158,
                                20
                            ],
                            "name": "x",
                            "start": [
                                158,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                158,
                                23
                            ],
                            "name": "y",
                            "start": [
                                158,
                                22
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "finish": [
                        158,
                        28
                    ],
                    "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        158,
                        0
                    ],
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    158,
                    18
                ],
                "name": "fmod",
                "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "start": [
                    158,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.fmod",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                170,
                                21
                            ],
                            "name": "x",
                            "start": [
                                170,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "finish": [
                        170,
                        26
                    ],
                    "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        170,
                        0
                    ],
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    170,
                    19
                ],
                "name": "frexp",
                "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "start": [
                    170,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.frexp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                182,
                                21
                            ],
                            "name": "m",
                            "start": [
                                182,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                182,
                                24
                            ],
                            "name": "e",
                            "start": [
                                182,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "finish": [
                        182,
                        29
                    ],
                    "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        182,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    182,
                    19
                ],
                "name": "ldexp",
                "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "start": [
                    182,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.ldexp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                193,
                                19
                            ],
                            "name": "x",
                            "start": [
                                193,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                193,
                                25
                            ],
                            "name": "base",
                            "start": [
                                193,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "finish": [
                        193,
                        30
                    ],
                    "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        193,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    193,
                    17
                ],
                "name": "log",
                "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "start": [
                    193,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.log",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                204,
                                21
                            ],
                            "name": "x",
                            "start": [
                                204,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "finish": [
                        204,
                        26
                    ],
                    "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    204,
                    19
                ],
                "name": "log10",
                "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "start": [
                    204,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.log10",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                216,
                                19
                            ],
                            "name": "x",
                            "start": [
                                216,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                216,
                                24
                            ],
                            "start": [
                                216,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "finish": [
                        216,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        216,
                        0
                    ],
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    216,
                    17
                ],
                "name": "max",
                "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "start": [
                    216,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.max",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                228,
                                19
                            ],
                            "name": "x",
                            "start": [
                                228,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                228,
                                24
                            ],
                            "start": [
                                228,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "finish": [
                        228,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        228,
                        0
                    ],
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    228,
                    17
                ],
                "name": "min",
                "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "start": [
                    228,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.min",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                239,
                                20
                            ],
                            "name": "x",
                            "start": [
                                239,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "finish": [
                        239,
                        25
                    ],
                    "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        239,
                        0
                    ],
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    239,
                    18
                ],
                "name": "modf",
                "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "start": [
                    239,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.modf",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                251,
                                19
                            ],
                            "name": "x",
                            "start": [
                                251,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                251,
                                22
                            ],
                            "name": "y",
                            "start": [
                                251,
                                21
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "finish": [
                        251,
                        27
                    ],
                    "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        251,
                        0
                    ],
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    251,
                    17
                ],
                "name": "pow",
                "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "start": [
                    251,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.pow",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                261,
                                19
                            ],
                            "name": "x",
                            "start": [
                                261,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "finish": [
                        261,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        261,
                        0
                    ],
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    261,
                    17
                ],
                "name": "rad",
                "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "start": [
                    261,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.rad",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                277,
                                22
                            ],
                            "name": "m",
                            "start": [
                                277,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                277,
                                25
                            ],
                            "name": "n",
                            "start": [
                                277,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "finish": [
                        277,
                        30
                    ],
                    "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        277,
                        0
                    ],
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    277,
                    20
                ],
                "name": "random",
                "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "start": [
                    277,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.random",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                289,
                                26
                            ],
                            "name": "x",
                            "start": [
                                289,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                289,
                                29
                            ],
                            "name": "y",
                            "start": [
                                289,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "finish": [
                        289,
                        34
                    ],
                    "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "start": [
                        289,
                        0
                    ],
                    "type": "function",
                    "view": "function math.randomseed(x?: integer, y?: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    289,
                    24
                ],
                "name": "randomseed",
                "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "start": [
                    289,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.randomseed",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                299,
                                19
                            ],
                            "name": "x",
                            "start": [
                                299,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "finish": [
                        299,
                        24
                    ],
                    "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        299,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    299,
                    17
                ],
                "name": "sin",
                "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "start": [
                    299,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.sin",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                310,
                                20
                            ],
                            "name": "x",
                            "start": [
                                310,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "finish": [
                        310,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        310,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    310,
                    18
                ],
                "name": "sinh",
                "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "start": [
                    310,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.sinh",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                320,
                                20
                            ],
                            "name": "x",
                            "start": [
                                320,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "finish": [
                        320,
                        25
                    ],
                    "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        320,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    320,
                    18
                ],
                "name": "sqrt",
                "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "start": [
                    320,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.sqrt",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                330,
                                19
                            ],
                            "name": "x",
                            "start": [
                                330,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "finish": [
                        330,
                        24
                    ],
                    "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        330,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    330,
                    17
                ],
                "name": "tan",
                "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "start": [
                    330,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.tan",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                341,
                                20
                            ],
                            "name": "x",
                            "start": [
                                341,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "finish": [
                        341,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        341,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    341,
                    18
                ],
                "name": "tanh",
                "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "start": [
                    341,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.tanh",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                352,
                                25
                            ],
                            "name": "x",
                            "start": [
                                352,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "finish": [
                        352,
                        30
                    ],
                    "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        352,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    352,
                    23
                ],
                "name": "tointeger",
                "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "start": [
                    352,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.tointeger",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                366,
                                20
                            ],
                            "name": "x",
                            "start": [
                                366,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": [
                        366,
                        25
                    ],
                    "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": [
                        366,
                        0
                    ],
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    366,
                    18
                ],
                "name": "type",
                "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "start": [
                    366,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                378,
                                19
                            ],
                            "name": "m",
                            "start": [
                                378,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                378,
                                22
                            ],
                            "name": "n",
                            "start": [
                                378,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "finish": [
                        378,
                        27
                    ],
                    "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        378,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    378,
                    17
                ],
                "name": "ult",
                "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "start": [
                    378,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "math.ult",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nmath_type:\n    | 'InlineMath'\n    | 'DisplayMath'\n```",
                "finish": [
                    230,
                    46
                ],
                "rawdesc": "```lua\nmath_type:\n    | 'InlineMath'\n    | 'DisplayMath'\n```",
                "start": [
                    230,
                    10
                ],
                "type": "doc.alias",
                "view": "'DisplayMath'|'InlineMath'"
            }
        ],
        "fields": [],
        "name": "math_type",
        "type": "type",
        "view": "math_type"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    7,
                    17
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "mathlib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                19
                            ],
                            "name": "x",
                            "start": [
                                43,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "finish": [
                        43,
                        24
                    ],
                    "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    43,
                    17
                ],
                "name": "abs",
                "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                53,
                                20
                            ],
                            "name": "x",
                            "start": [
                                53,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "finish": [
                        53,
                        25
                    ],
                    "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        53,
                        0
                    ],
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    53,
                    18
                ],
                "name": "acos",
                "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                "start": [
                    53,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                20
                            ],
                            "name": "x",
                            "start": [
                                63,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "finish": [
                        63,
                        25
                    ],
                    "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    63,
                    18
                ],
                "name": "asin",
                "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                20
                            ],
                            "name": "y",
                            "start": [
                                74,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                74,
                                23
                            ],
                            "name": "x",
                            "start": [
                                74,
                                22
                            ],
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "finish": [
                        74,
                        28
                    ],
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan(y: number, x?: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    74,
                    18
                ],
                "name": "atan",
                "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                86,
                                21
                            ],
                            "name": "y",
                            "start": [
                                86,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                86,
                                24
                            ],
                            "name": "x",
                            "start": [
                                86,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "finish": [
                        86,
                        29
                    ],
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        86,
                        0
                    ],
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    86,
                    19
                ],
                "name": "atan2",
                "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                "start": [
                    86,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                96,
                                20
                            ],
                            "name": "x",
                            "start": [
                                96,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "finish": [
                        96,
                        25
                    ],
                    "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        96,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    96,
                    18
                ],
                "name": "ceil",
                "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                "start": [
                    96,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                106,
                                19
                            ],
                            "name": "x",
                            "start": [
                                106,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "finish": [
                        106,
                        24
                    ],
                    "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    106,
                    17
                ],
                "name": "cos",
                "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                117,
                                20
                            ],
                            "name": "x",
                            "start": [
                                117,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "finish": [
                        117,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        117,
                        0
                    ],
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    117,
                    18
                ],
                "name": "cosh",
                "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                "start": [
                    117,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                127,
                                19
                            ],
                            "name": "x",
                            "start": [
                                127,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "finish": [
                        127,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        127,
                        0
                    ],
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    127,
                    17
                ],
                "name": "deg",
                "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                "start": [
                    127,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                137,
                                19
                            ],
                            "name": "x",
                            "start": [
                                137,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "finish": [
                        137,
                        24
                    ],
                    "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        137,
                        0
                    ],
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    137,
                    17
                ],
                "name": "exp",
                "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                "start": [
                    137,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                147,
                                21
                            ],
                            "name": "x",
                            "start": [
                                147,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "finish": [
                        147,
                        26
                    ],
                    "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        147,
                        0
                    ],
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    147,
                    19
                ],
                "name": "floor",
                "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                "start": [
                    147,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                158,
                                20
                            ],
                            "name": "x",
                            "start": [
                                158,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                158,
                                23
                            ],
                            "name": "y",
                            "start": [
                                158,
                                22
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "finish": [
                        158,
                        28
                    ],
                    "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        158,
                        0
                    ],
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    158,
                    18
                ],
                "name": "fmod",
                "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                "start": [
                    158,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                170,
                                21
                            ],
                            "name": "x",
                            "start": [
                                170,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "finish": [
                        170,
                        26
                    ],
                    "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        170,
                        0
                    ],
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    170,
                    19
                ],
                "name": "frexp",
                "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                "start": [
                    170,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA value larger than any other numeric value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.huge\"])\n",
                "extends": {
                    "finish": [
                        13,
                        27
                    ],
                    "start": [
                        13,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                27
                            ],
                            "start": [
                                13,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    13,
                    27
                ],
                "name": "huge",
                "rawdesc": "\nA value larger than any other numeric value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.huge\"])\n",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                182,
                                21
                            ],
                            "name": "m",
                            "start": [
                                182,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                182,
                                24
                            ],
                            "name": "e",
                            "start": [
                                182,
                                23
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "finish": [
                        182,
                        29
                    ],
                    "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        182,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    182,
                    19
                ],
                "name": "ldexp",
                "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                "start": [
                    182,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                193,
                                19
                            ],
                            "name": "x",
                            "start": [
                                193,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                193,
                                25
                            ],
                            "name": "base",
                            "start": [
                                193,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "finish": [
                        193,
                        30
                    ],
                    "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        193,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    193,
                    17
                ],
                "name": "log",
                "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                "start": [
                    193,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                204,
                                21
                            ],
                            "name": "x",
                            "start": [
                                204,
                                20
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "finish": [
                        204,
                        26
                    ],
                    "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    204,
                    19
                ],
                "name": "log10",
                "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                "start": [
                    204,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                216,
                                19
                            ],
                            "name": "x",
                            "start": [
                                216,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                216,
                                24
                            ],
                            "start": [
                                216,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "finish": [
                        216,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        216,
                        0
                    ],
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    216,
                    17
                ],
                "name": "max",
                "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                "start": [
                    216,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.maxinteger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.maxinteger\"])\n",
                "extends": {
                    "finish": [
                        19,
                        28
                    ],
                    "start": [
                        19,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                19,
                                28
                            ],
                            "start": [
                                19,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    19,
                    28
                ],
                "name": "maxinteger",
                "rawdesc": "\nMiss locale <math.maxinteger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.maxinteger\"])\n",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                228,
                                19
                            ],
                            "name": "x",
                            "start": [
                                228,
                                18
                            ],
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": [
                                228,
                                24
                            ],
                            "start": [
                                228,
                                21
                            ],
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "finish": [
                        228,
                        29
                    ],
                    "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": [
                        228,
                        0
                    ],
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    228,
                    17
                ],
                "name": "min",
                "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                "start": [
                    228,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.mininteger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.mininteger\"])\n",
                "extends": {
                    "finish": [
                        25,
                        28
                    ],
                    "start": [
                        25,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                25,
                                28
                            ],
                            "start": [
                                25,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    25,
                    28
                ],
                "name": "mininteger",
                "rawdesc": "\nMiss locale <math.mininteger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.mininteger\"])\n",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                239,
                                20
                            ],
                            "name": "x",
                            "start": [
                                239,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "finish": [
                        239,
                        25
                    ],
                    "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        239,
                        0
                    ],
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    239,
                    18
                ],
                "name": "modf",
                "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                "start": [
                    239,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe value of *π*.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pi\"])\n",
                "extends": {
                    "finish": [
                        31,
                        27
                    ],
                    "start": [
                        31,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                31,
                                27
                            ],
                            "start": [
                                31,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    31,
                    27
                ],
                "name": "pi",
                "rawdesc": "\nThe value of *π*.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pi\"])\n",
                "start": [
                    31,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                251,
                                19
                            ],
                            "name": "x",
                            "start": [
                                251,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": [
                                251,
                                22
                            ],
                            "name": "y",
                            "start": [
                                251,
                                21
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "finish": [
                        251,
                        27
                    ],
                    "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        251,
                        0
                    ],
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    251,
                    17
                ],
                "name": "pow",
                "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                "start": [
                    251,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                261,
                                19
                            ],
                            "name": "x",
                            "start": [
                                261,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "finish": [
                        261,
                        24
                    ],
                    "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        261,
                        0
                    ],
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    261,
                    17
                ],
                "name": "rad",
                "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                "start": [
                    261,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                277,
                                22
                            ],
                            "name": "m",
                            "start": [
                                277,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                277,
                                25
                            ],
                            "name": "n",
                            "start": [
                                277,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "finish": [
                        277,
                        30
                    ],
                    "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        277,
                        0
                    ],
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    277,
                    20
                ],
                "name": "random",
                "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                "start": [
                    277,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                289,
                                26
                            ],
                            "name": "x",
                            "start": [
                                289,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                289,
                                29
                            ],
                            "name": "y",
                            "start": [
                                289,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "finish": [
                        289,
                        34
                    ],
                    "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "start": [
                        289,
                        0
                    ],
                    "type": "function",
                    "view": "function math.randomseed(x?: integer, y?: integer)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    289,
                    24
                ],
                "name": "randomseed",
                "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                "start": [
                    289,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                299,
                                19
                            ],
                            "name": "x",
                            "start": [
                                299,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "finish": [
                        299,
                        24
                    ],
                    "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        299,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    299,
                    17
                ],
                "name": "sin",
                "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                "start": [
                    299,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                310,
                                20
                            ],
                            "name": "x",
                            "start": [
                                310,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "finish": [
                        310,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        310,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    310,
                    18
                ],
                "name": "sinh",
                "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                "start": [
                    310,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                320,
                                20
                            ],
                            "name": "x",
                            "start": [
                                320,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "finish": [
                        320,
                        25
                    ],
                    "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        320,
                        0
                    ],
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    320,
                    18
                ],
                "name": "sqrt",
                "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                "start": [
                    320,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                330,
                                19
                            ],
                            "name": "x",
                            "start": [
                                330,
                                18
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "finish": [
                        330,
                        24
                    ],
                    "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        330,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    330,
                    17
                ],
                "name": "tan",
                "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                "start": [
                    330,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                341,
                                20
                            ],
                            "name": "x",
                            "start": [
                                341,
                                19
                            ],
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "finish": [
                        341,
                        25
                    ],
                    "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        341,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    341,
                    18
                ],
                "name": "tanh",
                "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                "start": [
                    341,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                352,
                                25
                            ],
                            "name": "x",
                            "start": [
                                352,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "finish": [
                        352,
                        30
                    ],
                    "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        352,
                        0
                    ],
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    352,
                    23
                ],
                "name": "tointeger",
                "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                "start": [
                    352,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                366,
                                20
                            ],
                            "name": "x",
                            "start": [
                                366,
                                19
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": [
                        366,
                        25
                    ],
                    "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": [
                        366,
                        0
                    ],
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    366,
                    18
                ],
                "name": "type",
                "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                "start": [
                    366,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                378,
                                19
                            ],
                            "name": "m",
                            "start": [
                                378,
                                18
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                378,
                                22
                            ],
                            "name": "n",
                            "start": [
                                378,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "finish": [
                        378,
                        27
                    ],
                    "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        378,
                        0
                    ],
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/math.lua",
                "finish": [
                    378,
                    17
                ],
                "name": "ult",
                "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                "start": [
                    378,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "mathlib",
        "type": "type",
        "view": "mathlib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    304,
                    19
                ],
                "start": [
                    304,
                    10
                ],
                "type": "doc.class",
                "view": "metatable",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        309,
                        36
                    ],
                    "start": [
                        309,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                309,
                                31
                            ],
                            "start": [
                                309,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                309,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    309,
                                                    23
                                                ],
                                                "start": [
                                                    309,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                309,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                309,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    309,
                                                    26
                                                ],
                                                "start": [
                                                    309,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                309,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        309,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                309,
                                                31
                                            ],
                                            "start": [
                                                309,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        309,
                                                        31
                                                    ],
                                                    "start": [
                                                        309,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        309,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                309,
                                36
                            ],
                            "start": [
                                309,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    309,
                    36
                ],
                "name": "__add",
                "start": [
                    309,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        317,
                        37
                    ],
                    "start": [
                        317,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                317,
                                32
                            ],
                            "start": [
                                317,
                                18
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                317,
                                                24
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    317,
                                                    24
                                                ],
                                                "start": [
                                                    317,
                                                    22
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                317,
                                                22
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                317,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    317,
                                                    27
                                                ],
                                                "start": [
                                                    317,
                                                    25
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                317,
                                                25
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        317,
                                        32
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                317,
                                                32
                                            ],
                                            "start": [
                                                317,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        317,
                                                        32
                                                    ],
                                                    "start": [
                                                        317,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        317,
                                        18
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                317,
                                37
                            ],
                            "start": [
                                317,
                                34
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    317,
                    37
                ],
                "name": "__band",
                "start": [
                    317,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        320,
                        33
                    ],
                    "start": [
                        320,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                320,
                                28
                            ],
                            "start": [
                                320,
                                18
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                320,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    320,
                                                    23
                                                ],
                                                "start": [
                                                    320,
                                                    22
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                320,
                                                22
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        320,
                                        28
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                320,
                                                28
                                            ],
                                            "start": [
                                                320,
                                                25
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        320,
                                                        28
                                                    ],
                                                    "start": [
                                                        320,
                                                        25
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        320,
                                        18
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):any"
                                }
                            ],
                            "view": "fun(t: any):any"
                        },
                        {
                            "finish": [
                                320,
                                33
                            ],
                            "start": [
                                320,
                                30
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    320,
                    33
                ],
                "name": "__bnot",
                "start": [
                    320,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        318,
                        36
                    ],
                    "start": [
                        318,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                318,
                                31
                            ],
                            "start": [
                                318,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                318,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    318,
                                                    23
                                                ],
                                                "start": [
                                                    318,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                318,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                318,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    318,
                                                    26
                                                ],
                                                "start": [
                                                    318,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                318,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        318,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                318,
                                                31
                                            ],
                                            "start": [
                                                318,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        318,
                                                        31
                                                    ],
                                                    "start": [
                                                        318,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        318,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                318,
                                36
                            ],
                            "start": [
                                318,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    318,
                    36
                ],
                "name": "__bor",
                "start": [
                    318,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        319,
                        37
                    ],
                    "start": [
                        319,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                319,
                                32
                            ],
                            "start": [
                                319,
                                18
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                319,
                                                24
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    319,
                                                    24
                                                ],
                                                "start": [
                                                    319,
                                                    22
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                319,
                                                22
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                319,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    319,
                                                    27
                                                ],
                                                "start": [
                                                    319,
                                                    25
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                319,
                                                25
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        319,
                                        32
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                319,
                                                32
                                            ],
                                            "start": [
                                                319,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        319,
                                                        32
                                                    ],
                                                    "start": [
                                                        319,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        319,
                                        18
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                319,
                                37
                            ],
                            "start": [
                                319,
                                34
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    319,
                    37
                ],
                "name": "__bxor",
                "start": [
                    319,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        330,
                        37
                    ],
                    "start": [
                        330,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                330,
                                32
                            ],
                            "start": [
                                330,
                                18
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                330,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    330,
                                                    23
                                                ],
                                                "start": [
                                                    330,
                                                    22
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                330,
                                                22
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                330,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "...",
                                                "finish": [
                                                    330,
                                                    27
                                                ],
                                                "start": [
                                                    330,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "..."
                                            },
                                            "start": [
                                                330,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        330,
                                        32
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                330,
                                                32
                                            ],
                                            "name": {
                                                "finish": [
                                                    330,
                                                    32
                                                ],
                                                "start": [
                                                    330,
                                                    29
                                                ],
                                                "type": "doc.return.name",
                                                "view": "unknown"
                                            },
                                            "start": [
                                                330,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        330,
                                                        32
                                                    ],
                                                    "start": [
                                                        330,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "unknown"
                                                }
                                            ],
                                            "view": "unknown"
                                        }
                                    ],
                                    "start": [
                                        330,
                                        18
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any, ...any):...unknown"
                                }
                            ],
                            "view": "fun(t: any, ...any):...unknown"
                        },
                        {
                            "finish": [
                                330,
                                37
                            ],
                            "start": [
                                330,
                                34
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any, ...any):...unknown|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    330,
                    37
                ],
                "name": "__call",
                "start": [
                    330,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any, ...any):...unknown|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        332,
                        41
                    ],
                    "start": [
                        332,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                332,
                                36
                            ],
                            "start": [
                                332,
                                19
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                332,
                                                24
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    332,
                                                    24
                                                ],
                                                "start": [
                                                    332,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                332,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                332,
                                                31
                                            ],
                                            "name": {
                                                "[1]": "errobj",
                                                "finish": [
                                                    332,
                                                    31
                                                ],
                                                "start": [
                                                    332,
                                                    25
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "errobj"
                                            },
                                            "start": [
                                                332,
                                                25
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        332,
                                        36
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                332,
                                                36
                                            ],
                                            "start": [
                                                332,
                                                33
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        332,
                                                        36
                                                    ],
                                                    "start": [
                                                        332,
                                                        33
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        332,
                                        19
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any, errobj: any):any"
                                }
                            ],
                            "view": "fun(t: any, errobj: any):any"
                        },
                        {
                            "finish": [
                                332,
                                41
                            ],
                            "start": [
                                332,
                                38
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any, errobj: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    332,
                    41
                ],
                "name": "__close",
                "start": [
                    332,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any, errobj: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        323,
                        39
                    ],
                    "start": [
                        323,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                323,
                                34
                            ],
                            "start": [
                                323,
                                20
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                323,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    323,
                                                    26
                                                ],
                                                "start": [
                                                    323,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                323,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                323,
                                                29
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    323,
                                                    29
                                                ],
                                                "start": [
                                                    323,
                                                    27
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                323,
                                                27
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        323,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                323,
                                                34
                                            ],
                                            "start": [
                                                323,
                                                31
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        323,
                                                        34
                                                    ],
                                                    "start": [
                                                        323,
                                                        31
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        323,
                                        20
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                323,
                                39
                            ],
                            "start": [
                                323,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    323,
                    39
                ],
                "name": "__concat",
                "start": [
                    323,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        312,
                        36
                    ],
                    "start": [
                        312,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                312,
                                31
                            ],
                            "start": [
                                312,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                312,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    312,
                                                    23
                                                ],
                                                "start": [
                                                    312,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                312,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                312,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    312,
                                                    26
                                                ],
                                                "start": [
                                                    312,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                312,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        312,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                312,
                                                31
                                            ],
                                            "start": [
                                                312,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        312,
                                                        31
                                                    ],
                                                    "start": [
                                                        312,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        312,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                312,
                                36
                            ],
                            "start": [
                                312,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    312,
                    36
                ],
                "name": "__div",
                "start": [
                    312,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        325,
                        39
                    ],
                    "start": [
                        325,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                325,
                                34
                            ],
                            "start": [
                                325,
                                16
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                325,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    325,
                                                    22
                                                ],
                                                "start": [
                                                    325,
                                                    20
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                325,
                                                20
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                325,
                                                25
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    325,
                                                    25
                                                ],
                                                "start": [
                                                    325,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                325,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        325,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                325,
                                                34
                                            ],
                                            "start": [
                                                325,
                                                27
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        325,
                                                        34
                                                    ],
                                                    "start": [
                                                        325,
                                                        27
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "boolean"
                                                }
                                            ],
                                            "view": "boolean"
                                        }
                                    ],
                                    "start": [
                                        325,
                                        16
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):boolean"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):boolean"
                        },
                        {
                            "finish": [
                                325,
                                39
                            ],
                            "start": [
                                325,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):boolean|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    325,
                    39
                ],
                "name": "__eq",
                "start": [
                    325,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):boolean|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        308,
                        25
                    ],
                    "start": [
                        308,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": [
                                        308,
                                        20
                                    ],
                                    "name": {
                                        "[1]": "t",
                                        "finish": [
                                            308,
                                            20
                                        ],
                                        "start": [
                                            308,
                                            19
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "t"
                                    },
                                    "start": [
                                        308,
                                        19
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": [
                                308,
                                21
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                308,
                                15
                            ],
                            "type": "doc.type.function",
                            "view": "fun(t: any)"
                        },
                        {
                            "finish": [
                                308,
                                25
                            ],
                            "start": [
                                308,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any)|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    308,
                    25
                ],
                "name": "__gc",
                "start": [
                    308,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any)|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        316,
                        37
                    ],
                    "start": [
                        316,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                316,
                                32
                            ],
                            "start": [
                                316,
                                18
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                316,
                                                24
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    316,
                                                    24
                                                ],
                                                "start": [
                                                    316,
                                                    22
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                316,
                                                22
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                316,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    316,
                                                    27
                                                ],
                                                "start": [
                                                    316,
                                                    25
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                316,
                                                25
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        316,
                                        32
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                316,
                                                32
                                            ],
                                            "start": [
                                                316,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        316,
                                                        32
                                                    ],
                                                    "start": [
                                                        316,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        316,
                                        18
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                316,
                                37
                            ],
                            "start": [
                                316,
                                34
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    316,
                    37
                ],
                "name": "__idiv",
                "start": [
                    316,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        328,
                        42
                    ],
                    "start": [
                        328,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                328,
                                23
                            ],
                            "start": [
                                328,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        },
                        {
                            "finish": [
                                328,
                                37
                            ],
                            "start": [
                                328,
                                25
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                328,
                                                30
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    328,
                                                    30
                                                ],
                                                "start": [
                                                    328,
                                                    29
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                328,
                                                29
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                328,
                                                32
                                            ],
                                            "name": {
                                                "[1]": "k",
                                                "finish": [
                                                    328,
                                                    32
                                                ],
                                                "start": [
                                                    328,
                                                    31
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "k"
                                            },
                                            "start": [
                                                328,
                                                31
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        328,
                                        37
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                328,
                                                37
                                            ],
                                            "start": [
                                                328,
                                                34
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        328,
                                                        37
                                                    ],
                                                    "start": [
                                                        328,
                                                        34
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        328,
                                        25
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any, k: any):any"
                                }
                            ],
                            "view": "fun(t: any, k: any):any"
                        },
                        {
                            "finish": [
                                328,
                                42
                            ],
                            "start": [
                                328,
                                39
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "table|fun(t: any, k: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    328,
                    42
                ],
                "name": "__index",
                "start": [
                    328,
                    10
                ],
                "type": "doc.field",
                "view": "table|fun(t: any, k: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        327,
                        39
                    ],
                    "start": [
                        327,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                327,
                                34
                            ],
                            "start": [
                                327,
                                16
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                327,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    327,
                                                    22
                                                ],
                                                "start": [
                                                    327,
                                                    20
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                327,
                                                20
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                327,
                                                25
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    327,
                                                    25
                                                ],
                                                "start": [
                                                    327,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                327,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        327,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                327,
                                                34
                                            ],
                                            "start": [
                                                327,
                                                27
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        327,
                                                        34
                                                    ],
                                                    "start": [
                                                        327,
                                                        27
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "boolean"
                                                }
                                            ],
                                            "view": "boolean"
                                        }
                                    ],
                                    "start": [
                                        327,
                                        16
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):boolean"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):boolean"
                        },
                        {
                            "finish": [
                                327,
                                39
                            ],
                            "start": [
                                327,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):boolean|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    327,
                    39
                ],
                "name": "__le",
                "start": [
                    327,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):boolean|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        324,
                        36
                    ],
                    "start": [
                        324,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                324,
                                31
                            ],
                            "start": [
                                324,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                324,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    324,
                                                    22
                                                ],
                                                "start": [
                                                    324,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                324,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        324,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                324,
                                                31
                                            ],
                                            "start": [
                                                324,
                                                24
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        324,
                                                        31
                                                    ],
                                                    "start": [
                                                        324,
                                                        24
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "integer"
                                                }
                                            ],
                                            "view": "integer"
                                        }
                                    ],
                                    "start": [
                                        324,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):integer"
                                }
                            ],
                            "view": "fun(t: any):integer"
                        },
                        {
                            "finish": [
                                324,
                                36
                            ],
                            "start": [
                                324,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):integer|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    324,
                    36
                ],
                "name": "__len",
                "start": [
                    324,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):integer|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        326,
                        39
                    ],
                    "start": [
                        326,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                326,
                                34
                            ],
                            "start": [
                                326,
                                16
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                326,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    326,
                                                    22
                                                ],
                                                "start": [
                                                    326,
                                                    20
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                326,
                                                20
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                326,
                                                25
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    326,
                                                    25
                                                ],
                                                "start": [
                                                    326,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                326,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        326,
                                        34
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                326,
                                                34
                                            ],
                                            "start": [
                                                326,
                                                27
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        326,
                                                        34
                                                    ],
                                                    "start": [
                                                        326,
                                                        27
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "boolean"
                                                }
                                            ],
                                            "view": "boolean"
                                        }
                                    ],
                                    "start": [
                                        326,
                                        16
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):boolean"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):boolean"
                        },
                        {
                            "finish": [
                                326,
                                39
                            ],
                            "start": [
                                326,
                                36
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):boolean|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    326,
                    39
                ],
                "name": "__lt",
                "start": [
                    326,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):boolean|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        306,
                        29
                    ],
                    "start": [
                        306,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                306,
                                25
                            ],
                            "start": [
                                306,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "any"
                        },
                        {
                            "finish": [
                                306,
                                29
                            ],
                            "start": [
                                306,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    306,
                    29
                ],
                "name": "__metatable",
                "start": [
                    306,
                    10
                ],
                "type": "doc.field",
                "view": "any",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        313,
                        36
                    ],
                    "start": [
                        313,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                313,
                                31
                            ],
                            "start": [
                                313,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                313,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    313,
                                                    23
                                                ],
                                                "start": [
                                                    313,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                313,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                313,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    313,
                                                    26
                                                ],
                                                "start": [
                                                    313,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                313,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        313,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                313,
                                                31
                                            ],
                                            "start": [
                                                313,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        313,
                                                        31
                                                    ],
                                                    "start": [
                                                        313,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        313,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                313,
                                36
                            ],
                            "start": [
                                313,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    313,
                    36
                ],
                "name": "__mod",
                "start": [
                    313,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        305,
                        33
                    ],
                    "start": [
                        305,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                305,
                                20
                            ],
                            "start": [
                                305,
                                17
                            ],
                            "type": "doc.type.string",
                            "view": "'v'"
                        },
                        {
                            "finish": [
                                305,
                                24
                            ],
                            "start": [
                                305,
                                21
                            ],
                            "type": "doc.type.string",
                            "view": "'k'"
                        },
                        {
                            "finish": [
                                305,
                                29
                            ],
                            "start": [
                                305,
                                25
                            ],
                            "type": "doc.type.string",
                            "view": "'kv'"
                        },
                        {
                            "finish": [
                                305,
                                33
                            ],
                            "start": [
                                305,
                                30
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "'k'|'kv'|'v'|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    305,
                    33
                ],
                "name": "__mode",
                "start": [
                    305,
                    10
                ],
                "type": "doc.field",
                "view": "'k'|'kv'|'v'|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        311,
                        36
                    ],
                    "start": [
                        311,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                311,
                                31
                            ],
                            "start": [
                                311,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                311,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    311,
                                                    23
                                                ],
                                                "start": [
                                                    311,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                311,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                311,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    311,
                                                    26
                                                ],
                                                "start": [
                                                    311,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                311,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        311,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                311,
                                                31
                                            ],
                                            "start": [
                                                311,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        311,
                                                        31
                                                    ],
                                                    "start": [
                                                        311,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        311,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                311,
                                36
                            ],
                            "start": [
                                311,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    311,
                    36
                ],
                "name": "__mul",
                "start": [
                    311,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        329,
                        41
                    ],
                    "start": [
                        329,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                329,
                                26
                            ],
                            "start": [
                                329,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        },
                        {
                            "args": [
                                {
                                    "finish": [
                                        329,
                                        32
                                    ],
                                    "name": {
                                        "[1]": "t",
                                        "finish": [
                                            329,
                                            32
                                        ],
                                        "start": [
                                            329,
                                            31
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "t"
                                    },
                                    "start": [
                                        329,
                                        31
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                },
                                {
                                    "finish": [
                                        329,
                                        34
                                    ],
                                    "name": {
                                        "[1]": "k",
                                        "finish": [
                                            329,
                                            34
                                        ],
                                        "start": [
                                            329,
                                            33
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "k"
                                    },
                                    "start": [
                                        329,
                                        33
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                },
                                {
                                    "finish": [
                                        329,
                                        36
                                    ],
                                    "name": {
                                        "[1]": "v",
                                        "finish": [
                                            329,
                                            36
                                        ],
                                        "start": [
                                            329,
                                            35
                                        ],
                                        "type": "doc.type.arg.name",
                                        "view": "v"
                                    },
                                    "start": [
                                        329,
                                        35
                                    ],
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": [
                                329,
                                37
                            ],
                            "returns": {
                                "view": "unknown"
                            },
                            "start": [
                                329,
                                27
                            ],
                            "type": "doc.type.function",
                            "view": "fun(t: any, k: any, v: any)"
                        },
                        {
                            "finish": [
                                329,
                                41
                            ],
                            "start": [
                                329,
                                38
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "table|fun(t: any, k: any, v: any)|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    329,
                    41
                ],
                "name": "__newindex",
                "start": [
                    329,
                    10
                ],
                "type": "doc.field",
                "view": "table|fun(t: any, k: any, v: any)|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        331,
                        61
                    ],
                    "start": [
                        331,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                331,
                                56
                            ],
                            "start": [
                                331,
                                19
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                331,
                                                24
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    331,
                                                    24
                                                ],
                                                "start": [
                                                    331,
                                                    23
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                331,
                                                23
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        331,
                                        56
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                331,
                                                47
                                            ],
                                            "start": [
                                                331,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        331,
                                                        46
                                                    ],
                                                    "start": [
                                                        331,
                                                        28
                                                    ],
                                                    "type": "doc.type",
                                                    "types": [
                                                        {
                                                            "args": [
                                                                {
                                                                    "finish": [
                                                                        331,
                                                                        33
                                                                    ],
                                                                    "name": {
                                                                        "[1]": "t",
                                                                        "finish": [
                                                                            331,
                                                                            33
                                                                        ],
                                                                        "start": [
                                                                            331,
                                                                            32
                                                                        ],
                                                                        "type": "doc.type.arg.name",
                                                                        "view": "t"
                                                                    },
                                                                    "start": [
                                                                        331,
                                                                        32
                                                                    ],
                                                                    "type": "doc.type.arg",
                                                                    "view": "any"
                                                                },
                                                                {
                                                                    "finish": [
                                                                        331,
                                                                        35
                                                                    ],
                                                                    "name": {
                                                                        "[1]": "k",
                                                                        "finish": [
                                                                            331,
                                                                            35
                                                                        ],
                                                                        "start": [
                                                                            331,
                                                                            34
                                                                        ],
                                                                        "type": "doc.type.arg.name",
                                                                        "view": "k"
                                                                    },
                                                                    "start": [
                                                                        331,
                                                                        34
                                                                    ],
                                                                    "type": "doc.type.arg",
                                                                    "view": "any"
                                                                },
                                                                {
                                                                    "finish": [
                                                                        331,
                                                                        37
                                                                    ],
                                                                    "name": {
                                                                        "[1]": "v",
                                                                        "finish": [
                                                                            331,
                                                                            37
                                                                        ],
                                                                        "start": [
                                                                            331,
                                                                            36
                                                                        ],
                                                                        "type": "doc.type.arg.name",
                                                                        "view": "v"
                                                                    },
                                                                    "start": [
                                                                        331,
                                                                        36
                                                                    ],
                                                                    "type": "doc.type.arg",
                                                                    "view": "any"
                                                                }
                                                            ],
                                                            "finish": [
                                                                331,
                                                                46
                                                            ],
                                                            "returns": [
                                                                {
                                                                    "finish": [
                                                                        331,
                                                                        42
                                                                    ],
                                                                    "start": [
                                                                        331,
                                                                        39
                                                                    ],
                                                                    "type": "doc.type",
                                                                    "types": [
                                                                        {
                                                                            "finish": [
                                                                                331,
                                                                                42
                                                                            ],
                                                                            "start": [
                                                                                331,
                                                                                39
                                                                            ],
                                                                            "type": "doc.type.name",
                                                                            "view": "any"
                                                                        }
                                                                    ],
                                                                    "view": "any"
                                                                },
                                                                {
                                                                    "finish": [
                                                                        331,
                                                                        46
                                                                    ],
                                                                    "start": [
                                                                        331,
                                                                        43
                                                                    ],
                                                                    "type": "doc.type",
                                                                    "types": [
                                                                        {
                                                                            "finish": [
                                                                                331,
                                                                                46
                                                                            ],
                                                                            "start": [
                                                                                331,
                                                                                43
                                                                            ],
                                                                            "type": "doc.type.name",
                                                                            "view": "any"
                                                                        }
                                                                    ],
                                                                    "view": "any"
                                                                }
                                                            ],
                                                            "start": [
                                                                331,
                                                                28
                                                            ],
                                                            "type": "doc.type.function",
                                                            "view": "fun(t: any, k: any, v: any):any, any"
                                                        }
                                                    ],
                                                    "view": "fun(t: any, k: any, v: any):any, any"
                                                }
                                            ],
                                            "view": "fun(t: any, k: any, v: any):any, any"
                                        },
                                        {
                                            "finish": [
                                                331,
                                                51
                                            ],
                                            "start": [
                                                331,
                                                48
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        331,
                                                        51
                                                    ],
                                                    "start": [
                                                        331,
                                                        48
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                331,
                                                55
                                            ],
                                            "start": [
                                                331,
                                                52
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        331,
                                                        55
                                                    ],
                                                    "start": [
                                                        331,
                                                        52
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        331,
                                        19
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):fun(t: any, k: any, v: any):any, any, any, any"
                                }
                            ],
                            "view": "fun(t: any):fun(t: any, k: any, v: any):any, any, any, any"
                        },
                        {
                            "finish": [
                                331,
                                61
                            ],
                            "start": [
                                331,
                                58
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):fun(t: any, k: any, v: any):any, any, any, any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    331,
                    61
                ],
                "name": "__pairs",
                "start": [
                    331,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):fun(t: any, k: any, v: any):any, any, any, any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        314,
                        36
                    ],
                    "start": [
                        314,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                314,
                                31
                            ],
                            "start": [
                                314,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                314,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    314,
                                                    23
                                                ],
                                                "start": [
                                                    314,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                314,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                314,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    314,
                                                    26
                                                ],
                                                "start": [
                                                    314,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                314,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        314,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                314,
                                                31
                                            ],
                                            "start": [
                                                314,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        314,
                                                        31
                                                    ],
                                                    "start": [
                                                        314,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        314,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                314,
                                36
                            ],
                            "start": [
                                314,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    314,
                    36
                ],
                "name": "__pow",
                "start": [
                    314,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        321,
                        36
                    ],
                    "start": [
                        321,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                321,
                                31
                            ],
                            "start": [
                                321,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                321,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    321,
                                                    23
                                                ],
                                                "start": [
                                                    321,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                321,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                321,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    321,
                                                    26
                                                ],
                                                "start": [
                                                    321,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                321,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        321,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                321,
                                                31
                                            ],
                                            "start": [
                                                321,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        321,
                                                        31
                                                    ],
                                                    "start": [
                                                        321,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        321,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                321,
                                36
                            ],
                            "start": [
                                321,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    321,
                    36
                ],
                "name": "__shl",
                "start": [
                    321,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        322,
                        36
                    ],
                    "start": [
                        322,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                322,
                                31
                            ],
                            "start": [
                                322,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                322,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    322,
                                                    23
                                                ],
                                                "start": [
                                                    322,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                322,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                322,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    322,
                                                    26
                                                ],
                                                "start": [
                                                    322,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                322,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        322,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                322,
                                                31
                                            ],
                                            "start": [
                                                322,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        322,
                                                        31
                                                    ],
                                                    "start": [
                                                        322,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        322,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                322,
                                36
                            ],
                            "start": [
                                322,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    322,
                    36
                ],
                "name": "__shr",
                "start": [
                    322,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        310,
                        36
                    ],
                    "start": [
                        310,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                310,
                                31
                            ],
                            "start": [
                                310,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                310,
                                                23
                                            ],
                                            "name": {
                                                "[1]": "t1",
                                                "finish": [
                                                    310,
                                                    23
                                                ],
                                                "start": [
                                                    310,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t1"
                                            },
                                            "start": [
                                                310,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        },
                                        {
                                            "finish": [
                                                310,
                                                26
                                            ],
                                            "name": {
                                                "[1]": "t2",
                                                "finish": [
                                                    310,
                                                    26
                                                ],
                                                "start": [
                                                    310,
                                                    24
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t2"
                                            },
                                            "start": [
                                                310,
                                                24
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        310,
                                        31
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                310,
                                                31
                                            ],
                                            "start": [
                                                310,
                                                28
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        310,
                                                        31
                                                    ],
                                                    "start": [
                                                        310,
                                                        28
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        310,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t1: any, t2: any):any"
                                }
                            ],
                            "view": "fun(t1: any, t2: any):any"
                        },
                        {
                            "finish": [
                                310,
                                36
                            ],
                            "start": [
                                310,
                                33
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t1: any, t2: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    310,
                    36
                ],
                "name": "__sub",
                "start": [
                    310,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t1: any, t2: any):any|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        307,
                        40
                    ],
                    "start": [
                        307,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                307,
                                35
                            ],
                            "start": [
                                307,
                                22
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                307,
                                                27
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    307,
                                                    27
                                                ],
                                                "start": [
                                                    307,
                                                    26
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                307,
                                                26
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        307,
                                        35
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                307,
                                                35
                                            ],
                                            "start": [
                                                307,
                                                29
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        307,
                                                        35
                                                    ],
                                                    "start": [
                                                        307,
                                                        29
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "string"
                                                }
                                            ],
                                            "view": "string"
                                        }
                                    ],
                                    "start": [
                                        307,
                                        22
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):string"
                                }
                            ],
                            "view": "fun(t: any):string"
                        },
                        {
                            "finish": [
                                307,
                                40
                            ],
                            "start": [
                                307,
                                37
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):string|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    307,
                    40
                ],
                "name": "__tostring",
                "start": [
                    307,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):string|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        315,
                        32
                    ],
                    "start": [
                        315,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                315,
                                27
                            ],
                            "start": [
                                315,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "args": [
                                        {
                                            "finish": [
                                                315,
                                                22
                                            ],
                                            "name": {
                                                "[1]": "t",
                                                "finish": [
                                                    315,
                                                    22
                                                ],
                                                "start": [
                                                    315,
                                                    21
                                                ],
                                                "type": "doc.type.arg.name",
                                                "view": "t"
                                            },
                                            "start": [
                                                315,
                                                21
                                            ],
                                            "type": "doc.type.arg",
                                            "view": "any"
                                        }
                                    ],
                                    "finish": [
                                        315,
                                        27
                                    ],
                                    "returns": [
                                        {
                                            "finish": [
                                                315,
                                                27
                                            ],
                                            "start": [
                                                315,
                                                24
                                            ],
                                            "type": "doc.type",
                                            "types": [
                                                {
                                                    "finish": [
                                                        315,
                                                        27
                                                    ],
                                                    "start": [
                                                        315,
                                                        24
                                                    ],
                                                    "type": "doc.type.name",
                                                    "view": "any"
                                                }
                                            ],
                                            "view": "any"
                                        }
                                    ],
                                    "start": [
                                        315,
                                        17
                                    ],
                                    "type": "doc.type.function",
                                    "view": "fun(t: any):any"
                                }
                            ],
                            "view": "fun(t: any):any"
                        },
                        {
                            "finish": [
                                315,
                                32
                            ],
                            "start": [
                                315,
                                29
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "fun(t: any):any|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    315,
                    32
                ],
                "name": "__unm",
                "start": [
                    315,
                    10
                ],
                "type": "doc.field",
                "view": "fun(t: any):any|nil",
                "visible": "public"
            }
        ],
        "name": "metatable",
        "type": "type",
        "view": "metatable"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                172,
                                20
                            ],
                            "name": "name",
                            "start": [
                                172,
                                16
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                172,
                                25
                            ],
                            "start": [
                                172,
                                22
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "finish": [
                        172,
                        30
                    ],
                    "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "start": [
                        172,
                        0
                    ],
                    "type": "function",
                    "view": "function module(name: string, ...any)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    172,
                    15
                ],
                "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                "start": [
                    172,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "module",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                162,
                                23
                            ],
                            "name": "proxy",
                            "start": [
                                162,
                                18
                            ],
                            "type": "local",
                            "view": "boolean|table|userdata"
                        }
                    ],
                    "finish": [
                        162,
                        28
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function newproxy(proxy: boolean|table|userdata)\n  -> userdata"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    162,
                    17
                ],
                "start": [
                    162,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "newproxy",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                190,
                                19
                            ],
                            "name": "table",
                            "start": [
                                190,
                                14
                            ],
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": [
                                190,
                                26
                            ],
                            "name": "index",
                            "start": [
                                190,
                                21
                            ],
                            "type": "local",
                            "view": "<K>?"
                        }
                    ],
                    "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "finish": [
                        190,
                        31
                    ],
                    "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        },
                        {
                            "type": "function.return",
                            "view": "<V>?"
                        }
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function next(table: table<<K>, <V>>, index?: <K>)\n  -> <K>?\n  2. <V>?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    190,
                    13
                ],
                "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                "start": [
                    190,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "next",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    4,
                    13
                ],
                "start": [
                    4,
                    10
                ],
                "type": "doc.class",
                "view": "nil",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "nil",
        "type": "type",
        "view": "nil"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    8,
                    16
                ],
                "start": [
                    8,
                    10
                ],
                "type": "doc.class",
                "view": "number",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "number",
        "type": "type",
        "view": "number"
    },
    {
        "defines": [
            {
                "desc": "```lua\nopenmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "finish": [
                    40,
                    10
                ],
                "rawdesc": "```lua\nopenmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                "start": [
                    28,
                    10
                ],
                "type": "doc.alias",
                "view": "\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7)"
            }
        ],
        "fields": [],
        "name": "openmode",
        "type": "type",
        "view": "openmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "finish": [
                        8,
                        7
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "start": [
                        8,
                        5
                    ],
                    "type": "table",
                    "view": "oslib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    8,
                    2
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "oslib",
                "visible": "public"
            }
        ],
        "name": "os",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "finish": [
                        17,
                        23
                    ],
                    "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        17,
                        0
                    ],
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    17,
                    17
                ],
                "name": "clock",
                "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "start": [
                    17,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.clock",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                23
                            ],
                            "name": "format",
                            "start": [
                                84,
                                17
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                84,
                                29
                            ],
                            "name": "time",
                            "start": [
                                84,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "finish": [
                        84,
                        34
                    ],
                    "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    84,
                    16
                ],
                "name": "date",
                "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.date",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                23
                            ],
                            "name": "t2",
                            "start": [
                                95,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                95,
                                27
                            ],
                            "name": "t1",
                            "start": [
                                95,
                                25
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "finish": [
                        95,
                        32
                    ],
                    "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    95,
                    20
                ],
                "name": "difftime",
                "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.difftime",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                106,
                                27
                            ],
                            "name": "command",
                            "start": [
                                106,
                                20
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        106,
                        32
                    ],
                    "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    106,
                    19
                ],
                "name": "execute",
                "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.execute",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                21
                            ],
                            "name": "code",
                            "start": [
                                115,
                                17
                            ],
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "finish": [
                                115,
                                28
                            ],
                            "name": "close",
                            "start": [
                                115,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "finish": [
                        115,
                        33
                    ],
                    "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    115,
                    16
                ],
                "name": "exit",
                "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "start": [
                    115,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.exit",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                125,
                                26
                            ],
                            "name": "varname",
                            "start": [
                                125,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "finish": [
                        125,
                        31
                    ],
                    "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        125,
                        0
                    ],
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    125,
                    18
                ],
                "name": "getenv",
                "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "start": [
                    125,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.getenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                135,
                                27
                            ],
                            "name": "filename",
                            "start": [
                                135,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "finish": [
                        135,
                        32
                    ],
                    "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        135,
                        0
                    ],
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    135,
                    18
                ],
                "name": "remove",
                "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "start": [
                    135,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.remove",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                146,
                                26
                            ],
                            "name": "oldname",
                            "start": [
                                146,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                146,
                                35
                            ],
                            "name": "newname",
                            "start": [
                                146,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "finish": [
                        146,
                        40
                    ],
                    "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    146,
                    18
                ],
                "name": "rename",
                "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.rename",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                28
                            ],
                            "name": "locale",
                            "start": [
                                164,
                                22
                            ],
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": [
                                164,
                                38
                            ],
                            "name": "category",
                            "start": [
                                164,
                                30
                            ],
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": [
                        164,
                        43
                    ],
                    "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    164,
                    21
                ],
                "name": "setlocale",
                "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "start": [
                    164,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.setlocale",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                230,
                                21
                            ],
                            "name": "date",
                            "start": [
                                230,
                                17
                            ],
                            "type": "local",
                            "view": "osdateparam?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "finish": [
                        230,
                        26
                    ],
                    "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "function os.time(date?: osdateparam)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    230,
                    16
                ],
                "name": "time",
                "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "start": [
                    230,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.time",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "finish": [
                        239,
                        25
                    ],
                    "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        239,
                        0
                    ],
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    239,
                    19
                ],
                "name": "tmpname",
                "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "start": [
                    239,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "os.tmpname",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            19,
                            28
                        ],
                        "start": [
                            19,
                            17
                        ],
                        "type": "doc.extends.name",
                        "view": "osdateparam"
                    }
                ],
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    19,
                    28
                ],
                "start": [
                    19,
                    10
                ],
                "type": "doc.class",
                "view": "osdate",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "extends": {
                    "finish": [
                        37,
                        30
                    ],
                    "start": [
                        37,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                37,
                                23
                            ],
                            "start": [
                                37,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                37,
                                30
                            ],
                            "start": [
                                37,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    37,
                    30
                ],
                "name": "day",
                "rawdesc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "start": [
                    37,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "extends": {
                    "finish": [
                        43,
                        30
                    ],
                    "start": [
                        43,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                43,
                                23
                            ],
                            "start": [
                                43,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                43,
                                30
                            ],
                            "start": [
                                43,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    43,
                    30
                ],
                "name": "hour",
                "rawdesc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "start": [
                    43,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "extends": {
                    "finish": [
                        73,
                        23
                    ],
                    "start": [
                        73,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                73,
                                23
                            ],
                            "start": [
                                73,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    73,
                    23
                ],
                "name": "isdst",
                "rawdesc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "start": [
                    73,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "extends": {
                    "finish": [
                        49,
                        30
                    ],
                    "start": [
                        49,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                49,
                                23
                            ],
                            "start": [
                                49,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                49,
                                30
                            ],
                            "start": [
                                49,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    49,
                    30
                ],
                "name": "min",
                "rawdesc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "start": [
                    49,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "extends": {
                    "finish": [
                        31,
                        30
                    ],
                    "start": [
                        31,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                31,
                                23
                            ],
                            "start": [
                                31,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    31,
                    30
                ],
                "name": "month",
                "rawdesc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "start": [
                    31,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "extends": {
                    "finish": [
                        55,
                        30
                    ],
                    "start": [
                        55,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                55,
                                23
                            ],
                            "start": [
                                55,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                55,
                                30
                            ],
                            "start": [
                                55,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    55,
                    30
                ],
                "name": "sec",
                "rawdesc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "start": [
                    55,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "extends": {
                    "finish": [
                        61,
                        30
                    ],
                    "start": [
                        61,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                61,
                                23
                            ],
                            "start": [
                                61,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                61,
                                30
                            ],
                            "start": [
                                61,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    61,
                    30
                ],
                "name": "wday",
                "rawdesc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "start": [
                    61,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "extends": {
                    "finish": [
                        67,
                        30
                    ],
                    "start": [
                        67,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                23
                            ],
                            "start": [
                                67,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                67,
                                30
                            ],
                            "start": [
                                67,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    67,
                    30
                ],
                "name": "yday",
                "rawdesc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "extends": {
                    "finish": [
                        25,
                        30
                    ],
                    "start": [
                        25,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                25,
                                23
                            ],
                            "start": [
                                25,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                25,
                                30
                            ],
                            "start": [
                                25,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    25,
                    30
                ],
                "name": "year",
                "rawdesc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "start": [
                    25,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            }
        ],
        "name": "osdate",
        "type": "type",
        "view": "osdate"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    166,
                    21
                ],
                "start": [
                    166,
                    10
                ],
                "type": "doc.class",
                "view": "osdateparam",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "extends": {
                    "finish": [
                        184,
                        30
                    ],
                    "start": [
                        184,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                184,
                                23
                            ],
                            "start": [
                                184,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                184,
                                30
                            ],
                            "start": [
                                184,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    184,
                    30
                ],
                "name": "day",
                "rawdesc": "\n1-31\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.day\"])\n",
                "start": [
                    184,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "extends": {
                    "finish": [
                        190,
                        33
                    ],
                    "start": [
                        190,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                190,
                                31
                            ],
                            "start": [
                                190,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        190,
                                        24
                                    ],
                                    "start": [
                                        190,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        190,
                                        31
                                    ],
                                    "start": [
                                        190,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    190,
                    33
                ],
                "name": "hour",
                "rawdesc": "\n0-23\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.hour\"])\n",
                "start": [
                    190,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "extends": {
                    "finish": [
                        220,
                        24
                    ],
                    "start": [
                        220,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                220,
                                23
                            ],
                            "start": [
                                220,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    220,
                    24
                ],
                "name": "isdst",
                "rawdesc": "\ndaylight saving flag, a boolean\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.isdst\"])\n",
                "start": [
                    220,
                    10
                ],
                "type": "doc.field",
                "view": "boolean?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "extends": {
                    "finish": [
                        196,
                        33
                    ],
                    "start": [
                        196,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                196,
                                31
                            ],
                            "start": [
                                196,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        196,
                                        24
                                    ],
                                    "start": [
                                        196,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        196,
                                        31
                                    ],
                                    "start": [
                                        196,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    196,
                    33
                ],
                "name": "min",
                "rawdesc": "\n0-59\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.min\"])\n",
                "start": [
                    196,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "extends": {
                    "finish": [
                        178,
                        30
                    ],
                    "start": [
                        178,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                178,
                                23
                            ],
                            "start": [
                                178,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                178,
                                30
                            ],
                            "start": [
                                178,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    178,
                    30
                ],
                "name": "month",
                "rawdesc": "\n1-12\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.month\"])\n",
                "start": [
                    178,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "extends": {
                    "finish": [
                        202,
                        33
                    ],
                    "start": [
                        202,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                202,
                                31
                            ],
                            "start": [
                                202,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        202,
                                        24
                                    ],
                                    "start": [
                                        202,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        202,
                                        31
                                    ],
                                    "start": [
                                        202,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    202,
                    33
                ],
                "name": "sec",
                "rawdesc": "\n0-61\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.sec\"])\n",
                "start": [
                    202,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "extends": {
                    "finish": [
                        208,
                        33
                    ],
                    "start": [
                        208,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                208,
                                31
                            ],
                            "start": [
                                208,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        208,
                                        24
                                    ],
                                    "start": [
                                        208,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        208,
                                        31
                                    ],
                                    "start": [
                                        208,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    208,
                    33
                ],
                "name": "wday",
                "rawdesc": "\nweekday, 1–7, Sunday is 1\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.wday\"])\n",
                "start": [
                    208,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "extends": {
                    "finish": [
                        214,
                        33
                    ],
                    "start": [
                        214,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                214,
                                31
                            ],
                            "start": [
                                214,
                                17
                            ],
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": [
                                        214,
                                        24
                                    ],
                                    "start": [
                                        214,
                                        17
                                    ],
                                    "type": "doc.type.name",
                                    "view": "integer"
                                },
                                {
                                    "finish": [
                                        214,
                                        31
                                    ],
                                    "start": [
                                        214,
                                        25
                                    ],
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|integer"
                        }
                    ],
                    "view": "(string|integer)?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    214,
                    33
                ],
                "name": "yday",
                "rawdesc": "\nday of the year, 1–366\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.yday\"])\n",
                "start": [
                    214,
                    10
                ],
                "type": "doc.field",
                "view": "(string|integer)?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "extends": {
                    "finish": [
                        172,
                        30
                    ],
                    "start": [
                        172,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                172,
                                23
                            ],
                            "start": [
                                172,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                172,
                                30
                            ],
                            "start": [
                                172,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string|integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    172,
                    30
                ],
                "name": "year",
                "rawdesc": "\nfour digits\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-osdate.year\"])\n",
                "start": [
                    172,
                    10
                ],
                "type": "doc.field",
                "view": "string|integer",
                "visible": "public"
            }
        ],
        "name": "osdateparam",
        "type": "type",
        "view": "osdateparam"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    7,
                    15
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "oslib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "finish": [
                        17,
                        23
                    ],
                    "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": [
                        17,
                        0
                    ],
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    17,
                    17
                ],
                "name": "clock",
                "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                "start": [
                    17,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                23
                            ],
                            "name": "format",
                            "start": [
                                84,
                                17
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                84,
                                29
                            ],
                            "name": "time",
                            "start": [
                                84,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "finish": [
                        84,
                        34
                    ],
                    "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    84,
                    16
                ],
                "name": "date",
                "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                23
                            ],
                            "name": "t2",
                            "start": [
                                95,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                95,
                                27
                            ],
                            "name": "t1",
                            "start": [
                                95,
                                25
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "finish": [
                        95,
                        32
                    ],
                    "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    95,
                    20
                ],
                "name": "difftime",
                "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                106,
                                27
                            ],
                            "name": "command",
                            "start": [
                                106,
                                20
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": [
                        106,
                        32
                    ],
                    "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    106,
                    19
                ],
                "name": "execute",
                "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                21
                            ],
                            "name": "code",
                            "start": [
                                115,
                                17
                            ],
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "finish": [
                                115,
                                28
                            ],
                            "name": "close",
                            "start": [
                                115,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "finish": [
                        115,
                        33
                    ],
                    "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    115,
                    16
                ],
                "name": "exit",
                "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                "start": [
                    115,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                125,
                                26
                            ],
                            "name": "varname",
                            "start": [
                                125,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "finish": [
                        125,
                        31
                    ],
                    "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        125,
                        0
                    ],
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    125,
                    18
                ],
                "name": "getenv",
                "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                "start": [
                    125,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                135,
                                27
                            ],
                            "name": "filename",
                            "start": [
                                135,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "finish": [
                        135,
                        32
                    ],
                    "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        135,
                        0
                    ],
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    135,
                    18
                ],
                "name": "remove",
                "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                "start": [
                    135,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                146,
                                26
                            ],
                            "name": "oldname",
                            "start": [
                                146,
                                19
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                146,
                                35
                            ],
                            "name": "newname",
                            "start": [
                                146,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "finish": [
                        146,
                        40
                    ],
                    "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    146,
                    18
                ],
                "name": "rename",
                "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                28
                            ],
                            "name": "locale",
                            "start": [
                                164,
                                22
                            ],
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": [
                                164,
                                38
                            ],
                            "name": "category",
                            "start": [
                                164,
                                30
                            ],
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": [
                        164,
                        43
                    ],
                    "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    164,
                    21
                ],
                "name": "setlocale",
                "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                "start": [
                    164,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                230,
                                21
                            ],
                            "name": "date",
                            "start": [
                                230,
                                17
                            ],
                            "type": "local",
                            "view": "osdateparam?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "finish": [
                        230,
                        26
                    ],
                    "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "function os.time(date?: osdateparam)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    230,
                    16
                ],
                "name": "time",
                "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                "start": [
                    230,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "finish": [
                        239,
                        25
                    ],
                    "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        239,
                        0
                    ],
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/os.lua",
                "finish": [
                    239,
                    19
                ],
                "name": "tmpname",
                "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                "start": [
                    239,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "oslib",
        "type": "type",
        "view": "oslib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "finish": [
                        42,
                        12
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "start": [
                        42,
                        10
                    ],
                    "type": "table",
                    "view": "packagelib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    42,
                    7
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "start": [
                    42,
                    0
                ],
                "type": "setglobal",
                "view": "packagelib",
                "visible": "public"
            }
        ],
        "name": "package",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "extends": {
                    "finish": [
                        54,
                        3
                    ],
                    "start": [
                        49,
                        17
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    49,
                    14
                ],
                "name": "config",
                "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "start": [
                    49,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "package.config",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "extends": {
                    "finish": [
                        62,
                        20
                    ],
                    "start": [
                        62,
                        18
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    62,
                    15
                ],
                "name": "loaders",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "start": [
                    62,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "package.loaders",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                72,
                                32
                            ],
                            "name": "libname",
                            "start": [
                                72,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                72,
                                42
                            ],
                            "name": "funcname",
                            "start": [
                                72,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "finish": [
                        72,
                        47
                    ],
                    "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        72,
                        0
                    ],
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    72,
                    24
                ],
                "name": "loadlib",
                "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "start": [
                    72,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "package.loadlib",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "extends": {
                    "finish": [
                        80,
                        22
                    ],
                    "start": [
                        80,
                        20
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    80,
                    17
                ],
                "name": "searchers",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "start": [
                    80,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "package.searchers",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                32
                            ],
                            "name": "name",
                            "start": [
                                95,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                38
                            ],
                            "name": "path",
                            "start": [
                                95,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                43
                            ],
                            "name": "sep",
                            "start": [
                                95,
                                40
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                95,
                                48
                            ],
                            "name": "rep",
                            "start": [
                                95,
                                45
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "finish": [
                        95,
                        53
                    ],
                    "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    95,
                    27
                ],
                "name": "searchpath",
                "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "package.searchpath",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                104,
                                30
                            ],
                            "name": "module",
                            "start": [
                                104,
                                24
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "finish": [
                        104,
                        35
                    ],
                    "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    104,
                    23
                ],
                "name": "seeall",
                "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "package.seeall",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    17,
                    20
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                "start": [
                    17,
                    10
                ],
                "type": "doc.class",
                "view": "packagelib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "extends": {
                    "finish": [
                        54,
                        3
                    ],
                    "start": [
                        49,
                        17
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    49,
                    14
                ],
                "name": "config",
                "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                "start": [
                    49,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe path used by `require` to search for a C loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.cpath\"])\n",
                "extends": {
                    "finish": [
                        23,
                        26
                    ],
                    "start": [
                        23,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                23,
                                26
                            ],
                            "start": [
                                23,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    23,
                    26
                ],
                "name": "cpath",
                "rawdesc": "\nThe path used by `require` to search for a C loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.cpath\"])\n",
                "start": [
                    23,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table used by `require` to control which modules are already loaded.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaded\"])\n",
                "extends": {
                    "finish": [
                        29,
                        25
                    ],
                    "start": [
                        29,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                29,
                                25
                            ],
                            "start": [
                                29,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    29,
                    25
                ],
                "name": "loaded",
                "rawdesc": "\nA table used by `require` to control which modules are already loaded.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaded\"])\n",
                "start": [
                    29,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "extends": {
                    "finish": [
                        62,
                        20
                    ],
                    "start": [
                        62,
                        18
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    62,
                    15
                ],
                "name": "loaders",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                "start": [
                    62,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                72,
                                32
                            ],
                            "name": "libname",
                            "start": [
                                72,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                72,
                                42
                            ],
                            "name": "funcname",
                            "start": [
                                72,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "finish": [
                        72,
                        47
                    ],
                    "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        72,
                        0
                    ],
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    72,
                    24
                ],
                "name": "loadlib",
                "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                "start": [
                    72,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe path used by `require` to search for a Lua loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.path\"])\n",
                "extends": {
                    "finish": [
                        35,
                        26
                    ],
                    "start": [
                        35,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                35,
                                26
                            ],
                            "start": [
                                35,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    35,
                    26
                ],
                "name": "path",
                "rawdesc": "\nThe path used by `require` to search for a Lua loader.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.path\"])\n",
                "start": [
                    35,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table to store loaders for specific modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.preload\"])\n",
                "extends": {
                    "finish": [
                        41,
                        25
                    ],
                    "start": [
                        41,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                41,
                                25
                            ],
                            "start": [
                                41,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    41,
                    25
                ],
                "name": "preload",
                "rawdesc": "\nA table to store loaders for specific modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.preload\"])\n",
                "start": [
                    41,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "extends": {
                    "finish": [
                        80,
                        22
                    ],
                    "start": [
                        80,
                        20
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    80,
                    17
                ],
                "name": "searchers",
                "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                "start": [
                    80,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                95,
                                32
                            ],
                            "name": "name",
                            "start": [
                                95,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                38
                            ],
                            "name": "path",
                            "start": [
                                95,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                95,
                                43
                            ],
                            "name": "sep",
                            "start": [
                                95,
                                40
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                95,
                                48
                            ],
                            "name": "rep",
                            "start": [
                                95,
                                45
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "finish": [
                        95,
                        53
                    ],
                    "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    95,
                    27
                ],
                "name": "searchpath",
                "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                104,
                                30
                            ],
                            "name": "module",
                            "start": [
                                104,
                                24
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "finish": [
                        104,
                        35
                    ],
                    "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    104,
                    23
                ],
                "name": "seeall",
                "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "packagelib",
        "type": "type",
        "view": "packagelib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                210,
                                16
                            ],
                            "name": "t",
                            "start": [
                                210,
                                15
                            ],
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "finish": [
                        210,
                        21
                    ],
                    "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": [
                        210,
                        0
                    ],
                    "type": "function",
                    "view": "function pairs(t: <T:table>)\n  -> fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>\n  2. <T:table>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    210,
                    14
                ],
                "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                "start": [
                    210,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pairs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        11
                    ],
                    "start": [
                        3,
                        9
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    3,
                    6
                ],
                "start": [
                    3,
                    0
                ],
                "type": "setglobal",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table cell content is centered.\n",
                "extends": {
                    "finish": [
                        30,
                        34
                    ],
                    "start": [
                        30,
                        21
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    30,
                    18
                ],
                "name": "AlignCenter",
                "rawdesc": "Table cell content is centered.\n",
                "start": [
                    30,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.AlignCenter",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table cells are alignment is unaltered.\n",
                "extends": {
                    "finish": [
                        35,
                        36
                    ],
                    "start": [
                        35,
                        22
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    35,
                    19
                ],
                "name": "AlignDefault",
                "rawdesc": "Table cells are alignment is unaltered.\n",
                "start": [
                    35,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.AlignDefault",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table cells aligned left.\n",
                "extends": {
                    "finish": [
                        20,
                        30
                    ],
                    "start": [
                        20,
                        19
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    20,
                    16
                ],
                "name": "AlignLeft",
                "rawdesc": "Table cells aligned left.\n",
                "start": [
                    20,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.AlignLeft",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table cells right-aligned.\n",
                "extends": {
                    "finish": [
                        25,
                        32
                    ],
                    "start": [
                        25,
                        20
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    25,
                    17
                ],
                "name": "AlignRight",
                "rawdesc": "Table cells right-aligned.\n",
                "start": [
                    25,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.AlignRight",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        24,
                        16
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        24,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    24,
                    11
                ],
                "name": "Attr",
                "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "start": [
                    24,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new set of attributes (`Attr`).\n\n\n@*param* `identifier` — Element identifier\n\n@*param* `classes` — Element classes\n\n@*param* `attributes` — Table containing string keys and values",
                "extends": {
                    "args": [
                        {
                            "desc": "Element identifier",
                            "finish": [
                                33,
                                31
                            ],
                            "name": "identifier",
                            "rawdesc": "Element identifier",
                            "start": [
                                33,
                                21
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "Element classes",
                            "finish": [
                                33,
                                40
                            ],
                            "name": "classes",
                            "rawdesc": "Element classes",
                            "start": [
                                33,
                                33
                            ],
                            "type": "local",
                            "view": "table?"
                        },
                        {
                            "desc": "Table containing string keys and values",
                            "finish": [
                                33,
                                52
                            ],
                            "name": "attributes",
                            "rawdesc": "Table containing string keys and values",
                            "start": [
                                33,
                                42
                            ],
                            "type": "local",
                            "view": "table<string, string>?"
                        }
                    ],
                    "desc": "Create a new set of attributes (`Attr`).\n\n\n@*param* `identifier` — Element identifier\n\n@*param* `classes` — Element classes\n\n@*param* `attributes` — Table containing string keys and values",
                    "finish": [
                        33,
                        57
                    ],
                    "rawdesc": "Create a new set of attributes (`Attr`).\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "start": [
                        33,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Attr(identifier?: string, classes?: table, attributes?: table<string, string>)\n  -> pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    33,
                    20
                ],
                "name": "Attr",
                "rawdesc": "Create a new set of attributes (`Attr`).\n",
                "start": [
                    33,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Attr",
                "visible": "public"
            }
        ],
        "name": "pandoc.Attr",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "file": "pandoc/components.lua",
                "finish": [
                    20,
                    21
                ],
                "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "start": [
                    20,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Attr",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Collection of key/value pairs",
                "extends": {
                    "finish": [
                        23,
                        41
                    ],
                    "start": [
                        23,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                23,
                                41
                            ],
                            "start": [
                                23,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    23,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Collection of key/value pairs",
                "start": [
                    23,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Element classes",
                "extends": {
                    "finish": [
                        22,
                        29
                    ],
                    "start": [
                        22,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                22,
                                29
                            ],
                            "start": [
                                22,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    22,
                    29
                ],
                "name": "classes",
                "rawdesc": "Element classes",
                "start": [
                    22,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                39,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                39,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        39,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Attr:clone()\n  -> pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    39,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    39,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Element identifier",
                "extends": {
                    "finish": [
                        21,
                        27
                    ],
                    "start": [
                        21,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                21,
                                27
                            ],
                            "start": [
                                21,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    21,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Element identifier",
                "start": [
                    21,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Attr",
        "type": "type",
        "view": "pandoc.Attr"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                39,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                39,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        39,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Attr:clone()\n  -> pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    39,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    39,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Attr.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Author name is mentioned in the text.  \n",
                "extends": {
                    "finish": [
                        5,
                        36
                    ],
                    "start": [
                        5,
                        22
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    5,
                    19
                ],
                "name": "AuthorInText",
                "rawdesc": "Author name is mentioned in the text.  \n",
                "start": [
                    5,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.AuthorInText",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Block element\n",
                "extends": [
                    {
                        "finish": [
                            7,
                            30
                        ],
                        "start": [
                            7,
                            25
                        ],
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    7,
                    30
                ],
                "rawdesc": "Block element\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Block",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "pandoc.Block",
        "type": "type",
        "view": "pandoc.Block"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                13,
                                8
                            ],
                            "name": "self",
                            "start": [
                                13,
                                8
                            ],
                            "type": "self",
                            "view": "unknown"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        13,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Block"
                        }
                    ],
                    "start": [
                        13,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Block:clone()\n  -> pandoc.Block"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    13,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    13,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Block.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                8
                            ],
                            "name": "self",
                            "start": [
                                20,
                                8
                            ],
                            "type": "self",
                            "view": "unknown"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                20,
                                37
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        20,
                        42
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Block"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Block:walk(lua_filter: table<string, function>)\n  -> pandoc.Block"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    20,
                    26
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    20,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Block.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A block quote element\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            46,
                            42
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            46,
                            30
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    46,
                    42
                ],
                "rawdesc": "A block quote element\n",
                "start": [
                    46,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.BlockQuote",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A block quote element\n",
                            "finish": [
                                63,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A block quote element\n",
                            "start": [
                                63,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        63,
                        38
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BlockQuote:clone()\n  -> pandoc.BlockQuote"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    63,
                    32
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    63,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        47,
                        29
                    ],
                    "start": [
                        47,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                47,
                                29
                            ],
                            "start": [
                                47,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    47,
                    29
                ],
                "name": "content",
                "start": [
                    47,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        48,
                        24
                    ],
                    "start": [
                        48,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                48,
                                24
                            ],
                            "start": [
                                48,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"BlockQuote\""
                        }
                    ],
                    "view": "\"BlockQuote\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    48,
                    24
                ],
                "name": "t",
                "start": [
                    48,
                    10
                ],
                "type": "doc.field",
                "view": "\"BlockQuote\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        49,
                        26
                    ],
                    "start": [
                        49,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                49,
                                26
                            ],
                            "start": [
                                49,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"BlockQuote\""
                        }
                    ],
                    "view": "\"BlockQuote\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    49,
                    26
                ],
                "name": "tag",
                "start": [
                    49,
                    10
                ],
                "type": "doc.field",
                "view": "\"BlockQuote\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A block quote element\n",
                            "finish": [
                                70,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A block quote element\n",
                            "start": [
                                70,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BlockQuote"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                70,
                                42
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                70,
                                32
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        70,
                        47
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "start": [
                        70,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BlockQuote:walk(lua_filter: table<string, function>)\n  -> pandoc.BlockQuote"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    70,
                    31
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    70,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.BlockQuote",
        "type": "type",
        "view": "pandoc.BlockQuote"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A block quote element\n",
                "extends": {
                    "desc": "A block quote element\n",
                    "finish": [
                        50,
                        22
                    ],
                    "rawdesc": "A block quote element\n",
                    "start": [
                        50,
                        20
                    ],
                    "type": "table",
                    "view": "pandoc.BlockQuote"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    50,
                    17
                ],
                "name": "BlockQuote",
                "rawdesc": "A block quote element\n",
                "start": [
                    50,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.BlockQuote",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a block quote element\n\n\n@*param* `content` — Block or list of blocks",
                "extends": {
                    "args": [
                        {
                            "desc": "Block or list of blocks",
                            "finish": [
                                57,
                                34
                            ],
                            "name": "content",
                            "rawdesc": "Block or list of blocks",
                            "start": [
                                57,
                                27
                            ],
                            "type": "local",
                            "view": "string|pandoc.Block|pandoc.Inline|pandoc.List"
                        }
                    ],
                    "desc": "Creates a block quote element\n\n\n@*param* `content` — Block or list of blocks",
                    "finish": [
                        57,
                        39
                    ],
                    "rawdesc": "Creates a block quote element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.BlockQuote(content: string|pandoc.Block|pandoc.Inline|pandoc.List)\n  -> pandoc.BlockQuote"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    57,
                    26
                ],
                "name": "BlockQuote",
                "rawdesc": "Creates a block quote element\n",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.BlockQuote",
                "visible": "public"
            }
        ],
        "name": "pandoc.BlockQuote",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A block quote element\n",
                            "finish": [
                                63,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A block quote element\n",
                            "start": [
                                63,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        63,
                        38
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BlockQuote:clone()\n  -> pandoc.BlockQuote"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    63,
                    32
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    63,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.BlockQuote.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A block quote element\n",
                            "finish": [
                                70,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A block quote element\n",
                            "start": [
                                70,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BlockQuote"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                70,
                                42
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                70,
                                32
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        70,
                        47
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BlockQuote"
                        }
                    ],
                    "start": [
                        70,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BlockQuote:walk(lua_filter: table<string, function>)\n  -> pandoc.BlockQuote"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    70,
                    31
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    70,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.BlockQuote.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "extends": [
                    {
                        "finish": [
                            28,
                            37
                        ],
                        "start": [
                            28,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.List"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    28,
                    37
                ],
                "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "start": [
                    28,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Blocks",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                8
                            ],
                            "name": "self",
                            "start": [
                                36,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Element position",
                            "finish": [
                                36,
                                29
                            ],
                            "name": "index",
                            "rawdesc": "Element position",
                            "start": [
                                36,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "The default value that is returned if the index is out of range",
                            "finish": [
                                36,
                                38
                            ],
                            "name": "default",
                            "rawdesc": "The default value that is returned if the index is out of range",
                            "start": [
                                36,
                                31
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                    "finish": [
                        36,
                        43
                    ],
                    "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:at(index: integer, default?: any)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    36,
                    23
                ],
                "name": "at",
                "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                8
                            ],
                            "name": "self",
                            "start": [
                                42,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "finish": [
                        42,
                        32
                    ],
                    "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:clone()\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    42,
                    26
                ],
                "name": "clone",
                "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "start": [
                    42,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                8
                            ],
                            "name": "self",
                            "start": [
                                49,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "List to append",
                            "finish": [
                                49,
                                32
                            ],
                            "name": "list",
                            "rawdesc": "List to append",
                            "start": [
                                49,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                    "finish": [
                        49,
                        37
                    ],
                    "rawdesc": "Adds the given list to the end of this list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:extend(list: pandoc.List)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    49,
                    27
                ],
                "name": "extend",
                "rawdesc": "Adds the given list to the end of this list.\n",
                "start": [
                    49,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                8
                            ],
                            "name": "self",
                            "start": [
                                74,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                74,
                                32
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                74,
                                28
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        }
                    ],
                    "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                    "finish": [
                        74,
                        37
                    ],
                    "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:filter(pred: fun(x: any):boolean)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    74,
                    27
                ],
                "name": "filter",
                "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                "start": [
                    74,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                8
                            ],
                            "name": "self",
                            "start": [
                                57,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                57,
                                32
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                57,
                                26
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                57,
                                38
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                57,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                    "finish": [
                        57,
                        43
                    ],
                    "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                    "returns": [
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find(needle: any, init?: integer)\n  -> any\n  2. integer"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    57,
                    25
                ],
                "name": "find",
                "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                "start": [
                    57,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                66,
                                8
                            ],
                            "name": "self",
                            "start": [
                                66,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                66,
                                33
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                66,
                                29
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                66,
                                39
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                66,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                    "finish": [
                        66,
                        44
                    ],
                    "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                    "returns": [
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer|nil"
                        }
                    ],
                    "start": [
                        66,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find_if(pred: fun(x: any):boolean, init?: integer)\n  -> any\n  2. integer|nil"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    66,
                    28
                ],
                "name": "find_if",
                "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                "start": [
                    66,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                8
                            ],
                            "name": "self",
                            "start": [
                                84,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                84,
                                36
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                84,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                84,
                                42
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                84,
                                38
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                    "finish": [
                        84,
                        47
                    ],
                    "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                    "returns": [
                        {
                            "desc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "rawdesc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:includes(needle: any, init?: integer)\n  -> boolean"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    84,
                    29
                ],
                "name": "includes",
                "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                "start": [
                    84,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                8
                            ],
                            "name": "self",
                            "start": [
                                93,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                93,
                                33
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                93,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        93,
                        38
                    ],
                    "rawdesc": "Inserts element at end of list\n",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    93,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element at end of list\n",
                "start": [
                    93,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                101,
                                8
                            ],
                            "name": "self",
                            "start": [
                                101,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Index of the new value",
                            "finish": [
                                101,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Index of the new value",
                            "start": [
                                101,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                101,
                                38
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                101,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        101,
                        43
                    ],
                    "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(pos: integer, value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    101,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                "start": [
                    101,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                8
                            ],
                            "name": "self",
                            "start": [
                                115,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "finish": [
                                115,
                                30
                            ],
                            "name": "step",
                            "rawdesc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "start": [
                                115,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                    "finish": [
                        115,
                        35
                    ],
                    "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                    "returns": [
                        {
                            "desc": "Iterator function",
                            "rawdesc": "Iterator function",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:iter(step?: integer)\n  -> function"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    115,
                    25
                ],
                "name": "iter",
                "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                "start": [
                    115,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                122,
                                8
                            ],
                            "name": "self",
                            "start": [
                                122,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Function which is applied to all list items.",
                            "finish": [
                                122,
                                27
                            ],
                            "name": "fn",
                            "rawdesc": "Function which is applied to all list items.",
                            "start": [
                                122,
                                25
                            ],
                            "type": "local",
                            "view": "fun(x: any):any"
                        }
                    ],
                    "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                    "finish": [
                        122,
                        32
                    ],
                    "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        122,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:map(fn: fun(x: any):any)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    122,
                    24
                ],
                "name": "map",
                "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                "start": [
                    122,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                25,
                                8
                            ],
                            "name": "self",
                            "start": [
                                25,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "(Optional) `table` to initialize list from",
                            "finish": [
                                25,
                                30
                            ],
                            "name": "table",
                            "rawdesc": "(Optional) `table` to initialize list from",
                            "start": [
                                25,
                                25
                            ],
                            "type": "local",
                            "view": "(function|table)?"
                        }
                    ],
                    "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                    "finish": [
                        25,
                        35
                    ],
                    "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:new(table?: function|table)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    25,
                    24
                ],
                "name": "new",
                "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                "start": [
                    25,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                129,
                                8
                            ],
                            "name": "self",
                            "start": [
                                129,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "finish": [
                                129,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "start": [
                                129,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                    "finish": [
                        129,
                        36
                    ],
                    "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                    "returns": [
                        {
                            "desc": "The removed element",
                            "rawdesc": "The removed element",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        129,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:remove(pos?: integer)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    129,
                    27
                ],
                "name": "remove",
                "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                "start": [
                    129,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                144,
                                8
                            ],
                            "name": "self",
                            "start": [
                                144,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "finish": [
                                144,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                144,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: any, b: any):boolean)?"
                        }
                    ],
                    "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "finish": [
                        144,
                        35
                    ],
                    "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "start": [
                        144,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:sort(comp?: fun(a: any, b: any):boolean)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    144,
                    25
                ],
                "name": "sort",
                "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "start": [
                    144,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                8
                            ],
                            "name": "self",
                            "start": [
                                164,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                164,
                                36
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                164,
                                26
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                    "finish": [
                        164,
                        41
                    ],
                    "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                    "returns": [
                        {
                            "desc": "Filtered list",
                            "rawdesc": "Filtered list",
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:walk(lua_filter: table<string, function>)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    164,
                    25
                ],
                "name": "walk",
                "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                "start": [
                    164,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Blocks",
        "type": "type",
        "view": "pandoc.Blocks"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "extends": {
                    "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        29,
                        18
                    ],
                    "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        29,
                        16
                    ],
                    "type": "table",
                    "view": "pandoc.Blocks"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    29,
                    13
                ],
                "name": "Blocks",
                "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "start": [
                    29,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Blocks",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a blocks list \n\n\n@*param* `blocks` — Block or list of blocks",
                "extends": {
                    "args": [
                        {
                            "desc": "Block or list of blocks",
                            "finish": [
                                36,
                                29
                            ],
                            "name": "blocks",
                            "rawdesc": "Block or list of blocks",
                            "start": [
                                36,
                                23
                            ],
                            "type": "local",
                            "view": "pandoc.Block|pandoc.List"
                        }
                    ],
                    "desc": "Create a blocks list \n\n\n@*param* `blocks` — Block or list of blocks",
                    "finish": [
                        36,
                        34
                    ],
                    "rawdesc": "Create a blocks list \n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Blocks(blocks: pandoc.Block|pandoc.List)\n  -> pandoc.Blocks"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    36,
                    22
                ],
                "name": "Blocks",
                "rawdesc": "Create a blocks list \n",
                "start": [
                    36,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Blocks",
                "visible": "public"
            }
        ],
        "name": "pandoc.Blocks",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A bullet list \n",
                "extends": {
                    "desc": "A bullet list \n",
                    "finish": [
                        81,
                        22
                    ],
                    "rawdesc": "A bullet list \n",
                    "start": [
                        81,
                        20
                    ],
                    "type": "table",
                    "view": "pandoc.BulletList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    81,
                    17
                ],
                "name": "BulletList",
                "rawdesc": "A bullet list \n",
                "start": [
                    81,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.BulletList",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a bullet list element\n\n\n@*param* `content` — Bullet list items (block or list of blocks)",
                "extends": {
                    "args": [
                        {
                            "desc": "Bullet list items (block or list of blocks)",
                            "finish": [
                                88,
                                34
                            ],
                            "name": "content",
                            "rawdesc": "Bullet list items (block or list of blocks)",
                            "start": [
                                88,
                                27
                            ],
                            "type": "local",
                            "view": "string|pandoc.Block|pandoc.Inline|pandoc.List"
                        }
                    ],
                    "desc": "Creates a bullet list element\n\n\n@*param* `content` — Bullet list items (block or list of blocks)",
                    "finish": [
                        88,
                        39
                    ],
                    "rawdesc": "Creates a bullet list element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "start": [
                        88,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.BulletList(content: string|pandoc.Block|pandoc.Inline|pandoc.List)\n  -> pandoc.BulletList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    88,
                    26
                ],
                "name": "BulletList",
                "rawdesc": "Creates a bullet list element\n",
                "start": [
                    88,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.BulletList",
                "visible": "public"
            }
        ],
        "name": "pandoc.BulletList",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A bullet list \n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            77,
                            42
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            77,
                            30
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    77,
                    42
                ],
                "rawdesc": "A bullet list \n",
                "start": [
                    77,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.BulletList",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A bullet list \n",
                            "finish": [
                                94,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A bullet list \n",
                            "start": [
                                94,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        94,
                        38
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "start": [
                        94,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BulletList:clone()\n  -> pandoc.BulletList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    94,
                    32
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    94,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Bullet list items",
                "extends": {
                    "finish": [
                        78,
                        29
                    ],
                    "start": [
                        78,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                78,
                                29
                            ],
                            "start": [
                                78,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    78,
                    29
                ],
                "name": "content",
                "rawdesc": "Bullet list items",
                "start": [
                    78,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        79,
                        24
                    ],
                    "start": [
                        79,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "start": [
                                79,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"BulletList\""
                        }
                    ],
                    "view": "\"BulletList\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    79,
                    24
                ],
                "name": "t",
                "start": [
                    79,
                    10
                ],
                "type": "doc.field",
                "view": "\"BulletList\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        80,
                        26
                    ],
                    "start": [
                        80,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                80,
                                26
                            ],
                            "start": [
                                80,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"BulletList\""
                        }
                    ],
                    "view": "\"BulletList\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    80,
                    26
                ],
                "name": "tag",
                "start": [
                    80,
                    10
                ],
                "type": "doc.field",
                "view": "\"BulletList\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A bullet list \n",
                            "finish": [
                                101,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A bullet list \n",
                            "start": [
                                101,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BulletList"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                101,
                                42
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                101,
                                32
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        101,
                        47
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BulletList:walk(lua_filter: table<string, function>)\n  -> pandoc.BulletList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    101,
                    31
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    101,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.BulletList",
        "type": "type",
        "view": "pandoc.BulletList"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A bullet list \n",
                            "finish": [
                                94,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A bullet list \n",
                            "start": [
                                94,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        94,
                        38
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "start": [
                        94,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BulletList:clone()\n  -> pandoc.BulletList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    94,
                    32
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    94,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.BulletList.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A bullet list \n",
                            "finish": [
                                101,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A bullet list \n",
                            "start": [
                                101,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.BulletList"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                101,
                                42
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                101,
                                32
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        101,
                        47
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.BulletList"
                        }
                    ],
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.BulletList:walk(lua_filter: table<string, function>)\n  -> pandoc.BulletList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    101,
                    31
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    101,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.BulletList.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The caption of a table, with an optional short caption.\n",
                "extends": {
                    "desc": "The caption of a table, with an optional short caption.\n",
                    "finish": [
                        48,
                        19
                    ],
                    "rawdesc": "The caption of a table, with an optional short caption.\n",
                    "start": [
                        48,
                        17
                    ],
                    "type": "table",
                    "view": "pandoc.Caption"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    48,
                    14
                ],
                "name": "Caption",
                "rawdesc": "The caption of a table, with an optional short caption.\n",
                "start": [
                    48,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Caption",
                "visible": "public"
            }
        ],
        "name": "pandoc.Caption",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The caption of a table, with an optional short caption.\n",
                "file": "pandoc/components.lua",
                "finish": [
                    45,
                    24
                ],
                "rawdesc": "The caption of a table, with an optional short caption.\n",
                "start": [
                    45,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Caption",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "The caption of a table, with an optional short caption.\n",
                            "finish": [
                                54,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "The caption of a table, with an optional short caption.\n",
                            "start": [
                                54,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Caption"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        54,
                        35
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Caption"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Caption:clone()\n  -> pandoc.Caption"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    54,
                    29
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    54,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Long caption (List of blocks)",
                "extends": {
                    "finish": [
                        46,
                        26
                    ],
                    "start": [
                        46,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                46,
                                26
                            ],
                            "start": [
                                46,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    46,
                    26
                ],
                "name": "long",
                "rawdesc": "Long caption (List of blocks)",
                "start": [
                    46,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Short caption (List of inlines)",
                "extends": {
                    "finish": [
                        47,
                        27
                    ],
                    "start": [
                        47,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                47,
                                27
                            ],
                            "start": [
                                47,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    47,
                    27
                ],
                "name": "short",
                "rawdesc": "Short caption (List of inlines)",
                "start": [
                    47,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            }
        ],
        "name": "pandoc.Caption",
        "type": "type",
        "view": "pandoc.Caption"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "The caption of a table, with an optional short caption.\n",
                            "finish": [
                                54,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "The caption of a table, with an optional short caption.\n",
                            "start": [
                                54,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Caption"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        54,
                        35
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Caption"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Caption:clone()\n  -> pandoc.Caption"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    54,
                    29
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    54,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Caption.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table cell.\n",
                "file": "pandoc/components.lua",
                "finish": [
                    60,
                    21
                ],
                "rawdesc": "A table cell.\n",
                "start": [
                    60,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Cell",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Individual cell alignment",
                "extends": {
                    "finish": [
                        65,
                        35
                    ],
                    "start": [
                        65,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                65,
                                35
                            ],
                            "start": [
                                65,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "'AlightRight'|'AlignCenter'|'AlignDefault'|'AlignLeft'"
                        }
                    ],
                    "view": "'AlightRight'|'AlignCenter'|'AlignDefault'|'AlignLeft'"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    65,
                    35
                ],
                "name": "alignment",
                "rawdesc": "Individual cell alignment",
                "start": [
                    65,
                    10
                ],
                "type": "doc.field",
                "view": "'AlightRight'|'AlignCenter'|'AlignDefault'|'AlignLeft'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Cell attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        61,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        61,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                61,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                61,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    61,
                    26
                ],
                "name": "attr",
                "rawdesc": "Cell attributes",
                "start": [
                    61,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        64,
                        41
                    ],
                    "start": [
                        64,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                64,
                                41
                            ],
                            "start": [
                                64,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    64,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    64,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        63,
                        29
                    ],
                    "start": [
                        63,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                63,
                                29
                            ],
                            "start": [
                                63,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    63,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    63,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table cell.\n",
                            "finish": [
                                86,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table cell.\n",
                            "start": [
                                86,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Cell"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        86,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Cell"
                        }
                    ],
                    "start": [
                        86,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Cell:clone()\n  -> pandoc.Cell"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    86,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    86,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number of columns spanned by the cell",
                "extends": {
                    "finish": [
                        68,
                        26
                    ],
                    "start": [
                        68,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                68,
                                26
                            ],
                            "start": [
                                68,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    68,
                    26
                ],
                "name": "col_span",
                "rawdesc": "Number of columns spanned by the cell",
                "start": [
                    68,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Cell contents (list of blocks)",
                "extends": {
                    "finish": [
                        66,
                        30
                    ],
                    "start": [
                        66,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                66,
                                30
                            ],
                            "start": [
                                66,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    66,
                    30
                ],
                "name": "contents",
                "rawdesc": "Cell contents (list of blocks)",
                "start": [
                    66,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        62,
                        27
                    ],
                    "start": [
                        62,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                62,
                                27
                            ],
                            "start": [
                                62,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    62,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    62,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number of rows occupied by the call",
                "extends": {
                    "finish": [
                        67,
                        26
                    ],
                    "start": [
                        67,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                26
                            ],
                            "start": [
                                67,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    67,
                    26
                ],
                "name": "row_span",
                "rawdesc": "Number of rows occupied by the call",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            }
        ],
        "name": "pandoc.Cell",
        "type": "type",
        "view": "pandoc.Cell"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table cell.\n",
                "extends": {
                    "desc": "A table cell.\n",
                    "finish": [
                        69,
                        16
                    ],
                    "rawdesc": "A table cell.\n",
                    "start": [
                        69,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Cell"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    69,
                    11
                ],
                "name": "Cell",
                "rawdesc": "A table cell.\n",
                "start": [
                    69,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Cell",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new table cell\n\n\n@*param* `blocks` — Cell contents (list of blocks)\n\n@*param* `align` — Text alignment (defaults to 'AlignDefault')\n\n@*param* `rowspan` — Number of rows occupied by the call; defaults to 1\n\n@*param* `colspan` — Number of columns spanned by the cell; defaults to 1\n\n@*param* `attr` — Cell attributes\n\n```lua\nalign:\n    | 'AlignDefault'\n    | 'AlignLeft'\n    | 'AlignCenter'\n    | 'AlightRight'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Cell contents (list of blocks)",
                            "finish": [
                                80,
                                27
                            ],
                            "name": "blocks",
                            "rawdesc": "Cell contents (list of blocks)",
                            "start": [
                                80,
                                21
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Text alignment (defaults to 'AlignDefault')",
                            "finish": [
                                80,
                                34
                            ],
                            "name": "align",
                            "rawdesc": "Text alignment (defaults to 'AlignDefault')",
                            "start": [
                                80,
                                29
                            ],
                            "type": "local",
                            "view": "('AlightRight'|'AlignCenter'|'AlignDefault'|'AlignLeft')?"
                        },
                        {
                            "desc": "Number of rows occupied by the call; defaults to 1",
                            "finish": [
                                80,
                                43
                            ],
                            "name": "rowspan",
                            "rawdesc": "Number of rows occupied by the call; defaults to 1",
                            "start": [
                                80,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "Number of columns spanned by the cell; defaults to 1",
                            "finish": [
                                80,
                                52
                            ],
                            "name": "colspan",
                            "rawdesc": "Number of columns spanned by the cell; defaults to 1",
                            "start": [
                                80,
                                45
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "Cell attributes",
                            "finish": [
                                80,
                                58
                            ],
                            "name": "attr",
                            "rawdesc": "Cell attributes",
                            "start": [
                                80,
                                54
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Create a new table cell\n\n\n@*param* `blocks` — Cell contents (list of blocks)\n\n@*param* `align` — Text alignment (defaults to 'AlignDefault')\n\n@*param* `rowspan` — Number of rows occupied by the call; defaults to 1\n\n@*param* `colspan` — Number of columns spanned by the cell; defaults to 1\n\n@*param* `attr` — Cell attributes\n\n```lua\nalign:\n    | 'AlignDefault'\n    | 'AlignLeft'\n    | 'AlignCenter'\n    | 'AlightRight'\n```",
                    "finish": [
                        80,
                        63
                    ],
                    "rawdesc": "Create a new table cell\n\n\n```lua\nalign:\n    | 'AlignDefault'\n    | 'AlignLeft'\n    | 'AlignCenter'\n    | 'AlightRight'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Cell"
                        }
                    ],
                    "start": [
                        80,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Cell(blocks: pandoc.List, align?: 'AlightRight'|'AlignCenter'|'AlignDefault'|'AlignLeft', rowspan?: integer, colspan?: integer, attr?: pandoc.Attr)\n  -> pandoc.Cell"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    80,
                    20
                ],
                "name": "Cell",
                "rawdesc": "Create a new table cell\n\n\n```lua\nalign:\n    | 'AlignDefault'\n    | 'AlignLeft'\n    | 'AlignCenter'\n    | 'AlightRight'\n```",
                "start": [
                    80,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Cell",
                "visible": "public"
            }
        ],
        "name": "pandoc.Cell",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table cell.\n",
                            "finish": [
                                86,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table cell.\n",
                            "start": [
                                86,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Cell"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        86,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Cell"
                        }
                    ],
                    "start": [
                        86,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Cell:clone()\n  -> pandoc.Cell"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    86,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    86,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Cell.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                "file": "pandoc/structure.lua",
                "finish": [
                    97,
                    22
                ],
                "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                "start": [
                    97,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Chunk",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "the chunk's block contents",
                "extends": {
                    "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        108,
                        32
                    ],
                    "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        108,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                108,
                                32
                            ],
                            "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                108,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "view": "pandoc.Blocks"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    108,
                    32
                ],
                "name": "contents",
                "rawdesc": "the chunk's block contents",
                "start": [
                    108,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Blocks",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "heading text",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        98,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        98,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                98,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                98,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    98,
                    32
                ],
                "name": "heading",
                "rawdesc": "heading text",
                "start": [
                    98,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "identifier",
                "extends": {
                    "finish": [
                        99,
                        19
                    ],
                    "start": [
                        99,
                        13
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                99,
                                19
                            ],
                            "start": [
                                99,
                                13
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    99,
                    19
                ],
                "name": "id",
                "rawdesc": "identifier",
                "start": [
                    99,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "level of topmost heading in chunk",
                "extends": {
                    "finish": [
                        100,
                        23
                    ],
                    "start": [
                        100,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                100,
                                23
                            ],
                            "start": [
                                100,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    100,
                    23
                ],
                "name": "level",
                "rawdesc": "level of topmost heading in chunk",
                "start": [
                    100,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "link to the next section, if any",
                "extends": {
                    "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "finish": [
                        106,
                        31
                    ],
                    "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "start": [
                        106,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                            "finish": [
                                106,
                                27
                            ],
                            "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                            "start": [
                                106,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Chunk"
                        },
                        {
                            "finish": [
                                106,
                                31
                            ],
                            "start": [
                                106,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "pandoc.Chunk|nil"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    106,
                    31
                ],
                "name": "next",
                "rawdesc": "link to the next section, if any",
                "start": [
                    106,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Chunk|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "chunk number",
                "extends": {
                    "finish": [
                        101,
                        24
                    ],
                    "start": [
                        101,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                101,
                                24
                            ],
                            "start": [
                                101,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    101,
                    24
                ],
                "name": "number",
                "rawdesc": "chunk number",
                "start": [
                    101,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "target filepath for this chunk",
                "extends": {
                    "finish": [
                        103,
                        21
                    ],
                    "start": [
                        103,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                103,
                                21
                            ],
                            "start": [
                                103,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    103,
                    21
                ],
                "name": "path",
                "rawdesc": "target filepath for this chunk",
                "start": [
                    103,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "link to the previous section, if any",
                "extends": {
                    "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "finish": [
                        105,
                        31
                    ],
                    "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "start": [
                        105,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                            "finish": [
                                105,
                                27
                            ],
                            "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                            "start": [
                                105,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Chunk"
                        },
                        {
                            "finish": [
                                105,
                                31
                            ],
                            "start": [
                                105,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "pandoc.Chunk|nil"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    105,
                    31
                ],
                "name": "prev",
                "rawdesc": "link to the previous section, if any",
                "start": [
                    105,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Chunk|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "hierarchical section number",
                "extends": {
                    "finish": [
                        102,
                        31
                    ],
                    "start": [
                        102,
                        25
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                102,
                                31
                            ],
                            "start": [
                                102,
                                25
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    102,
                    31
                ],
                "name": "section_number",
                "rawdesc": "hierarchical section number",
                "start": [
                    102,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "whether the section in this chunk should be listed in the TOC even if the chunk has no section number.",
                "extends": {
                    "finish": [
                        107,
                        26
                    ],
                    "start": [
                        107,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                107,
                                26
                            ],
                            "start": [
                                107,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    107,
                    26
                ],
                "name": "unlisted",
                "rawdesc": "whether the section in this chunk should be listed in the TOC even if the chunk has no section number.",
                "start": [
                    107,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "link to the enclosing section, if any",
                "extends": {
                    "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "finish": [
                        104,
                        29
                    ],
                    "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "start": [
                        104,
                        13
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                            "finish": [
                                104,
                                25
                            ],
                            "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                            "start": [
                                104,
                                13
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Chunk"
                        },
                        {
                            "finish": [
                                104,
                                29
                            ],
                            "start": [
                                104,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "pandoc.Chunk|nil"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    104,
                    29
                ],
                "name": "up",
                "rawdesc": "link to the enclosing section, if any",
                "start": [
                    104,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Chunk|nil",
                "visible": "public"
            }
        ],
        "name": "pandoc.Chunk",
        "type": "type",
        "view": "pandoc.Chunk"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                "extends": {
                    "desc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "finish": [
                        109,
                        17
                    ],
                    "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                    "start": [
                        109,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.Chunk"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    109,
                    12
                ],
                "name": "Chunk",
                "rawdesc": "Part of a document; usually chunks are each written to a separate\nfile.\n",
                "start": [
                    109,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Chunk",
                "visible": "public"
            }
        ],
        "name": "pandoc.Chunk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A Pandoc document divided into `Chunk`s.\n\nThe table of contents info in field `toc` is rose-tree structure\nrepresented as a list. The node item is always placed at index\n`0`; subentries make up the rest of the list. Each node item\ncontains the fields `title` ([Inlines][]), `number` (string|nil),\n`id` (string), `path` (string), and `level` (integer).  \n",
                "file": "pandoc/structure.lua",
                "finish": [
                    120,
                    27
                ],
                "rawdesc": "A Pandoc document divided into `Chunk`s.\n\nThe table of contents info in field `toc` is rose-tree structure\nrepresented as a list. The node item is always placed at index\n`0`; subentries make up the rest of the list. Each node item\ncontains the fields `title` ([Inlines][]), `number` (string|nil),\n`id` (string), `path` (string), and `level` (integer).  \n",
                "start": [
                    120,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.ChunkedDoc",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "list of chunks that make up the document",
                "extends": {
                    "finish": [
                        121,
                        31
                    ],
                    "start": [
                        121,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                121,
                                31
                            ],
                            "start": [
                                121,
                                17
                            ],
                            "type": "doc.type.array",
                            "view": "pandoc.Chunk[]"
                        }
                    ],
                    "view": "pandoc.Chunk[]"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    121,
                    31
                ],
                "name": "chunks",
                "rawdesc": "list of chunks that make up the document",
                "start": [
                    121,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Chunk[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "the document's metadata",
                "extends": {
                    "desc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                    "finish": [
                        122,
                        26
                    ],
                    "rawdesc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                    "start": [
                        122,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                            "finish": [
                                122,
                                26
                            ],
                            "rawdesc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                            "start": [
                                122,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        }
                    ],
                    "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    122,
                    26
                ],
                "name": "meta",
                "rawdesc": "the document's metadata",
                "start": [
                    122,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "table of contents information",
                "extends": {
                    "finish": [
                        123,
                        19
                    ],
                    "start": [
                        123,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                123,
                                19
                            ],
                            "start": [
                                123,
                                14
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    123,
                    19
                ],
                "name": "toc",
                "rawdesc": "table of contents information",
                "start": [
                    123,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "pandoc.ChunkedDoc",
        "type": "type",
        "view": "pandoc.ChunkedDoc"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A Pandoc document divided into `Chunk`s.\n\nThe table of contents info in field `toc` is rose-tree structure\nrepresented as a list. The node item is always placed at index\n`0`; subentries make up the rest of the list. Each node item\ncontains the fields `title` ([Inlines][]), `number` (string|nil),\n`id` (string), `path` (string), and `level` (integer).  \n",
                "extends": {
                    "desc": "A Pandoc document divided into `Chunk`s.\n\nThe table of contents info in field `toc` is rose-tree structure\nrepresented as a list. The node item is always placed at index\n`0`; subentries make up the rest of the list. Each node item\ncontains the fields `title` ([Inlines][]), `number` (string|nil),\n`id` (string), `path` (string), and `level` (integer).  \n",
                    "finish": [
                        124,
                        22
                    ],
                    "rawdesc": "A Pandoc document divided into `Chunk`s.\n\nThe table of contents info in field `toc` is rose-tree structure\nrepresented as a list. The node item is always placed at index\n`0`; subentries make up the rest of the list. Each node item\ncontains the fields `title` ([Inlines][]), `number` (string|nil),\n`id` (string), `path` (string), and `level` (integer).  \n",
                    "start": [
                        124,
                        20
                    ],
                    "type": "table",
                    "view": "pandoc.ChunkedDoc"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    124,
                    17
                ],
                "name": "ChunkedDoc",
                "rawdesc": "A Pandoc document divided into `Chunk`s.\n\nThe table of contents info in field `toc` is rose-tree structure\nrepresented as a list. The node item is always placed at index\n`0`; subentries make up the rest of the list. Each node item\ncontains the fields `title` ([Inlines][]), `number` (string|nil),\n`id` (string), `path` (string), and `level` (integer).  \n",
                "start": [
                    124,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.ChunkedDoc",
                "visible": "public"
            }
        ],
        "name": "pandoc.ChunkedDoc",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "file": "pandoc/components.lua",
                "finish": [
                    95,
                    25
                ],
                "rawdesc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "start": [
                    95,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Citation",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                122,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                122,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Citation"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        122,
                        36
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Citation"
                        }
                    ],
                    "start": [
                        122,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Citation:clone()\n  -> pandoc.Citation"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    122,
                    30
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    122,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Hash",
                "extends": {
                    "finish": [
                        101,
                        22
                    ],
                    "start": [
                        101,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                101,
                                22
                            ],
                            "start": [
                                101,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    101,
                    22
                ],
                "name": "hash",
                "rawdesc": "Hash",
                "start": [
                    101,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation identifier, e.g., a bibtex key",
                "extends": {
                    "finish": [
                        96,
                        19
                    ],
                    "start": [
                        96,
                        13
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                96,
                                19
                            ],
                            "start": [
                                96,
                                13
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    96,
                    19
                ],
                "name": "id",
                "rawdesc": "Citation identifier, e.g., a bibtex key",
                "start": [
                    96,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation mode",
                "extends": {
                    "finish": [
                        97,
                        28
                    ],
                    "start": [
                        97,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                97,
                                28
                            ],
                            "start": [
                                97,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "'AuthorInText'|'NormalCitation'|'SuppressAuthor'"
                        }
                    ],
                    "view": "'AuthorInText'|'NormalCitation'|'SuppressAuthor'"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    97,
                    28
                ],
                "name": "mode",
                "rawdesc": "Citation mode",
                "start": [
                    97,
                    10
                ],
                "type": "doc.field",
                "view": "'AuthorInText'|'NormalCitation'|'SuppressAuthor'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Note number",
                "extends": {
                    "finish": [
                        100,
                        26
                    ],
                    "start": [
                        100,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                100,
                                26
                            ],
                            "start": [
                                100,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    100,
                    26
                ],
                "name": "note_num",
                "rawdesc": "Note number",
                "start": [
                    100,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation prefix",
                "extends": {
                    "finish": [
                        98,
                        28
                    ],
                    "start": [
                        98,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                98,
                                28
                            ],
                            "start": [
                                98,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    98,
                    28
                ],
                "name": "prefix",
                "rawdesc": "Citation prefix",
                "start": [
                    98,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation suffix",
                "extends": {
                    "finish": [
                        99,
                        28
                    ],
                    "start": [
                        99,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                99,
                                28
                            ],
                            "start": [
                                99,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    99,
                    28
                ],
                "name": "suffix",
                "rawdesc": "Citation suffix",
                "start": [
                    99,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            }
        ],
        "name": "pandoc.Citation",
        "type": "type",
        "view": "pandoc.Citation"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "extends": {
                    "desc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        102,
                        20
                    ],
                    "rawdesc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        102,
                        18
                    ],
                    "type": "table",
                    "view": "pandoc.Citation"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    102,
                    15
                ],
                "name": "Citation",
                "rawdesc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                "start": [
                    102,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Citation",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a single citation\n\n\n@*param* `id` — Citation identifier, e.g., a bibtex key\n\n@*param* `mode` — Citation mode\n\n@*param* `prefix` — Citation prefix\n\n@*param* `suffix` — Citation suffix\n\n@*param* `note_num` — Note number\n\n@*param* `hash` — Hash\n\n```lua\nmode:\n    | 'AuthorInText'\n    | 'SuppressAuthor'\n    | 'NormalCitation'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Citation identifier, e.g., a bibtex key",
                            "finish": [
                                116,
                                27
                            ],
                            "name": "id",
                            "rawdesc": "Citation identifier, e.g., a bibtex key",
                            "start": [
                                116,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Citation mode",
                            "finish": [
                                116,
                                33
                            ],
                            "name": "mode",
                            "rawdesc": "Citation mode",
                            "start": [
                                116,
                                29
                            ],
                            "type": "local",
                            "view": "'AuthorInText'|'NormalCitation'|'SuppressAuthor'"
                        },
                        {
                            "desc": "Citation prefix",
                            "finish": [
                                116,
                                41
                            ],
                            "name": "prefix",
                            "rawdesc": "Citation prefix",
                            "start": [
                                116,
                                35
                            ],
                            "type": "local",
                            "view": "(pandoc.List)?"
                        },
                        {
                            "desc": "Citation suffix",
                            "finish": [
                                116,
                                49
                            ],
                            "name": "suffix",
                            "rawdesc": "Citation suffix",
                            "start": [
                                116,
                                43
                            ],
                            "type": "local",
                            "view": "(pandoc.List)?"
                        },
                        {
                            "desc": "Note number",
                            "finish": [
                                116,
                                59
                            ],
                            "name": "note_num",
                            "rawdesc": "Note number",
                            "start": [
                                116,
                                51
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "Hash",
                            "finish": [
                                116,
                                65
                            ],
                            "name": "hash",
                            "rawdesc": "Hash",
                            "start": [
                                116,
                                61
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Creates a single citation\n\n\n@*param* `id` — Citation identifier, e.g., a bibtex key\n\n@*param* `mode` — Citation mode\n\n@*param* `prefix` — Citation prefix\n\n@*param* `suffix` — Citation suffix\n\n@*param* `note_num` — Note number\n\n@*param* `hash` — Hash\n\n```lua\nmode:\n    | 'AuthorInText'\n    | 'SuppressAuthor'\n    | 'NormalCitation'\n```",
                    "finish": [
                        116,
                        70
                    ],
                    "rawdesc": "Creates a single citation\n\n\n```lua\nmode:\n    | 'AuthorInText'\n    | 'SuppressAuthor'\n    | 'NormalCitation'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Citation"
                        }
                    ],
                    "start": [
                        116,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Citation(id: string, mode: 'AuthorInText'|'NormalCitation'|'SuppressAuthor', prefix?: pandoc.List, suffix?: pandoc.List, note_num?: integer, hash?: integer)\n  -> pandoc.Citation"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    116,
                    24
                ],
                "name": "Citation",
                "rawdesc": "Creates a single citation\n\n\n```lua\nmode:\n    | 'AuthorInText'\n    | 'SuppressAuthor'\n    | 'NormalCitation'\n```",
                "start": [
                    116,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Citation",
                "visible": "public"
            }
        ],
        "name": "pandoc.Citation",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                122,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Single citation entry\n\nCitation values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                122,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Citation"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        122,
                        36
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Citation"
                        }
                    ],
                    "start": [
                        122,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Citation:clone()\n  -> pandoc.Citation"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    122,
                    30
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    122,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Citation.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation\n",
                "extends": {
                    "desc": "Citation\n",
                    "finish": [
                        44,
                        16
                    ],
                    "rawdesc": "Citation\n",
                    "start": [
                        44,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Cite"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    44,
                    11
                ],
                "name": "Cite",
                "rawdesc": "Citation\n",
                "start": [
                    44,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Cite",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a Cite inline element\n\n\n@*param* `content` — List of inlines\n\n@*param* `citations` — List of `Citation`",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                52,
                                28
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                52,
                                21
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        },
                        {
                            "desc": "List of `Citation`",
                            "finish": [
                                52,
                                39
                            ],
                            "name": "citations",
                            "rawdesc": "List of `Citation`",
                            "start": [
                                52,
                                30
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Creates a Cite inline element\n\n\n@*param* `content` — List of inlines\n\n@*param* `citations` — List of `Citation`",
                    "finish": [
                        52,
                        44
                    ],
                    "rawdesc": "Creates a Cite inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Cite"
                        }
                    ],
                    "start": [
                        52,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Cite(content: pandoc.Inlines, citations: pandoc.List)\n  -> pandoc.Cite"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    52,
                    20
                ],
                "name": "Cite",
                "rawdesc": "Creates a Cite inline element\n",
                "start": [
                    52,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Cite",
                "visible": "public"
            }
        ],
        "name": "pandoc.Cite",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            39,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            39,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    39,
                    37
                ],
                "rawdesc": "Citation\n",
                "start": [
                    39,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Cite",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Citation entries (list of `Citation`)",
                "extends": {
                    "finish": [
                        41,
                        31
                    ],
                    "start": [
                        41,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                41,
                                31
                            ],
                            "start": [
                                41,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    41,
                    31
                ],
                "name": "citations",
                "rawdesc": "Citation entries (list of `Citation`)",
                "start": [
                    41,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Citation\n",
                            "finish": [
                                58,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Citation\n",
                            "start": [
                                58,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Cite"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        58,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Cite"
                        }
                    ],
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Cite:clone()\n  -> pandoc.Cite"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    58,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    58,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        40,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        40,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                40,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                40,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    40,
                    32
                ],
                "name": "content",
                "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "start": [
                    40,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        42,
                        18
                    ],
                    "start": [
                        42,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                42,
                                18
                            ],
                            "start": [
                                42,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Cite\""
                        }
                    ],
                    "view": "\"Cite\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    42,
                    18
                ],
                "name": "t",
                "start": [
                    42,
                    10
                ],
                "type": "doc.field",
                "view": "\"Cite\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        43,
                        20
                    ],
                    "start": [
                        43,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                43,
                                20
                            ],
                            "start": [
                                43,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Cite\""
                        }
                    ],
                    "view": "\"Cite\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    43,
                    20
                ],
                "name": "tag",
                "start": [
                    43,
                    10
                ],
                "type": "doc.field",
                "view": "\"Cite\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Cite",
        "type": "type",
        "view": "pandoc.Cite"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Citation\n",
                            "finish": [
                                58,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Citation\n",
                            "start": [
                                58,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Cite"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        58,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Cite"
                        }
                    ],
                    "start": [
                        58,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Cite:clone()\n  -> pandoc.Cite"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    58,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    58,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Cite.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline code\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            66,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            66,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    66,
                    37
                ],
                "rawdesc": "Inline code\n",
                "start": [
                    66,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Code",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Code attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        68,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        68,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                68,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                68,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    68,
                    26
                ],
                "name": "attr",
                "rawdesc": "Code attributes",
                "start": [
                    68,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        71,
                        41
                    ],
                    "start": [
                        71,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                71,
                                41
                            ],
                            "start": [
                                71,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    71,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    71,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        70,
                        29
                    ],
                    "start": [
                        70,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                70,
                                29
                            ],
                            "start": [
                                70,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    70,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    70,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Inline code\n",
                            "finish": [
                                88,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Inline code\n",
                            "start": [
                                88,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Code"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        88,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Code"
                        }
                    ],
                    "start": [
                        88,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Code:clone()\n  -> pandoc.Code"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    88,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    88,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        69,
                        27
                    ],
                    "start": [
                        69,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                69,
                                27
                            ],
                            "start": [
                                69,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    69,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    69,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        72,
                        18
                    ],
                    "start": [
                        72,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                72,
                                18
                            ],
                            "start": [
                                72,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Code\""
                        }
                    ],
                    "view": "\"Code\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    72,
                    18
                ],
                "name": "t",
                "start": [
                    72,
                    10
                ],
                "type": "doc.field",
                "view": "\"Code\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        73,
                        20
                    ],
                    "start": [
                        73,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                73,
                                20
                            ],
                            "start": [
                                73,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Code\""
                        }
                    ],
                    "view": "\"Code\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    73,
                    20
                ],
                "name": "tag",
                "start": [
                    73,
                    10
                ],
                "type": "doc.field",
                "view": "\"Code\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Code string",
                "extends": {
                    "finish": [
                        67,
                        21
                    ],
                    "start": [
                        67,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                21
                            ],
                            "start": [
                                67,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    67,
                    21
                ],
                "name": "text",
                "rawdesc": "Code string",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Code",
        "type": "type",
        "view": "pandoc.Code"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline code\n",
                "extends": {
                    "desc": "Inline code\n",
                    "finish": [
                        74,
                        16
                    ],
                    "rawdesc": "Inline code\n",
                    "start": [
                        74,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Code"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    74,
                    11
                ],
                "name": "Code",
                "rawdesc": "Inline code\n",
                "start": [
                    74,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Code",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates an inline code element\n\n\n@*param* `text` — Code string\n\n@*param* `attr` — Code attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Code string",
                            "finish": [
                                82,
                                25
                            ],
                            "name": "text",
                            "rawdesc": "Code string",
                            "start": [
                                82,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Code attributes",
                            "finish": [
                                82,
                                31
                            ],
                            "name": "attr",
                            "rawdesc": "Code attributes",
                            "start": [
                                82,
                                27
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates an inline code element\n\n\n@*param* `text` — Code string\n\n@*param* `attr` — Code attributes",
                    "finish": [
                        82,
                        36
                    ],
                    "rawdesc": "Creates an inline code element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Code"
                        }
                    ],
                    "start": [
                        82,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Code(text: string, attr?: pandoc.Attr)\n  -> pandoc.Code"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    82,
                    20
                ],
                "name": "Code",
                "rawdesc": "Creates an inline code element\n",
                "start": [
                    82,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Code",
                "visible": "public"
            }
        ],
        "name": "pandoc.Code",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Inline code\n",
                            "finish": [
                                88,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Inline code\n",
                            "start": [
                                88,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Code"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        88,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Code"
                        }
                    ],
                    "start": [
                        88,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Code:clone()\n  -> pandoc.Code"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    88,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    88,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Code.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Block of code\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            108,
                            41
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            108,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    108,
                    41
                ],
                "rawdesc": "Block of code\n",
                "start": [
                    108,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.CodeBlock",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Cell attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        110,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        110,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                110,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                110,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    110,
                    26
                ],
                "name": "attr",
                "rawdesc": "Cell attributes",
                "start": [
                    110,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        113,
                        41
                    ],
                    "start": [
                        113,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                113,
                                41
                            ],
                            "start": [
                                113,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    113,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    113,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        112,
                        29
                    ],
                    "start": [
                        112,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                112,
                                29
                            ],
                            "start": [
                                112,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    112,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    112,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Block of code\n",
                            "finish": [
                                130,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Block of code\n",
                            "start": [
                                130,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        130,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.CodeBlock:clone()\n  -> pandoc.CodeBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    130,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    130,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        111,
                        27
                    ],
                    "start": [
                        111,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                111,
                                27
                            ],
                            "start": [
                                111,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    111,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    111,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        114,
                        23
                    ],
                    "start": [
                        114,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                114,
                                23
                            ],
                            "start": [
                                114,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"CodeBlock\""
                        }
                    ],
                    "view": "\"CodeBlock\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    114,
                    23
                ],
                "name": "t",
                "start": [
                    114,
                    10
                ],
                "type": "doc.field",
                "view": "\"CodeBlock\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        115,
                        25
                    ],
                    "start": [
                        115,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                115,
                                25
                            ],
                            "start": [
                                115,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"CodeBlock\""
                        }
                    ],
                    "view": "\"CodeBlock\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    115,
                    25
                ],
                "name": "tag",
                "start": [
                    115,
                    10
                ],
                "type": "doc.field",
                "view": "\"CodeBlock\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Code string",
                "extends": {
                    "finish": [
                        109,
                        21
                    ],
                    "start": [
                        109,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                109,
                                21
                            ],
                            "start": [
                                109,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    109,
                    21
                ],
                "name": "text",
                "rawdesc": "Code string",
                "start": [
                    109,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Block of code\n",
                            "finish": [
                                137,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Block of code\n",
                            "start": [
                                137,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.CodeBlock"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                137,
                                41
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                137,
                                31
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        137,
                        46
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "start": [
                        137,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.CodeBlock:walk(lua_filter: table<string, function>)\n  -> pandoc.CodeBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    137,
                    30
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    137,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.CodeBlock",
        "type": "type",
        "view": "pandoc.CodeBlock"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Block of code\n",
                "extends": {
                    "desc": "Block of code\n",
                    "finish": [
                        116,
                        21
                    ],
                    "rawdesc": "Block of code\n",
                    "start": [
                        116,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.CodeBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    116,
                    16
                ],
                "name": "CodeBlock",
                "rawdesc": "Block of code\n",
                "start": [
                    116,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.CodeBlock",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a code block element\n\n\n@*param* `text` — Code string\n\n@*param* `attr` — Cell attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Code string",
                            "finish": [
                                124,
                                30
                            ],
                            "name": "text",
                            "rawdesc": "Code string",
                            "start": [
                                124,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Cell attributes",
                            "finish": [
                                124,
                                36
                            ],
                            "name": "attr",
                            "rawdesc": "Cell attributes",
                            "start": [
                                124,
                                32
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a code block element\n\n\n@*param* `text` — Code string\n\n@*param* `attr` — Cell attributes",
                    "finish": [
                        124,
                        41
                    ],
                    "rawdesc": "Creates a code block element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.CodeBlock(text: string, attr?: pandoc.Attr)\n  -> pandoc.CodeBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    124,
                    25
                ],
                "name": "CodeBlock",
                "rawdesc": "Creates a code block element\n",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.CodeBlock",
                "visible": "public"
            }
        ],
        "name": "pandoc.CodeBlock",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Block of code\n",
                            "finish": [
                                130,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Block of code\n",
                            "start": [
                                130,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        130,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "start": [
                        130,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.CodeBlock:clone()\n  -> pandoc.CodeBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    130,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    130,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.CodeBlock.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Block of code\n",
                            "finish": [
                                137,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Block of code\n",
                            "start": [
                                137,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.CodeBlock"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                137,
                                41
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                137,
                                31
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        137,
                        46
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.CodeBlock"
                        }
                    ],
                    "start": [
                        137,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.CodeBlock:walk(lua_filter: table<string, function>)\n  -> pandoc.CodeBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    137,
                    30
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    137,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.CodeBlock.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Column alignment and width specification for a single table column.\n\n-- This is a pair, i.e., a plain table, with the following\n-- components:\n\n-- 1. cell alignment\n-- 2. table column width, as a fraction of the page width\n",
                "extends": [
                    {
                        "finish": [
                            134,
                            32
                        ],
                        "start": [
                            134,
                            27
                        ],
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "pandoc/components.lua",
                "finish": [
                    134,
                    32
                ],
                "rawdesc": "Column alignment and width specification for a single table column.\n\n-- This is a pair, i.e., a plain table, with the following\n-- components:\n\n-- 1. cell alignment\n-- 2. table column width, as a fraction of the page width\n",
                "start": [
                    134,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.ColSpec",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "pandoc.ColSpec",
        "type": "type",
        "view": "pandoc.ColSpec"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Column alignment and width specification for a single table column.\n\n-- This is a pair, i.e., a plain table, with the following\n-- components:\n\n-- 1. cell alignment\n-- 2. table column width, as a fraction of the page width\n",
                "extends": {
                    "desc": "Column alignment and width specification for a single table column.\n\n-- This is a pair, i.e., a plain table, with the following\n-- components:\n\n-- 1. cell alignment\n-- 2. table column width, as a fraction of the page width\n",
                    "finish": [
                        135,
                        19
                    ],
                    "rawdesc": "Column alignment and width specification for a single table column.\n\n-- This is a pair, i.e., a plain table, with the following\n-- components:\n\n-- 1. cell alignment\n-- 2. table column width, as a fraction of the page width\n",
                    "start": [
                        135,
                        17
                    ],
                    "type": "table",
                    "view": "pandoc.ColSpec"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    135,
                    14
                ],
                "name": "ColSpec",
                "rawdesc": "Column alignment and width specification for a single table column.\n\n-- This is a pair, i.e., a plain table, with the following\n-- components:\n\n-- 1. cell alignment\n-- 2. table column width, as a fraction of the page width\n",
                "start": [
                    135,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.ColSpec",
                "visible": "public"
            }
        ],
        "name": "pandoc.ColSpec",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The state shared by all readers and writers. It is used by pandoc to collect and pass information.\n",
                "file": "pandoc/state.lua",
                "finish": [
                    5,
                    28
                ],
                "rawdesc": "The state shared by all readers and writers. It is used by pandoc to collect and pass information.\n",
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.CommonState",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of input files from command line",
                "extends": {
                    "finish": [
                        6,
                        33
                    ],
                    "start": [
                        6,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                6,
                                33
                            ],
                            "start": [
                                6,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    6,
                    33
                ],
                "name": "input_files",
                "rawdesc": "List of input files from command line",
                "start": [
                    6,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "A list of log messages in reverse order",
                "extends": {
                    "finish": [
                        8,
                        25
                    ],
                    "start": [
                        8,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                8,
                                25
                            ],
                            "start": [
                                8,
                                14
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    8,
                    25
                ],
                "name": "log",
                "rawdesc": "A list of log messages in reverse order",
                "start": [
                    8,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Output file from command line",
                "extends": {
                    "finish": [
                        7,
                        32
                    ],
                    "start": [
                        7,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                7,
                                28
                            ],
                            "start": [
                                7,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        },
                        {
                            "finish": [
                                7,
                                32
                            ],
                            "start": [
                                7,
                                29
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "string|nil"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    7,
                    32
                ],
                "name": "output_file",
                "rawdesc": "Output file from command line",
                "start": [
                    7,
                    10
                ],
                "type": "doc.field",
                "view": "string|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Headers to add for HTTP requests; table with header names as keys and header contents as value",
                "extends": {
                    "finish": [
                        9,
                        46
                    ],
                    "start": [
                        9,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                9,
                                46
                            ],
                            "start": [
                                9,
                                26
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    9,
                    46
                ],
                "name": "request_headers",
                "rawdesc": "Headers to add for HTTP requests; table with header names as keys and header contents as value",
                "start": [
                    9,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Path to search for resources like included images",
                "extends": {
                    "finish": [
                        10,
                        35
                    ],
                    "start": [
                        10,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                10,
                                35
                            ],
                            "start": [
                                10,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    10,
                    35
                ],
                "name": "resource_path",
                "rawdesc": "Path to search for resources like included images",
                "start": [
                    10,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Absolute URL or directory of first source file",
                "extends": {
                    "finish": [
                        11,
                        31
                    ],
                    "start": [
                        11,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                11,
                                27
                            ],
                            "start": [
                                11,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        },
                        {
                            "finish": [
                                11,
                                31
                            ],
                            "start": [
                                11,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "string|nil"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    11,
                    31
                ],
                "name": "source_url",
                "rawdesc": "Absolute URL or directory of first source file",
                "start": [
                    11,
                    10
                ],
                "type": "doc.field",
                "view": "string|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Whether tracing messages are issued",
                "extends": {
                    "finish": [
                        13,
                        23
                    ],
                    "start": [
                        13,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                23
                            ],
                            "start": [
                                13,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    13,
                    23
                ],
                "name": "trace",
                "rawdesc": "Whether tracing messages are issued",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Directory to search for data files",
                "extends": {
                    "finish": [
                        12,
                        34
                    ],
                    "start": [
                        12,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                12,
                                30
                            ],
                            "start": [
                                12,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        },
                        {
                            "finish": [
                                12,
                                34
                            ],
                            "start": [
                                12,
                                31
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "string|nil"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    12,
                    34
                ],
                "name": "user_data_dir",
                "rawdesc": "Directory to search for data files",
                "start": [
                    12,
                    10
                ],
                "type": "doc.field",
                "view": "string|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Verbosity level; one of `INFO`, `WARNING`, `ERROR`",
                "extends": {
                    "finish": [
                        14,
                        44
                    ],
                    "start": [
                        14,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                26
                            ],
                            "start": [
                                14,
                                20
                            ],
                            "type": "doc.type.string",
                            "view": "'INFO'"
                        },
                        {
                            "finish": [
                                14,
                                36
                            ],
                            "start": [
                                14,
                                27
                            ],
                            "type": "doc.type.string",
                            "view": "'WARNING'"
                        },
                        {
                            "finish": [
                                14,
                                44
                            ],
                            "start": [
                                14,
                                37
                            ],
                            "type": "doc.type.string",
                            "view": "'ERROR'"
                        }
                    ],
                    "view": "'ERROR'|'INFO'|'WARNING'"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    14,
                    44
                ],
                "name": "verbosity",
                "rawdesc": "Verbosity level; one of `INFO`, `WARNING`, `ERROR`",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "'ERROR'|'INFO'|'WARNING'",
                "visible": "public"
            }
        ],
        "name": "pandoc.CommonState",
        "type": "type",
        "view": "pandoc.CommonState"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List are numbered using decimal integers.\n",
                "extends": {
                    "finish": [
                        70,
                        26
                    ],
                    "start": [
                        70,
                        17
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    70,
                    14
                ],
                "name": "Decimal",
                "rawdesc": "List are numbered using decimal integers.\n",
                "start": [
                    70,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Decimal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Default list number delimiters are used.\n",
                "extends": {
                    "finish": [
                        40,
                        36
                    ],
                    "start": [
                        40,
                        22
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    40,
                    19
                ],
                "name": "DefaultDelim",
                "rawdesc": "Default list number delimiters are used.\n",
                "start": [
                    40,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.DefaultDelim",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List are numbered in the default style\n",
                "extends": {
                    "finish": [
                        60,
                        36
                    ],
                    "start": [
                        60,
                        22
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    60,
                    19
                ],
                "name": "DefaultStyle",
                "rawdesc": "List are numbered in the default style\n",
                "start": [
                    60,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.DefaultStyle",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Definition list, containing terms and their explanation.\n",
                "extends": {
                    "desc": "Definition list, containing terms and their explanation.\n",
                    "finish": [
                        148,
                        26
                    ],
                    "rawdesc": "Definition list, containing terms and their explanation.\n",
                    "start": [
                        148,
                        24
                    ],
                    "type": "table",
                    "view": "pandoc.DefinitionList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    148,
                    21
                ],
                "name": "DefinitionList",
                "rawdesc": "Definition list, containing terms and their explanation.\n",
                "start": [
                    148,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.DefinitionList",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a definition list, containing terms and their explanation.\n\n\n@*param* `content` — List of defined terms (alternating term and definiition, each of which are lists of inlines)",
                "extends": {
                    "args": [
                        {
                            "desc": "List of defined terms (alternating term and definiition, each of which are lists of inlines)",
                            "finish": [
                                155,
                                38
                            ],
                            "name": "content",
                            "rawdesc": "List of defined terms (alternating term and definiition, each of which are lists of inlines)",
                            "start": [
                                155,
                                31
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Creates a definition list, containing terms and their explanation.\n\n\n@*param* `content` — List of defined terms (alternating term and definiition, each of which are lists of inlines)",
                    "finish": [
                        155,
                        43
                    ],
                    "rawdesc": "Creates a definition list, containing terms and their explanation.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "start": [
                        155,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.DefinitionList(content: pandoc.List)\n  -> pandoc.DefinitionList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    155,
                    30
                ],
                "name": "DefinitionList",
                "rawdesc": "Creates a definition list, containing terms and their explanation.\n",
                "start": [
                    155,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.DefinitionList",
                "visible": "public"
            }
        ],
        "name": "pandoc.DefinitionList",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Definition list, containing terms and their explanation.\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            144,
                            46
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            144,
                            34
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    144,
                    46
                ],
                "rawdesc": "Definition list, containing terms and their explanation.\n",
                "start": [
                    144,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.DefinitionList",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Definition list, containing terms and their explanation.\n",
                            "finish": [
                                161,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Definition list, containing terms and their explanation.\n",
                            "start": [
                                161,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        161,
                        42
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.DefinitionList:clone()\n  -> pandoc.DefinitionList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    161,
                    36
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    161,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of items",
                "extends": {
                    "finish": [
                        145,
                        29
                    ],
                    "start": [
                        145,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                145,
                                29
                            ],
                            "start": [
                                145,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    145,
                    29
                ],
                "name": "content",
                "rawdesc": "List of items",
                "start": [
                    145,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        146,
                        28
                    ],
                    "start": [
                        146,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                146,
                                28
                            ],
                            "start": [
                                146,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"DefinitionList\""
                        }
                    ],
                    "view": "\"DefinitionList\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    146,
                    28
                ],
                "name": "t",
                "start": [
                    146,
                    10
                ],
                "type": "doc.field",
                "view": "\"DefinitionList\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        147,
                        30
                    ],
                    "start": [
                        147,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                147,
                                30
                            ],
                            "start": [
                                147,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"DefinitionList\""
                        }
                    ],
                    "view": "\"DefinitionList\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    147,
                    30
                ],
                "name": "tag",
                "start": [
                    147,
                    10
                ],
                "type": "doc.field",
                "view": "\"DefinitionList\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Definition list, containing terms and their explanation.\n",
                            "finish": [
                                168,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Definition list, containing terms and their explanation.\n",
                            "start": [
                                168,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.DefinitionList"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                168,
                                46
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                168,
                                36
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        168,
                        51
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "start": [
                        168,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.DefinitionList:walk(lua_filter: table<string, function>)\n  -> pandoc.DefinitionList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    168,
                    35
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    168,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.DefinitionList",
        "type": "type",
        "view": "pandoc.DefinitionList"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Definition list, containing terms and their explanation.\n",
                            "finish": [
                                161,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Definition list, containing terms and their explanation.\n",
                            "start": [
                                161,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        161,
                        42
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.DefinitionList:clone()\n  -> pandoc.DefinitionList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    161,
                    36
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    161,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.DefinitionList.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Definition list, containing terms and their explanation.\n",
                            "finish": [
                                168,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Definition list, containing terms and their explanation.\n",
                            "start": [
                                168,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.DefinitionList"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                168,
                                46
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                168,
                                36
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        168,
                        51
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.DefinitionList"
                        }
                    ],
                    "start": [
                        168,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.DefinitionList:walk(lua_filter: table<string, function>)\n  -> pandoc.DefinitionList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    168,
                    35
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    168,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.DefinitionList.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Generic block container with attributes.\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            175,
                            35
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            175,
                            23
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    175,
                    35
                ],
                "rawdesc": "Generic block container with attributes.\n",
                "start": [
                    175,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Div",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Block attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        177,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        177,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                177,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                177,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    177,
                    26
                ],
                "name": "attr",
                "rawdesc": "Block attributes",
                "start": [
                    177,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        180,
                        41
                    ],
                    "start": [
                        180,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                180,
                                41
                            ],
                            "start": [
                                180,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    180,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    180,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        179,
                        29
                    ],
                    "start": [
                        179,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                179,
                                29
                            ],
                            "start": [
                                179,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    179,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    179,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Generic block container with attributes.\n",
                            "finish": [
                                197,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Generic block container with attributes.\n",
                            "start": [
                                197,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Div"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        197,
                        31
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Div"
                        }
                    ],
                    "start": [
                        197,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Div:clone()\n  -> pandoc.Div"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    197,
                    25
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    197,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Block content (list of blocks)",
                "extends": {
                    "finish": [
                        176,
                        29
                    ],
                    "start": [
                        176,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                176,
                                29
                            ],
                            "start": [
                                176,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    176,
                    29
                ],
                "name": "content",
                "rawdesc": "Block content (list of blocks)",
                "start": [
                    176,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        178,
                        27
                    ],
                    "start": [
                        178,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                178,
                                27
                            ],
                            "start": [
                                178,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    178,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    178,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        181,
                        17
                    ],
                    "start": [
                        181,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                181,
                                17
                            ],
                            "start": [
                                181,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Div\""
                        }
                    ],
                    "view": "\"Div\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    181,
                    17
                ],
                "name": "t",
                "start": [
                    181,
                    10
                ],
                "type": "doc.field",
                "view": "\"Div\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        182,
                        19
                    ],
                    "start": [
                        182,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                182,
                                19
                            ],
                            "start": [
                                182,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Div\""
                        }
                    ],
                    "view": "\"Div\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    182,
                    19
                ],
                "name": "tag",
                "start": [
                    182,
                    10
                ],
                "type": "doc.field",
                "view": "\"Div\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Generic block container with attributes.\n",
                            "finish": [
                                204,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Generic block container with attributes.\n",
                            "start": [
                                204,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Div"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                204,
                                35
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                204,
                                25
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        204,
                        40
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Div"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Div:walk(lua_filter: table<string, function>)\n  -> pandoc.Div"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    204,
                    24
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    204,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Div",
        "type": "type",
        "view": "pandoc.Div"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Generic block container with attributes.\n",
                "extends": {
                    "desc": "Generic block container with attributes.\n",
                    "finish": [
                        183,
                        15
                    ],
                    "rawdesc": "Generic block container with attributes.\n",
                    "start": [
                        183,
                        13
                    ],
                    "type": "table",
                    "view": "pandoc.Div"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    183,
                    10
                ],
                "name": "Div",
                "rawdesc": "Generic block container with attributes.\n",
                "start": [
                    183,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Div",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a div element\n\n\n@*param* `content` — Block or list of blocks\n\n@*param* `attr` — Div attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Block or list of blocks",
                            "finish": [
                                191,
                                27
                            ],
                            "name": "content",
                            "rawdesc": "Block or list of blocks",
                            "start": [
                                191,
                                20
                            ],
                            "type": "local",
                            "view": "string|pandoc.Block|pandoc.Inline|pandoc.List"
                        },
                        {
                            "desc": "Div attributes",
                            "finish": [
                                191,
                                33
                            ],
                            "name": "attr",
                            "rawdesc": "Div attributes",
                            "start": [
                                191,
                                29
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a div element\n\n\n@*param* `content` — Block or list of blocks\n\n@*param* `attr` — Div attributes",
                    "finish": [
                        191,
                        38
                    ],
                    "rawdesc": "Creates a div element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Div"
                        }
                    ],
                    "start": [
                        191,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Div(content: string|pandoc.Block|pandoc.Inline|pandoc.List, attr?: pandoc.Attr)\n  -> pandoc.Div"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    191,
                    19
                ],
                "name": "Div",
                "rawdesc": "Creates a div element\n",
                "start": [
                    191,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Div",
                "visible": "public"
            }
        ],
        "name": "pandoc.Div",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Generic block container with attributes.\n",
                            "finish": [
                                197,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Generic block container with attributes.\n",
                            "start": [
                                197,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Div"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        197,
                        31
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Div"
                        }
                    ],
                    "start": [
                        197,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Div:clone()\n  -> pandoc.Div"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    197,
                    25
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    197,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Div.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Generic block container with attributes.\n",
                            "finish": [
                                204,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Generic block container with attributes.\n",
                            "start": [
                                204,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Div"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                204,
                                35
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                204,
                                25
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        204,
                        40
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Div"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Div:walk(lua_filter: table<string, function>)\n  -> pandoc.Div"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    204,
                    24
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    204,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Div.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pandoc reflowable document: https://pandoc.org/lua-filters.html#type-doc\n\n  TODO: write fields and methods\n",
                "file": "pandoc/doc.lua",
                "finish": [
                    7,
                    20
                ],
                "rawdesc": "Pandoc reflowable document: https://pandoc.org/lua-filters.html#type-doc\n\n  TODO: write fields and methods\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Doc",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "pandoc.Doc",
        "type": "type",
        "view": "pandoc.Doc"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Emphasized text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            95,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            95,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    95,
                    37
                ],
                "rawdesc": "Emphasized text\n",
                "start": [
                    95,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Emph",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Emphasized text\n",
                            "finish": [
                                112,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Emphasized text\n",
                            "start": [
                                112,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Emph"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        112,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Emph"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Emph:clone()\n  -> pandoc.Emph"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    112,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    112,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content (list of inlines)",
                "extends": {
                    "finish": [
                        96,
                        29
                    ],
                    "start": [
                        96,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                96,
                                29
                            ],
                            "start": [
                                96,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    96,
                    29
                ],
                "name": "content",
                "rawdesc": "Inline content (list of inlines)",
                "start": [
                    96,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        97,
                        18
                    ],
                    "start": [
                        97,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                97,
                                18
                            ],
                            "start": [
                                97,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Emph\""
                        }
                    ],
                    "view": "\"Emph\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    97,
                    18
                ],
                "name": "t",
                "start": [
                    97,
                    10
                ],
                "type": "doc.field",
                "view": "\"Emph\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        98,
                        20
                    ],
                    "start": [
                        98,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                98,
                                20
                            ],
                            "start": [
                                98,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Emph\""
                        }
                    ],
                    "view": "\"Emph\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    98,
                    20
                ],
                "name": "tag",
                "start": [
                    98,
                    10
                ],
                "type": "doc.field",
                "view": "\"Emph\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Emph",
        "type": "type",
        "view": "pandoc.Emph"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Emphasized text\n",
                "extends": {
                    "desc": "Emphasized text\n",
                    "finish": [
                        99,
                        16
                    ],
                    "rawdesc": "Emphasized text\n",
                    "start": [
                        99,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Emph"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    99,
                    11
                ],
                "name": "Emph",
                "rawdesc": "Emphasized text\n",
                "start": [
                    99,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Emph",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates an inline element representing emphasized text.\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                106,
                                28
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                106,
                                21
                            ],
                            "type": "local",
                            "view": "string|pandoc.Inline|pandoc.List"
                        }
                    ],
                    "desc": "Creates an inline element representing emphasized text.\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        106,
                        33
                    ],
                    "rawdesc": "Creates an inline element representing emphasized text.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Emph"
                        }
                    ],
                    "start": [
                        106,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Emph(content: string|pandoc.Inline|pandoc.List)\n  -> pandoc.Emph"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    106,
                    20
                ],
                "name": "Emph",
                "rawdesc": "Creates an inline element representing emphasized text.\n",
                "start": [
                    106,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Emph",
                "visible": "public"
            }
        ],
        "name": "pandoc.Emph",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Emphasized text\n",
                            "finish": [
                                112,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Emphasized text\n",
                            "start": [
                                112,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Emph"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        112,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Emph"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Emph:clone()\n  -> pandoc.Emph"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    112,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    112,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Emph.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List items are numbered as examples.\n",
                "extends": {
                    "finish": [
                        65,
                        26
                    ],
                    "start": [
                        65,
                        17
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    65,
                    14
                ],
                "name": "Example",
                "rawdesc": "List items are numbered as examples.\n",
                "start": [
                    65,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Example",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nFigure with caption and arbitrary block contents.\n\n",
                "extends": {
                    "desc": "\nFigure with caption and arbitrary block contents.\n\n",
                    "finish": [
                        506,
                        18
                    ],
                    "rawdesc": "\nFigure with caption and arbitrary block contents.\n\n",
                    "start": [
                        506,
                        16
                    ],
                    "type": "table",
                    "view": "pandoc.Figure"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    506,
                    13
                ],
                "name": "Figure",
                "rawdesc": "\nFigure with caption and arbitrary block contents.\n\n",
                "start": [
                    506,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Figure",
                "visible": "public"
            }
        ],
        "name": "pandoc.Figure",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nFigure with caption and arbitrary block contents.\n\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            497,
                            38
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            497,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    497,
                    38
                ],
                "rawdesc": "\nFigure with caption and arbitrary block contents.\n\n",
                "start": [
                    497,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Figure",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Figure attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        498,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        498,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                498,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                498,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    498,
                    26
                ],
                "name": "attr",
                "rawdesc": "Figure attributes",
                "start": [
                    498,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        501,
                        41
                    ],
                    "start": [
                        501,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                501,
                                41
                            ],
                            "start": [
                                501,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    501,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    501,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Figure caption",
                "extends": {
                    "desc": "The caption of a table, with an optional short caption.\n",
                    "finish": [
                        502,
                        32
                    ],
                    "rawdesc": "The caption of a table, with an optional short caption.\n",
                    "start": [
                        502,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "The caption of a table, with an optional short caption.\n",
                            "finish": [
                                502,
                                32
                            ],
                            "rawdesc": "The caption of a table, with an optional short caption.\n",
                            "start": [
                                502,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Caption"
                        }
                    ],
                    "view": "pandoc.Caption"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    502,
                    32
                ],
                "name": "caption",
                "rawdesc": "Figure caption",
                "start": [
                    502,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Caption",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        500,
                        29
                    ],
                    "start": [
                        500,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                500,
                                29
                            ],
                            "start": [
                                500,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    500,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    500,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Figure non-caption content",
                "extends": {
                    "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        503,
                        31
                    ],
                    "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        503,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                503,
                                31
                            ],
                            "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                503,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "view": "pandoc.Blocks"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    503,
                    31
                ],
                "name": "content",
                "rawdesc": "Figure non-caption content",
                "start": [
                    503,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Blocks",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        499,
                        27
                    ],
                    "start": [
                        499,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                499,
                                27
                            ],
                            "start": [
                                499,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    499,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    499,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        504,
                        20
                    ],
                    "start": [
                        504,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                504,
                                20
                            ],
                            "start": [
                                504,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Figure\""
                        }
                    ],
                    "view": "\"Figure\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    504,
                    20
                ],
                "name": "t",
                "start": [
                    504,
                    10
                ],
                "type": "doc.field",
                "view": "\"Figure\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        505,
                        22
                    ],
                    "start": [
                        505,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                505,
                                22
                            ],
                            "start": [
                                505,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Figure\""
                        }
                    ],
                    "view": "\"Figure\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    505,
                    22
                ],
                "name": "tag",
                "start": [
                    505,
                    10
                ],
                "type": "doc.field",
                "view": "\"Figure\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Figure",
        "type": "type",
        "view": "pandoc.Figure"
    },
    {
        "defines": [
            {
                "finish": [
                    5,
                    56
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.alias",
                "view": "table<string, boolean>"
            }
        ],
        "fields": [],
        "name": "pandoc.FormatExtensions",
        "type": "type",
        "view": "pandoc.FormatExtensions"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Header element\n",
                "extends": {
                    "desc": "Header element\n",
                    "finish": [
                        221,
                        18
                    ],
                    "rawdesc": "Header element\n",
                    "start": [
                        221,
                        16
                    ],
                    "type": "table",
                    "view": "pandoc.Header"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    221,
                    13
                ],
                "name": "Header",
                "rawdesc": "Header element\n",
                "start": [
                    221,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Header",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a header element\n\n\n@*param* `level` — Heading level\n\n@*param* `content` — Inline content\n\n@*param* `attr` — Element attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Heading level",
                            "finish": [
                                230,
                                28
                            ],
                            "name": "level",
                            "rawdesc": "Heading level",
                            "start": [
                                230,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Inline content",
                            "finish": [
                                230,
                                37
                            ],
                            "name": "content",
                            "rawdesc": "Inline content",
                            "start": [
                                230,
                                30
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        },
                        {
                            "desc": "Element attributes",
                            "finish": [
                                230,
                                43
                            ],
                            "name": "attr",
                            "rawdesc": "Element attributes",
                            "start": [
                                230,
                                39
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a header element\n\n\n@*param* `level` — Heading level\n\n@*param* `content` — Inline content\n\n@*param* `attr` — Element attributes",
                    "finish": [
                        230,
                        48
                    ],
                    "rawdesc": "Creates a header element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Header"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Header(level: integer, content: pandoc.Inlines, attr?: pandoc.Attr)\n  -> pandoc.Header"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    230,
                    22
                ],
                "name": "Header",
                "rawdesc": "Creates a header element\n",
                "start": [
                    230,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Header",
                "visible": "public"
            }
        ],
        "name": "pandoc.Header",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Header element\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            212,
                            38
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            212,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    212,
                    38
                ],
                "rawdesc": "Header element\n",
                "start": [
                    212,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Header",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Element attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        215,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        215,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                215,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                215,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    215,
                    26
                ],
                "name": "attr",
                "rawdesc": "Element attributes",
                "start": [
                    215,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        218,
                        41
                    ],
                    "start": [
                        218,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                218,
                                41
                            ],
                            "start": [
                                218,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    218,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    218,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        217,
                        29
                    ],
                    "start": [
                        217,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                217,
                                29
                            ],
                            "start": [
                                217,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    217,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    217,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Header element\n",
                            "finish": [
                                236,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Header element\n",
                            "start": [
                                236,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Header"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        236,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Header"
                        }
                    ],
                    "start": [
                        236,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Header:clone()\n  -> pandoc.Header"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    236,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    236,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        214,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        214,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                214,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                214,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    214,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    214,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        216,
                        27
                    ],
                    "start": [
                        216,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                216,
                                27
                            ],
                            "start": [
                                216,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    216,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    216,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Heading level",
                "extends": {
                    "finish": [
                        213,
                        23
                    ],
                    "start": [
                        213,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                213,
                                23
                            ],
                            "start": [
                                213,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    213,
                    23
                ],
                "name": "level",
                "rawdesc": "Heading level",
                "start": [
                    213,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        219,
                        20
                    ],
                    "start": [
                        219,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                219,
                                20
                            ],
                            "start": [
                                219,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Header\""
                        }
                    ],
                    "view": "\"Header\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    219,
                    20
                ],
                "name": "t",
                "start": [
                    219,
                    10
                ],
                "type": "doc.field",
                "view": "\"Header\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        220,
                        22
                    ],
                    "start": [
                        220,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                220,
                                22
                            ],
                            "start": [
                                220,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Header\""
                        }
                    ],
                    "view": "\"Header\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    220,
                    22
                ],
                "name": "tag",
                "start": [
                    220,
                    10
                ],
                "type": "doc.field",
                "view": "\"Header\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Header element\n",
                            "finish": [
                                243,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Header element\n",
                            "start": [
                                243,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Header"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                243,
                                38
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                243,
                                28
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        243,
                        43
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Header"
                        }
                    ],
                    "start": [
                        243,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Header:walk(lua_filter: table<string, function>)\n  -> pandoc.Header"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    243,
                    27
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    243,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Header",
        "type": "type",
        "view": "pandoc.Header"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Header element\n",
                            "finish": [
                                236,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Header element\n",
                            "start": [
                                236,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Header"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        236,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Header"
                        }
                    ],
                    "start": [
                        236,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Header:clone()\n  -> pandoc.Header"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    236,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    236,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Header.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Header element\n",
                            "finish": [
                                243,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Header element\n",
                            "start": [
                                243,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Header"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                243,
                                38
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                243,
                                28
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        243,
                        43
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Header"
                        }
                    ],
                    "start": [
                        243,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Header:walk(lua_filter: table<string, function>)\n  -> pandoc.Header"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    243,
                    27
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    243,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Header.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A horizontal rule\n",
                "extends": {
                    "desc": "A horizontal rule\n",
                    "finish": [
                        254,
                        26
                    ],
                    "rawdesc": "A horizontal rule\n",
                    "start": [
                        254,
                        24
                    ],
                    "type": "table",
                    "view": "pandoc.HorizontalRule"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    254,
                    21
                ],
                "name": "HorizontalRule",
                "rawdesc": "A horizontal rule\n",
                "start": [
                    254,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.HorizontalRule",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a horizontal rule\n",
                "extends": {
                    "args": [],
                    "desc": "Creates a horizontal rule\n",
                    "finish": [
                        260,
                        36
                    ],
                    "rawdesc": "Creates a horizontal rule\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "start": [
                        260,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.HorizontalRule()\n  -> pandoc.HorizontalRule"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    260,
                    30
                ],
                "name": "HorizontalRule",
                "rawdesc": "Creates a horizontal rule\n",
                "start": [
                    260,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.HorizontalRule",
                "visible": "public"
            }
        ],
        "name": "pandoc.HorizontalRule",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A horizontal rule\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            251,
                            46
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            251,
                            34
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    251,
                    46
                ],
                "rawdesc": "A horizontal rule\n",
                "start": [
                    251,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.HorizontalRule",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A horizontal rule\n",
                            "finish": [
                                266,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A horizontal rule\n",
                            "start": [
                                266,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        266,
                        42
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.HorizontalRule:clone()\n  -> pandoc.HorizontalRule"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    266,
                    36
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    266,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        252,
                        28
                    ],
                    "start": [
                        252,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                252,
                                28
                            ],
                            "start": [
                                252,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"HorizontalRule\""
                        }
                    ],
                    "view": "\"HorizontalRule\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    252,
                    28
                ],
                "name": "t",
                "start": [
                    252,
                    10
                ],
                "type": "doc.field",
                "view": "\"HorizontalRule\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        253,
                        30
                    ],
                    "start": [
                        253,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                253,
                                30
                            ],
                            "start": [
                                253,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"HorizontalRule\""
                        }
                    ],
                    "view": "\"HorizontalRule\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    253,
                    30
                ],
                "name": "tag",
                "start": [
                    253,
                    10
                ],
                "type": "doc.field",
                "view": "\"HorizontalRule\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A horizontal rule\n",
                            "finish": [
                                273,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A horizontal rule\n",
                            "start": [
                                273,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.HorizontalRule"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                273,
                                46
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                273,
                                36
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        273,
                        51
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "start": [
                        273,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.HorizontalRule:walk(lua_filter: table<string, function>)\n  -> pandoc.HorizontalRule"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    273,
                    35
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    273,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.HorizontalRule",
        "type": "type",
        "view": "pandoc.HorizontalRule"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A horizontal rule\n",
                            "finish": [
                                266,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A horizontal rule\n",
                            "start": [
                                266,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        266,
                        42
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.HorizontalRule:clone()\n  -> pandoc.HorizontalRule"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    266,
                    36
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    266,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.HorizontalRule.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A horizontal rule\n",
                            "finish": [
                                273,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A horizontal rule\n",
                            "start": [
                                273,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.HorizontalRule"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                273,
                                46
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                273,
                                36
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        273,
                        51
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.HorizontalRule"
                        }
                    ],
                    "start": [
                        273,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.HorizontalRule:walk(lua_filter: table<string, function>)\n  -> pandoc.HorizontalRule"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    273,
                    35
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    273,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.HorizontalRule.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Image: alt text (list of inlines), target\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            119,
                            38
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            119,
                            25
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    119,
                    38
                ],
                "rawdesc": "Image: alt text (list of inlines), target\n",
                "start": [
                    119,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Image",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Image attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        123,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        123,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                123,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                123,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    123,
                    26
                ],
                "name": "attr",
                "rawdesc": "Image attributes",
                "start": [
                    123,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        126,
                        41
                    ],
                    "start": [
                        126,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                126,
                                41
                            ],
                            "start": [
                                126,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    126,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    126,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Text used to describe the image",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        120,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        120,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                120,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                120,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    120,
                    32
                ],
                "name": "caption",
                "rawdesc": "Text used to describe the image",
                "start": [
                    120,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        125,
                        29
                    ],
                    "start": [
                        125,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                125,
                                29
                            ],
                            "start": [
                                125,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    125,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    125,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Image: alt text (list of inlines), target\n",
                            "finish": [
                                145,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Image: alt text (list of inlines), target\n",
                            "start": [
                                145,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Image"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        145,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Image"
                        }
                    ],
                    "start": [
                        145,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Image:clone()\n  -> pandoc.Image"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    145,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    145,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        124,
                        27
                    ],
                    "start": [
                        124,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                124,
                                27
                            ],
                            "start": [
                                124,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    124,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    124,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Path to the image",
                "extends": {
                    "finish": [
                        121,
                        20
                    ],
                    "start": [
                        121,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                121,
                                20
                            ],
                            "start": [
                                121,
                                14
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    121,
                    20
                ],
                "name": "src",
                "rawdesc": "Path to the image",
                "start": [
                    121,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        127,
                        19
                    ],
                    "start": [
                        127,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                127,
                                19
                            ],
                            "start": [
                                127,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Image\""
                        }
                    ],
                    "view": "\"Image\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    127,
                    19
                ],
                "name": "t",
                "start": [
                    127,
                    10
                ],
                "type": "doc.field",
                "view": "\"Image\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        128,
                        21
                    ],
                    "start": [
                        128,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                128,
                                21
                            ],
                            "start": [
                                128,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Image\""
                        }
                    ],
                    "view": "\"Image\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    128,
                    21
                ],
                "name": "tag",
                "start": [
                    128,
                    10
                ],
                "type": "doc.field",
                "view": "\"Image\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Brief image description",
                "extends": {
                    "finish": [
                        122,
                        22
                    ],
                    "start": [
                        122,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                122,
                                22
                            ],
                            "start": [
                                122,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    122,
                    22
                ],
                "name": "title",
                "rawdesc": "Brief image description",
                "start": [
                    122,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Image",
        "type": "type",
        "view": "pandoc.Image"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Image: alt text (list of inlines), target\n",
                "extends": {
                    "desc": "Image: alt text (list of inlines), target\n",
                    "finish": [
                        129,
                        17
                    ],
                    "rawdesc": "Image: alt text (list of inlines), target\n",
                    "start": [
                        129,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.Image"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    129,
                    12
                ],
                "name": "Image",
                "rawdesc": "Image: alt text (list of inlines), target\n",
                "start": [
                    129,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Image",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates an Image inline element\n\n\n@*param* `caption` — List of inlines\n\n@*param* `src` — Path to the image\n\n@*param* `title` — Brief image description\n\n@*param* `attr` — Attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                139,
                                29
                            ],
                            "name": "caption",
                            "rawdesc": "List of inlines",
                            "start": [
                                139,
                                22
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        },
                        {
                            "desc": "Path to the image",
                            "finish": [
                                139,
                                34
                            ],
                            "name": "src",
                            "rawdesc": "Path to the image",
                            "start": [
                                139,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Brief image description",
                            "finish": [
                                139,
                                41
                            ],
                            "name": "title",
                            "rawdesc": "Brief image description",
                            "start": [
                                139,
                                36
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "Attributes",
                            "finish": [
                                139,
                                46
                            ],
                            "name": "attr",
                            "rawdesc": "Attributes",
                            "start": [
                                139,
                                42
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates an Image inline element\n\n\n@*param* `caption` — List of inlines\n\n@*param* `src` — Path to the image\n\n@*param* `title` — Brief image description\n\n@*param* `attr` — Attributes",
                    "finish": [
                        139,
                        51
                    ],
                    "rawdesc": "Creates an Image inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Image"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Image(caption: pandoc.Inlines, src: string, title?: string, attr?: pandoc.Attr)\n  -> pandoc.Image"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    139,
                    21
                ],
                "name": "Image",
                "rawdesc": "Creates an Image inline element\n",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Image",
                "visible": "public"
            }
        ],
        "name": "pandoc.Image",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Image: alt text (list of inlines), target\n",
                            "finish": [
                                145,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Image: alt text (list of inlines), target\n",
                            "start": [
                                145,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Image"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        145,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Image"
                        }
                    ],
                    "start": [
                        145,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Image:clone()\n  -> pandoc.Image"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    145,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    145,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Image.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline element\n",
                "extends": [
                    {
                        "finish": [
                            7,
                            31
                        ],
                        "start": [
                            7,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    7,
                    31
                ],
                "rawdesc": "Inline element\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Inline",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "pandoc.Inline",
        "type": "type",
        "view": "pandoc.Inline"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                13,
                                8
                            ],
                            "name": "self",
                            "start": [
                                13,
                                8
                            ],
                            "type": "self",
                            "view": "unknown"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        13,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Inline"
                        }
                    ],
                    "start": [
                        13,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Inline:clone()\n  -> pandoc.Inline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    13,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    13,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Inline.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        22,
                        19
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        22,
                        17
                    ],
                    "type": "table",
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    22,
                    14
                ],
                "name": "Inlines",
                "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "start": [
                    22,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an inlines list \n\n\n@*param* `inlines` — Inline elements",
                "extends": {
                    "args": [
                        {
                            "desc": "Inline elements",
                            "finish": [
                                30,
                                31
                            ],
                            "name": "inlines",
                            "rawdesc": "Inline elements",
                            "start": [
                                30,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Create an inlines list \n\n\n@*param* `inlines` — Inline elements",
                    "finish": [
                        30,
                        36
                    ],
                    "rawdesc": "Create an inlines list \n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "start": [
                        30,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Inlines(inlines: any)\n  -> pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    30,
                    23
                ],
                "name": "Inlines",
                "rawdesc": "Create an inlines list \n",
                "start": [
                    30,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Inlines",
                "visible": "public"
            }
        ],
        "name": "pandoc.Inlines",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "extends": [
                    {
                        "finish": [
                            21,
                            38
                        ],
                        "start": [
                            21,
                            27
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.List"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    21,
                    38
                ],
                "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                "start": [
                    21,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Inlines",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                8
                            ],
                            "name": "self",
                            "start": [
                                36,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Element position",
                            "finish": [
                                36,
                                29
                            ],
                            "name": "index",
                            "rawdesc": "Element position",
                            "start": [
                                36,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "The default value that is returned if the index is out of range",
                            "finish": [
                                36,
                                38
                            ],
                            "name": "default",
                            "rawdesc": "The default value that is returned if the index is out of range",
                            "start": [
                                36,
                                31
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                    "finish": [
                        36,
                        43
                    ],
                    "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:at(index: integer, default?: any)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    36,
                    23
                ],
                "name": "at",
                "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                8
                            ],
                            "name": "self",
                            "start": [
                                42,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "finish": [
                        42,
                        32
                    ],
                    "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:clone()\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    42,
                    26
                ],
                "name": "clone",
                "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "start": [
                    42,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                8
                            ],
                            "name": "self",
                            "start": [
                                49,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "List to append",
                            "finish": [
                                49,
                                32
                            ],
                            "name": "list",
                            "rawdesc": "List to append",
                            "start": [
                                49,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                    "finish": [
                        49,
                        37
                    ],
                    "rawdesc": "Adds the given list to the end of this list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:extend(list: pandoc.List)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    49,
                    27
                ],
                "name": "extend",
                "rawdesc": "Adds the given list to the end of this list.\n",
                "start": [
                    49,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                8
                            ],
                            "name": "self",
                            "start": [
                                74,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                74,
                                32
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                74,
                                28
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        }
                    ],
                    "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                    "finish": [
                        74,
                        37
                    ],
                    "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:filter(pred: fun(x: any):boolean)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    74,
                    27
                ],
                "name": "filter",
                "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                "start": [
                    74,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                8
                            ],
                            "name": "self",
                            "start": [
                                57,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                57,
                                32
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                57,
                                26
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                57,
                                38
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                57,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                    "finish": [
                        57,
                        43
                    ],
                    "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                    "returns": [
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find(needle: any, init?: integer)\n  -> any\n  2. integer"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    57,
                    25
                ],
                "name": "find",
                "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                "start": [
                    57,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                66,
                                8
                            ],
                            "name": "self",
                            "start": [
                                66,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                66,
                                33
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                66,
                                29
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                66,
                                39
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                66,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                    "finish": [
                        66,
                        44
                    ],
                    "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                    "returns": [
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer|nil"
                        }
                    ],
                    "start": [
                        66,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find_if(pred: fun(x: any):boolean, init?: integer)\n  -> any\n  2. integer|nil"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    66,
                    28
                ],
                "name": "find_if",
                "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                "start": [
                    66,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                8
                            ],
                            "name": "self",
                            "start": [
                                84,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                84,
                                36
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                84,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                84,
                                42
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                84,
                                38
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                    "finish": [
                        84,
                        47
                    ],
                    "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                    "returns": [
                        {
                            "desc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "rawdesc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:includes(needle: any, init?: integer)\n  -> boolean"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    84,
                    29
                ],
                "name": "includes",
                "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                "start": [
                    84,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                8
                            ],
                            "name": "self",
                            "start": [
                                93,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                93,
                                33
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                93,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        93,
                        38
                    ],
                    "rawdesc": "Inserts element at end of list\n",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    93,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element at end of list\n",
                "start": [
                    93,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                101,
                                8
                            ],
                            "name": "self",
                            "start": [
                                101,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Index of the new value",
                            "finish": [
                                101,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Index of the new value",
                            "start": [
                                101,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                101,
                                38
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                101,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        101,
                        43
                    ],
                    "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(pos: integer, value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    101,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                "start": [
                    101,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                8
                            ],
                            "name": "self",
                            "start": [
                                115,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "finish": [
                                115,
                                30
                            ],
                            "name": "step",
                            "rawdesc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "start": [
                                115,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                    "finish": [
                        115,
                        35
                    ],
                    "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                    "returns": [
                        {
                            "desc": "Iterator function",
                            "rawdesc": "Iterator function",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:iter(step?: integer)\n  -> function"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    115,
                    25
                ],
                "name": "iter",
                "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                "start": [
                    115,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                122,
                                8
                            ],
                            "name": "self",
                            "start": [
                                122,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Function which is applied to all list items.",
                            "finish": [
                                122,
                                27
                            ],
                            "name": "fn",
                            "rawdesc": "Function which is applied to all list items.",
                            "start": [
                                122,
                                25
                            ],
                            "type": "local",
                            "view": "fun(x: any):any"
                        }
                    ],
                    "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                    "finish": [
                        122,
                        32
                    ],
                    "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        122,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:map(fn: fun(x: any):any)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    122,
                    24
                ],
                "name": "map",
                "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                "start": [
                    122,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                25,
                                8
                            ],
                            "name": "self",
                            "start": [
                                25,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "(Optional) `table` to initialize list from",
                            "finish": [
                                25,
                                30
                            ],
                            "name": "table",
                            "rawdesc": "(Optional) `table` to initialize list from",
                            "start": [
                                25,
                                25
                            ],
                            "type": "local",
                            "view": "(function|table)?"
                        }
                    ],
                    "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                    "finish": [
                        25,
                        35
                    ],
                    "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:new(table?: function|table)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    25,
                    24
                ],
                "name": "new",
                "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                "start": [
                    25,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                129,
                                8
                            ],
                            "name": "self",
                            "start": [
                                129,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "finish": [
                                129,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "start": [
                                129,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                    "finish": [
                        129,
                        36
                    ],
                    "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                    "returns": [
                        {
                            "desc": "The removed element",
                            "rawdesc": "The removed element",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        129,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:remove(pos?: integer)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    129,
                    27
                ],
                "name": "remove",
                "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                "start": [
                    129,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                144,
                                8
                            ],
                            "name": "self",
                            "start": [
                                144,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "finish": [
                                144,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                144,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: any, b: any):boolean)?"
                        }
                    ],
                    "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "finish": [
                        144,
                        35
                    ],
                    "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "start": [
                        144,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:sort(comp?: fun(a: any, b: any):boolean)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    144,
                    25
                ],
                "name": "sort",
                "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "start": [
                    144,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                8
                            ],
                            "name": "self",
                            "start": [
                                164,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                164,
                                36
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                164,
                                26
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                    "finish": [
                        164,
                        41
                    ],
                    "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                    "returns": [
                        {
                            "desc": "Filtered list",
                            "rawdesc": "Filtered list",
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:walk(lua_filter: table<string, function>)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    164,
                    25
                ],
                "name": "walk",
                "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                "start": [
                    164,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Inlines",
        "type": "type",
        "view": "pandoc.Inlines"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                "extends": {
                    "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                    "finish": [
                        285,
                        21
                    ],
                    "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                    "start": [
                        285,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.LineBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    285,
                    16
                ],
                "name": "LineBlock",
                "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                "start": [
                    285,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.LineBlock",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a line block element\n\n\n@*param* `content` — List of lines, each of which is a list of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of lines, each of which is a list of inlines",
                            "finish": [
                                292,
                                33
                            ],
                            "name": "content",
                            "rawdesc": "List of lines, each of which is a list of inlines",
                            "start": [
                                292,
                                26
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Creates a line block element\n\n\n@*param* `content` — List of lines, each of which is a list of inlines",
                    "finish": [
                        292,
                        38
                    ],
                    "rawdesc": "Creates a line block element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "start": [
                        292,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.LineBlock(content: pandoc.List)\n  -> pandoc.LineBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    292,
                    25
                ],
                "name": "LineBlock",
                "rawdesc": "Creates a line block element\n",
                "start": [
                    292,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.LineBlock",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBlock",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            281,
                            41
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            281,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    281,
                    41
                ],
                "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                "start": [
                    281,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.LineBlock",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "finish": [
                                298,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "start": [
                                298,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        298,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "start": [
                        298,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.LineBlock:clone()\n  -> pandoc.LineBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    298,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    298,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of lines, each of which is a list of inlines",
                "extends": {
                    "finish": [
                        282,
                        29
                    ],
                    "start": [
                        282,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                282,
                                29
                            ],
                            "start": [
                                282,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    282,
                    29
                ],
                "name": "content",
                "rawdesc": "List of lines, each of which is a list of inlines",
                "start": [
                    282,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        283,
                        23
                    ],
                    "start": [
                        283,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                283,
                                23
                            ],
                            "start": [
                                283,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"LineBlock\""
                        }
                    ],
                    "view": "\"LineBlock\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    283,
                    23
                ],
                "name": "t",
                "start": [
                    283,
                    10
                ],
                "type": "doc.field",
                "view": "\"LineBlock\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        284,
                        25
                    ],
                    "start": [
                        284,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                284,
                                25
                            ],
                            "start": [
                                284,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"LineBlock\""
                        }
                    ],
                    "view": "\"LineBlock\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    284,
                    25
                ],
                "name": "tag",
                "start": [
                    284,
                    10
                ],
                "type": "doc.field",
                "view": "\"LineBlock\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "finish": [
                                305,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "start": [
                                305,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.LineBlock"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                305,
                                41
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                305,
                                31
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        305,
                        46
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "start": [
                        305,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.LineBlock:walk(lua_filter: table<string, function>)\n  -> pandoc.LineBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    305,
                    30
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    305,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBlock",
        "type": "type",
        "view": "pandoc.LineBlock"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "finish": [
                                298,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "start": [
                                298,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        298,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "start": [
                        298,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.LineBlock:clone()\n  -> pandoc.LineBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    298,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    298,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBlock.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "finish": [
                                305,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A line block, i.e. a list of lines, each separated from the next by a newline.\n",
                            "start": [
                                305,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.LineBlock"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                305,
                                41
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                305,
                                31
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        305,
                        46
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBlock"
                        }
                    ],
                    "start": [
                        305,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.LineBlock:walk(lua_filter: table<string, function>)\n  -> pandoc.LineBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    305,
                    30
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    305,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBlock.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Hard line break\n",
                "extends": {
                    "desc": "Hard line break\n",
                    "finish": [
                        156,
                        21
                    ],
                    "rawdesc": "Hard line break\n",
                    "start": [
                        156,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.LineBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    156,
                    16
                ],
                "name": "LineBreak",
                "rawdesc": "Hard line break\n",
                "start": [
                    156,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.LineBreak",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a hard line break\n",
                "extends": {
                    "args": [],
                    "desc": "Create a hard line break\n",
                    "finish": [
                        162,
                        31
                    ],
                    "rawdesc": "Create a hard line break\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBreak"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.LineBreak()\n  -> pandoc.LineBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    162,
                    25
                ],
                "name": "LineBreak",
                "rawdesc": "Create a hard line break\n",
                "start": [
                    162,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.LineBreak",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBreak",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Hard line break\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            153,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            153,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    153,
                    42
                ],
                "rawdesc": "Hard line break\n",
                "start": [
                    153,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.LineBreak",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Hard line break\n",
                            "finish": [
                                168,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Hard line break\n",
                            "start": [
                                168,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.LineBreak"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        168,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBreak"
                        }
                    ],
                    "start": [
                        168,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.LineBreak:clone()\n  -> pandoc.LineBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    168,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    168,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        154,
                        23
                    ],
                    "start": [
                        154,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                154,
                                23
                            ],
                            "start": [
                                154,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"LineBreak\""
                        }
                    ],
                    "view": "\"LineBreak\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    154,
                    23
                ],
                "name": "t",
                "start": [
                    154,
                    10
                ],
                "type": "doc.field",
                "view": "\"LineBreak\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        155,
                        25
                    ],
                    "start": [
                        155,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                155,
                                25
                            ],
                            "start": [
                                155,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"LineBreak\""
                        }
                    ],
                    "view": "\"LineBreak\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    155,
                    25
                ],
                "name": "tag",
                "start": [
                    155,
                    10
                ],
                "type": "doc.field",
                "view": "\"LineBreak\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBreak",
        "type": "type",
        "view": "pandoc.LineBreak"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Hard line break\n",
                            "finish": [
                                168,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Hard line break\n",
                            "start": [
                                168,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.LineBreak"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        168,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.LineBreak"
                        }
                    ],
                    "start": [
                        168,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.LineBreak:clone()\n  -> pandoc.LineBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    168,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    168,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.LineBreak.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Hyperlink: alt text (list of inlines), target\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            175,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            175,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    175,
                    37
                ],
                "rawdesc": "Hyperlink: alt text (list of inlines), target\n",
                "start": [
                    175,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Link",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        176,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        176,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                176,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                176,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    176,
                    26
                ],
                "name": "attr",
                "rawdesc": "Attributes",
                "start": [
                    176,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        179,
                        41
                    ],
                    "start": [
                        179,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                179,
                                41
                            ],
                            "start": [
                                179,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    179,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    179,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        178,
                        29
                    ],
                    "start": [
                        178,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                178,
                                29
                            ],
                            "start": [
                                178,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    178,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    178,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Hyperlink: alt text (list of inlines), target\n",
                            "finish": [
                                201,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Hyperlink: alt text (list of inlines), target\n",
                            "start": [
                                201,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Link"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        201,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Link"
                        }
                    ],
                    "start": [
                        201,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Link:clone()\n  -> pandoc.Link"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    201,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    201,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Text for this link (list of inlines)",
                "extends": {
                    "finish": [
                        180,
                        29
                    ],
                    "start": [
                        180,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                180,
                                29
                            ],
                            "start": [
                                180,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    180,
                    29
                ],
                "name": "content",
                "rawdesc": "Text for this link (list of inlines)",
                "start": [
                    180,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        177,
                        27
                    ],
                    "start": [
                        177,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                177,
                                27
                            ],
                            "start": [
                                177,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    177,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    177,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        183,
                        18
                    ],
                    "start": [
                        183,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                183,
                                18
                            ],
                            "start": [
                                183,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Link\""
                        }
                    ],
                    "view": "\"Link\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    183,
                    18
                ],
                "name": "t",
                "start": [
                    183,
                    10
                ],
                "type": "doc.field",
                "view": "\"Link\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        184,
                        20
                    ],
                    "start": [
                        184,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                184,
                                20
                            ],
                            "start": [
                                184,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Link\""
                        }
                    ],
                    "view": "\"Link\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    184,
                    20
                ],
                "name": "tag",
                "start": [
                    184,
                    10
                ],
                "type": "doc.field",
                "view": "\"Link\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "The link target",
                "extends": {
                    "finish": [
                        181,
                        23
                    ],
                    "start": [
                        181,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                181,
                                23
                            ],
                            "start": [
                                181,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    181,
                    23
                ],
                "name": "target",
                "rawdesc": "The link target",
                "start": [
                    181,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Brief link description",
                "extends": {
                    "finish": [
                        182,
                        22
                    ],
                    "start": [
                        182,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                182,
                                22
                            ],
                            "start": [
                                182,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    182,
                    22
                ],
                "name": "title",
                "rawdesc": "Brief link description",
                "start": [
                    182,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Link",
        "type": "type",
        "view": "pandoc.Link"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Hyperlink: alt text (list of inlines), target\n",
                "extends": {
                    "desc": "Hyperlink: alt text (list of inlines), target\n",
                    "finish": [
                        185,
                        16
                    ],
                    "rawdesc": "Hyperlink: alt text (list of inlines), target\n",
                    "start": [
                        185,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Link"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    185,
                    11
                ],
                "name": "Link",
                "rawdesc": "Hyperlink: alt text (list of inlines), target\n",
                "start": [
                    185,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Link",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a Link inline element\n\n\n@*param* `content` — Text for this link\n\n@*param* `target` — The link target\n\n@*param* `title` — Brief link description\n\n@*param* `attr` — Attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Text for this link",
                            "finish": [
                                195,
                                28
                            ],
                            "name": "content",
                            "rawdesc": "Text for this link",
                            "start": [
                                195,
                                21
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        },
                        {
                            "desc": "The link target",
                            "finish": [
                                195,
                                36
                            ],
                            "name": "target",
                            "rawdesc": "The link target",
                            "start": [
                                195,
                                30
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Brief link description",
                            "finish": [
                                195,
                                43
                            ],
                            "name": "title",
                            "rawdesc": "Brief link description",
                            "start": [
                                195,
                                38
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "Attributes",
                            "finish": [
                                195,
                                49
                            ],
                            "name": "attr",
                            "rawdesc": "Attributes",
                            "start": [
                                195,
                                45
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a Link inline element\n\n\n@*param* `content` — Text for this link\n\n@*param* `target` — The link target\n\n@*param* `title` — Brief link description\n\n@*param* `attr` — Attributes",
                    "finish": [
                        195,
                        54
                    ],
                    "rawdesc": "Creates a Link inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Link"
                        }
                    ],
                    "start": [
                        195,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Link(content: pandoc.Inlines, target: string, title?: string, attr?: pandoc.Attr)\n  -> pandoc.Link"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    195,
                    20
                ],
                "name": "Link",
                "rawdesc": "Creates a Link inline element\n",
                "start": [
                    195,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Link",
                "visible": "public"
            }
        ],
        "name": "pandoc.Link",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Hyperlink: alt text (list of inlines), target\n",
                            "finish": [
                                201,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Hyperlink: alt text (list of inlines), target\n",
                            "start": [
                                201,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Link"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        201,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Link"
                        }
                    ],
                    "start": [
                        201,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Link:clone()\n  -> pandoc.Link"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    201,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    201,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Link.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        16
                    ],
                    "start": [
                        3,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    3,
                    11
                ],
                "name": "List",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                "extends": {
                    "args": [
                        {
                            "desc": "(Optional) `table` to initialize list from",
                            "finish": [
                                14,
                                26
                            ],
                            "name": "table",
                            "rawdesc": "(Optional) `table` to initialize list from",
                            "start": [
                                14,
                                21
                            ],
                            "type": "local",
                            "view": "(function|table)?"
                        }
                    ],
                    "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                    "finish": [
                        14,
                        31
                    ],
                    "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        14,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.List(table?: function|table)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    14,
                    20
                ],
                "name": "List",
                "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                "start": [
                    14,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.List",
                "visible": "public"
            }
        ],
        "name": "pandoc.List",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "pandoc/List.lua",
                "finish": [
                    2,
                    21
                ],
                "start": [
                    2,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.List",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                8
                            ],
                            "name": "self",
                            "start": [
                                36,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Element position",
                            "finish": [
                                36,
                                29
                            ],
                            "name": "index",
                            "rawdesc": "Element position",
                            "start": [
                                36,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "The default value that is returned if the index is out of range",
                            "finish": [
                                36,
                                38
                            ],
                            "name": "default",
                            "rawdesc": "The default value that is returned if the index is out of range",
                            "start": [
                                36,
                                31
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                    "finish": [
                        36,
                        43
                    ],
                    "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:at(index: integer, default?: any)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    36,
                    23
                ],
                "name": "at",
                "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                8
                            ],
                            "name": "self",
                            "start": [
                                42,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "finish": [
                        42,
                        32
                    ],
                    "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:clone()\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    42,
                    26
                ],
                "name": "clone",
                "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "start": [
                    42,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                8
                            ],
                            "name": "self",
                            "start": [
                                49,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "List to append",
                            "finish": [
                                49,
                                32
                            ],
                            "name": "list",
                            "rawdesc": "List to append",
                            "start": [
                                49,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                    "finish": [
                        49,
                        37
                    ],
                    "rawdesc": "Adds the given list to the end of this list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:extend(list: pandoc.List)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    49,
                    27
                ],
                "name": "extend",
                "rawdesc": "Adds the given list to the end of this list.\n",
                "start": [
                    49,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                8
                            ],
                            "name": "self",
                            "start": [
                                74,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                74,
                                32
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                74,
                                28
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        }
                    ],
                    "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                    "finish": [
                        74,
                        37
                    ],
                    "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:filter(pred: fun(x: any):boolean)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    74,
                    27
                ],
                "name": "filter",
                "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                "start": [
                    74,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                8
                            ],
                            "name": "self",
                            "start": [
                                57,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                57,
                                32
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                57,
                                26
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                57,
                                38
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                57,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                    "finish": [
                        57,
                        43
                    ],
                    "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                    "returns": [
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find(needle: any, init?: integer)\n  -> any\n  2. integer"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    57,
                    25
                ],
                "name": "find",
                "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                "start": [
                    57,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                66,
                                8
                            ],
                            "name": "self",
                            "start": [
                                66,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                66,
                                33
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                66,
                                29
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                66,
                                39
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                66,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                    "finish": [
                        66,
                        44
                    ],
                    "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                    "returns": [
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer|nil"
                        }
                    ],
                    "start": [
                        66,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find_if(pred: fun(x: any):boolean, init?: integer)\n  -> any\n  2. integer|nil"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    66,
                    28
                ],
                "name": "find_if",
                "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                "start": [
                    66,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                8
                            ],
                            "name": "self",
                            "start": [
                                84,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                84,
                                36
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                84,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                84,
                                42
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                84,
                                38
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                    "finish": [
                        84,
                        47
                    ],
                    "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                    "returns": [
                        {
                            "desc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "rawdesc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:includes(needle: any, init?: integer)\n  -> boolean"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    84,
                    29
                ],
                "name": "includes",
                "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                "start": [
                    84,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                8
                            ],
                            "name": "self",
                            "start": [
                                93,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                93,
                                33
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                93,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        93,
                        38
                    ],
                    "rawdesc": "Inserts element at end of list\n",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    93,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element at end of list\n",
                "start": [
                    93,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                101,
                                8
                            ],
                            "name": "self",
                            "start": [
                                101,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Index of the new value",
                            "finish": [
                                101,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Index of the new value",
                            "start": [
                                101,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                101,
                                38
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                101,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        101,
                        43
                    ],
                    "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(pos: integer, value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    101,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                "start": [
                    101,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                8
                            ],
                            "name": "self",
                            "start": [
                                115,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "finish": [
                                115,
                                30
                            ],
                            "name": "step",
                            "rawdesc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "start": [
                                115,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                    "finish": [
                        115,
                        35
                    ],
                    "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                    "returns": [
                        {
                            "desc": "Iterator function",
                            "rawdesc": "Iterator function",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:iter(step?: integer)\n  -> function"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    115,
                    25
                ],
                "name": "iter",
                "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                "start": [
                    115,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                122,
                                8
                            ],
                            "name": "self",
                            "start": [
                                122,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Function which is applied to all list items.",
                            "finish": [
                                122,
                                27
                            ],
                            "name": "fn",
                            "rawdesc": "Function which is applied to all list items.",
                            "start": [
                                122,
                                25
                            ],
                            "type": "local",
                            "view": "fun(x: any):any"
                        }
                    ],
                    "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                    "finish": [
                        122,
                        32
                    ],
                    "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        122,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:map(fn: fun(x: any):any)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    122,
                    24
                ],
                "name": "map",
                "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                "start": [
                    122,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                25,
                                8
                            ],
                            "name": "self",
                            "start": [
                                25,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "(Optional) `table` to initialize list from",
                            "finish": [
                                25,
                                30
                            ],
                            "name": "table",
                            "rawdesc": "(Optional) `table` to initialize list from",
                            "start": [
                                25,
                                25
                            ],
                            "type": "local",
                            "view": "(function|table)?"
                        }
                    ],
                    "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                    "finish": [
                        25,
                        35
                    ],
                    "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:new(table?: function|table)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    25,
                    24
                ],
                "name": "new",
                "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                "start": [
                    25,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                129,
                                8
                            ],
                            "name": "self",
                            "start": [
                                129,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "finish": [
                                129,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "start": [
                                129,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                    "finish": [
                        129,
                        36
                    ],
                    "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                    "returns": [
                        {
                            "desc": "The removed element",
                            "rawdesc": "The removed element",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        129,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:remove(pos?: integer)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    129,
                    27
                ],
                "name": "remove",
                "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                "start": [
                    129,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                144,
                                8
                            ],
                            "name": "self",
                            "start": [
                                144,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "finish": [
                                144,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                144,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: any, b: any):boolean)?"
                        }
                    ],
                    "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "finish": [
                        144,
                        35
                    ],
                    "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "start": [
                        144,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:sort(comp?: fun(a: any, b: any):boolean)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    144,
                    25
                ],
                "name": "sort",
                "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "start": [
                    144,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                8
                            ],
                            "name": "self",
                            "start": [
                                164,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                164,
                                36
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                164,
                                26
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                    "finish": [
                        164,
                        41
                    ],
                    "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                    "returns": [
                        {
                            "desc": "Filtered list",
                            "rawdesc": "Filtered list",
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:walk(lua_filter: table<string, function>)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    164,
                    25
                ],
                "name": "walk",
                "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                "start": [
                    164,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List",
        "type": "type",
        "view": "pandoc.List"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                8
                            ],
                            "name": "self",
                            "start": [
                                36,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Element position",
                            "finish": [
                                36,
                                29
                            ],
                            "name": "index",
                            "rawdesc": "Element position",
                            "start": [
                                36,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "The default value that is returned if the index is out of range",
                            "finish": [
                                36,
                                38
                            ],
                            "name": "default",
                            "rawdesc": "The default value that is returned if the index is out of range",
                            "start": [
                                36,
                                31
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n\n\n@*param* `index` — Element position\n\n@*param* `default` — The default value that is returned if the index is out of range",
                    "finish": [
                        36,
                        43
                    ],
                    "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:at(index: integer, default?: any)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    36,
                    23
                ],
                "name": "at",
                "rawdesc": "Returns the element at the given index, or `default` if the list\ncontains no item at the given position. \n\n  Negative integers count back from the last item in the list.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.at",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                8
                            ],
                            "name": "self",
                            "start": [
                                42,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "finish": [
                        42,
                        32
                    ],
                    "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:clone()\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    42,
                    26
                ],
                "name": "clone",
                "rawdesc": "Returns a (shallow) copy of the list. (To get a deep copy of the list, use walk with an empty filter.)\n",
                "start": [
                    42,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                49,
                                8
                            ],
                            "name": "self",
                            "start": [
                                49,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "List to append",
                            "finish": [
                                49,
                                32
                            ],
                            "name": "list",
                            "rawdesc": "List to append",
                            "start": [
                                49,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Adds the given list to the end of this list.\n\n\n@*param* `list` — List to append",
                    "finish": [
                        49,
                        37
                    ],
                    "rawdesc": "Adds the given list to the end of this list.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:extend(list: pandoc.List)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    49,
                    27
                ],
                "name": "extend",
                "rawdesc": "Adds the given list to the end of this list.\n",
                "start": [
                    49,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.extend",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                74,
                                8
                            ],
                            "name": "self",
                            "start": [
                                74,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                74,
                                32
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                74,
                                28
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        }
                    ],
                    "desc": "Returns a new list containing all items satisfying a given condition.\n\n\n@*param* `pred` — Condition items must satisfy",
                    "finish": [
                        74,
                        37
                    ],
                    "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:filter(pred: fun(x: any):boolean)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    74,
                    27
                ],
                "name": "filter",
                "rawdesc": "Returns a new list containing all items satisfying a given condition.\n",
                "start": [
                    74,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.filter",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                8
                            ],
                            "name": "self",
                            "start": [
                                57,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                57,
                                32
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                57,
                                26
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                57,
                                38
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                57,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first occurrence of the given item.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item equal to the needle, or `nil` if no such item exists.",
                    "finish": [
                        57,
                        43
                    ],
                    "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                    "returns": [
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item equal to the needle, or `nil` if no such item exists.",
                            "rawdesc": "First item equal to the needle, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find(needle: any, init?: integer)\n  -> any\n  2. integer"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    57,
                    25
                ],
                "name": "find",
                "rawdesc": "Returns the value and index of the first occurrence of the given item.\n",
                "start": [
                    57,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.find",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                66,
                                8
                            ],
                            "name": "self",
                            "start": [
                                66,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Condition items must satisfy",
                            "finish": [
                                66,
                                33
                            ],
                            "name": "pred",
                            "rawdesc": "Condition items must satisfy",
                            "start": [
                                66,
                                29
                            ],
                            "type": "local",
                            "view": "fun(x: any):boolean"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                66,
                                39
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                66,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns the value and index of the first element for which the predicate holds true.\n\n\n@*param* `pred` — Condition items must satisfy\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — First item for which `pred` succeeds, or `nil` if no such item exists.",
                    "finish": [
                        66,
                        44
                    ],
                    "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                    "returns": [
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "desc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "rawdesc": "First item for which `pred` succeeds, or `nil` if no such item exists.",
                            "type": "function.return",
                            "view": "integer|nil"
                        }
                    ],
                    "start": [
                        66,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:find_if(pred: fun(x: any):boolean, init?: integer)\n  -> any\n  2. integer|nil"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    66,
                    28
                ],
                "name": "find_if",
                "rawdesc": "Returns the value and index of the first element for which the predicate holds true.\n",
                "start": [
                    66,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.find_if",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                84,
                                8
                            ],
                            "name": "self",
                            "start": [
                                84,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Item to search for",
                            "finish": [
                                84,
                                36
                            ],
                            "name": "needle",
                            "rawdesc": "Item to search for",
                            "start": [
                                84,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "(Optional) Index at which the search is started",
                            "finish": [
                                84,
                                42
                            ],
                            "name": "init",
                            "rawdesc": "(Optional) Index at which the search is started",
                            "start": [
                                84,
                                38
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Checks if the list has an item equal to the given needle.\n\n\n@*param* `needle` — Item to search for\n\n@*param* `init` — (Optional) Index at which the search is started\n\n@*return* — `true` if a list item is equal to the `needle`, `false` otherwise",
                    "finish": [
                        84,
                        47
                    ],
                    "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                    "returns": [
                        {
                            "desc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "rawdesc": "`true` if a list item is equal to the `needle`, `false` otherwise",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:includes(needle: any, init?: integer)\n  -> boolean"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    84,
                    29
                ],
                "name": "includes",
                "rawdesc": "Checks if the list has an item equal to the given needle.\n",
                "start": [
                    84,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.includes",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                8
                            ],
                            "name": "self",
                            "start": [
                                93,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                93,
                                33
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                93,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element at end of list\n\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        93,
                        38
                    ],
                    "rawdesc": "Inserts element at end of list\n",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    93,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element at end of list\n",
                "start": [
                    93,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                101,
                                8
                            ],
                            "name": "self",
                            "start": [
                                101,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Index of the new value",
                            "finish": [
                                101,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Index of the new value",
                            "start": [
                                101,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Value to insert into the list",
                            "finish": [
                                101,
                                38
                            ],
                            "name": "value",
                            "rawdesc": "Value to insert into the list",
                            "start": [
                                101,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n\n\n@*param* `pos` — Index of the new value\n\n@*param* `value` — Value to insert into the list",
                    "finish": [
                        101,
                        43
                    ],
                    "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:insert(pos: integer, value: any)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    101,
                    27
                ],
                "name": "insert",
                "rawdesc": "Inserts element value at position `pos` in list, shifting elements to the next-greater index if necessary.\n",
                "start": [
                    101,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.insert",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                115,
                                8
                            ],
                            "name": "self",
                            "start": [
                                115,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "finish": [
                                115,
                                30
                            ],
                            "name": "step",
                            "rawdesc": "Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1",
                            "start": [
                                115,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n\n\n@*param* `step` — Step size for iteration. Negative step sizes cause the iterator to start from the end of the list. Defaults to 1\n\n@*return* — Iterator function",
                    "finish": [
                        115,
                        35
                    ],
                    "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                    "returns": [
                        {
                            "desc": "Iterator function",
                            "rawdesc": "Iterator function",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        115,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:iter(step?: integer)\n  -> function"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    115,
                    25
                ],
                "name": "iter",
                "rawdesc": "Create an iterator over the list. The resulting function returns the\nnext value each time it is called.\n\nUsage:\n\n    for item in List{1, 1, 2, 3, 5, 8}:iter() do\n      -- process item\n    end\n",
                "start": [
                    115,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.iter",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                122,
                                8
                            ],
                            "name": "self",
                            "start": [
                                122,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Function which is applied to all list items.",
                            "finish": [
                                122,
                                27
                            ],
                            "name": "fn",
                            "rawdesc": "Function which is applied to all list items.",
                            "start": [
                                122,
                                25
                            ],
                            "type": "local",
                            "view": "fun(x: any):any"
                        }
                    ],
                    "desc": "Returns a copy of the current list by applying the given function to all elements.\n\n\n@*param* `fn` — Function which is applied to all list items.",
                    "finish": [
                        122,
                        32
                    ],
                    "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        122,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:map(fn: fun(x: any):any)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    122,
                    24
                ],
                "name": "map",
                "rawdesc": "Returns a copy of the current list by applying the given function to all elements.\n",
                "start": [
                    122,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.map",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                25,
                                8
                            ],
                            "name": "self",
                            "start": [
                                25,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "(Optional) `table` to initialize list from",
                            "finish": [
                                25,
                                30
                            ],
                            "name": "table",
                            "rawdesc": "(Optional) `table` to initialize list from",
                            "start": [
                                25,
                                25
                            ],
                            "type": "local",
                            "view": "(function|table)?"
                        }
                    ],
                    "desc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n\n\n@*param* `table` — (Optional) `table` to initialize list from",
                    "finish": [
                        25,
                        35
                    ],
                    "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:new(table?: function|table)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    25,
                    24
                ],
                "name": "new",
                "rawdesc": "Create a new List. If the optional argument `table` is given,\nset the metatable of that value to `pandoc.List`.\n\n  The function also accepts an iterator, in which case it creates a\nnew list from the return values of the iterator function.\n",
                "start": [
                    25,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.new",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                129,
                                8
                            ],
                            "name": "self",
                            "start": [
                                129,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "finish": [
                                129,
                                31
                            ],
                            "name": "pos",
                            "rawdesc": "Position of the list value that will be removed; defaults to the index of the last element",
                            "start": [
                                129,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Removes the element at position `pos`, returning the value of the removed element.\n\n\n@*param* `pos` — Position of the list value that will be removed; defaults to the index of the last element\n\n@*return* — The removed element",
                    "finish": [
                        129,
                        36
                    ],
                    "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                    "returns": [
                        {
                            "desc": "The removed element",
                            "rawdesc": "The removed element",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        129,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:remove(pos?: integer)\n  -> any"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    129,
                    27
                ],
                "name": "remove",
                "rawdesc": "Removes the element at position `pos`, returning the value of the removed element.\n",
                "start": [
                    129,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.remove",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                144,
                                8
                            ],
                            "name": "self",
                            "start": [
                                144,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "finish": [
                                144,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                144,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: any, b: any):boolean)?"
                        }
                    ],
                    "desc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "finish": [
                        144,
                        35
                    ],
                    "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                    "start": [
                        144,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:sort(comp?: fun(a: any, b: any):boolean)"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    144,
                    25
                ],
                "name": "sort",
                "rawdesc": "Sorts list elements in a given order, in-place. If comp is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before the second in the final order\n(so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard\nLua operator < is used instead.\n\nNote that the comp function must define a strict partial order over the elements in the list; that is, it\nmust be asymmetric and transitive. Otherwise, no valid sort may be possible.\n\nThe sort algorithm is not stable: elements considered equal by the given order may have their relative\npositions changed by the sort.\n",
                "start": [
                    144,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.sort",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                164,
                                8
                            ],
                            "name": "self",
                            "start": [
                                164,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                164,
                                36
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                164,
                                26
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered list",
                    "finish": [
                        164,
                        41
                    ],
                    "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                    "returns": [
                        {
                            "desc": "Filtered list",
                            "rawdesc": "Filtered list",
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        164,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.List:walk(lua_filter: table<string, function>)\n  -> pandoc.List"
                },
                "file": "pandoc/List.lua",
                "finish": [
                    164,
                    25
                ],
                "name": "walk",
                "rawdesc": "Applies a Lua filter to a list of `Blocks` or `Inlines`. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nReturns a (deep) copy on which the filter has been applied: the original\nlist is left untouched.\n\nNote that this method is only available for lists of blocks and inilines.\n\nUsage:\n\n    -- returns `pandoc.Blocks{pandoc.Para('Salve!')}`\n    return pandoc.Blocks{pandoc.Plain('Salve!)}:walk {\n      Plain = function (p) return pandoc.Para(p.content) end,\n    }\n",
                "start": [
                    164,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.List.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List attributes\n",
                "extends": {
                    "desc": "List attributes\n",
                    "finish": [
                        145,
                        26
                    ],
                    "rawdesc": "List attributes\n",
                    "start": [
                        145,
                        24
                    ],
                    "type": "table",
                    "view": "pandoc.ListAttributes"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    145,
                    21
                ],
                "name": "ListAttributes",
                "rawdesc": "List attributes\n",
                "start": [
                    145,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.ListAttributes",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a set of list attributes\n\n\n@*param* `start` — Number of the first list item\n\n@*param* `style` — Style used for list numbers\n\n@*param* `delimiter` — Delimiter of list numbers\n\n```lua\nstyle:\n    | 'DefaultStyle'\n    | 'Example'\n    | 'Decimal'\n    | 'LowerRoman'\n    | 'UpperRoman'\n    | 'LowerAlpha'\n    | 'UpperAlpha'\n\ndelimiter:\n    | 'DefaultDelim'\n    | 'Period'\n    | 'OneParen'\n    | 'TwoParens'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Number of the first list item",
                            "finish": [
                                157,
                                36
                            ],
                            "name": "start",
                            "rawdesc": "Number of the first list item",
                            "start": [
                                157,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "Style used for list numbers",
                            "finish": [
                                157,
                                43
                            ],
                            "name": "style",
                            "rawdesc": "Style used for list numbers",
                            "start": [
                                157,
                                38
                            ],
                            "type": "local",
                            "view": "('Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2))?"
                        },
                        {
                            "desc": "Delimiter of list numbers",
                            "finish": [
                                157,
                                54
                            ],
                            "name": "delimiter",
                            "rawdesc": "Delimiter of list numbers",
                            "start": [
                                157,
                                45
                            ],
                            "type": "local",
                            "view": "('DefaultDelim'|'OneParen'|'Period'|'TwoParens')?"
                        }
                    ],
                    "desc": "Create a set of list attributes\n\n\n@*param* `start` — Number of the first list item\n\n@*param* `style` — Style used for list numbers\n\n@*param* `delimiter` — Delimiter of list numbers\n\n```lua\nstyle:\n    | 'DefaultStyle'\n    | 'Example'\n    | 'Decimal'\n    | 'LowerRoman'\n    | 'UpperRoman'\n    | 'LowerAlpha'\n    | 'UpperAlpha'\n\ndelimiter:\n    | 'DefaultDelim'\n    | 'Period'\n    | 'OneParen'\n    | 'TwoParens'\n```",
                    "finish": [
                        157,
                        59
                    ],
                    "rawdesc": "Create a set of list attributes\n\n\n```lua\nstyle:\n    | 'DefaultStyle'\n    | 'Example'\n    | 'Decimal'\n    | 'LowerRoman'\n    | 'UpperRoman'\n    | 'LowerAlpha'\n    | 'UpperAlpha'\n\ndelimiter:\n    | 'DefaultDelim'\n    | 'Period'\n    | 'OneParen'\n    | 'TwoParens'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.ListAttributes"
                        }
                    ],
                    "start": [
                        157,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.ListAttributes(start?: integer, style?: 'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2), delimiter?: 'DefaultDelim'|'OneParen'|'Period'|'TwoParens')\n  -> pandoc.ListAttributes"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    157,
                    30
                ],
                "name": "ListAttributes",
                "rawdesc": "Create a set of list attributes\n\n\n```lua\nstyle:\n    | 'DefaultStyle'\n    | 'Example'\n    | 'Decimal'\n    | 'LowerRoman'\n    | 'UpperRoman'\n    | 'LowerAlpha'\n    | 'UpperAlpha'\n\ndelimiter:\n    | 'DefaultDelim'\n    | 'Period'\n    | 'OneParen'\n    | 'TwoParens'\n```",
                "start": [
                    157,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.ListAttributes",
                "visible": "public"
            }
        ],
        "name": "pandoc.ListAttributes",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List attributes\n",
                "file": "pandoc/components.lua",
                "finish": [
                    141,
                    31
                ],
                "rawdesc": "List attributes\n",
                "start": [
                    141,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.ListAttributes",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "List attributes\n",
                            "finish": [
                                163,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "List attributes\n",
                            "start": [
                                163,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.ListAttributes"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        163,
                        42
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.ListAttributes"
                        }
                    ],
                    "start": [
                        163,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.ListAttributes:clone()\n  -> pandoc.ListAttributes"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    163,
                    36
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    163,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Delimiter of list numbers",
                "extends": {
                    "finish": [
                        144,
                        34
                    ],
                    "start": [
                        144,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                144,
                                34
                            ],
                            "start": [
                                144,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'"
                        }
                    ],
                    "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    144,
                    34
                ],
                "name": "delimiter",
                "rawdesc": "Delimiter of list numbers",
                "start": [
                    144,
                    10
                ],
                "type": "doc.field",
                "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number of the first list item",
                "extends": {
                    "finish": [
                        142,
                        23
                    ],
                    "start": [
                        142,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                142,
                                23
                            ],
                            "start": [
                                142,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    142,
                    23
                ],
                "name": "start",
                "rawdesc": "Number of the first list item",
                "start": [
                    142,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Style used for list numbers",
                "extends": {
                    "finish": [
                        143,
                        26
                    ],
                    "start": [
                        143,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                143,
                                26
                            ],
                            "start": [
                                143,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)"
                        }
                    ],
                    "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    143,
                    26
                ],
                "name": "style",
                "rawdesc": "Style used for list numbers",
                "start": [
                    143,
                    10
                ],
                "type": "doc.field",
                "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)",
                "visible": "public"
            }
        ],
        "name": "pandoc.ListAttributes",
        "type": "type",
        "view": "pandoc.ListAttributes"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "List attributes\n",
                            "finish": [
                                163,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "List attributes\n",
                            "start": [
                                163,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.ListAttributes"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        163,
                        42
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.ListAttributes"
                        }
                    ],
                    "start": [
                        163,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.ListAttributes:clone()\n  -> pandoc.ListAttributes"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    163,
                    36
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    163,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.ListAttributes.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A pandoc log message. Objects have no fields, but can be converted to a string via `tostring`.\n",
                "file": "pandoc/state.lua",
                "finish": [
                    19,
                    27
                ],
                "rawdesc": "A pandoc log message. Objects have no fields, but can be converted to a string via `tostring`.\n",
                "start": [
                    19,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.LogMessage",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "pandoc.LogMessage",
        "type": "type",
        "view": "pandoc.LogMessage"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A pandoc log message. Objects have no fields, but can be converted to a string via `tostring`.\n",
                "extends": {
                    "desc": "A pandoc log message. Objects have no fields, but can be converted to a string via `tostring`.\n",
                    "finish": [
                        20,
                        22
                    ],
                    "rawdesc": "A pandoc log message. Objects have no fields, but can be converted to a string via `tostring`.\n",
                    "start": [
                        20,
                        20
                    ],
                    "type": "table",
                    "view": "pandoc.LogMessage"
                },
                "file": "pandoc/state.lua",
                "finish": [
                    20,
                    17
                ],
                "name": "LogMessage",
                "rawdesc": "A pandoc log message. Objects have no fields, but can be converted to a string via `tostring`.\n",
                "start": [
                    20,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.LogMessage",
                "visible": "public"
            }
        ],
        "name": "pandoc.LogMessage",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List are numbered using lower-case alphabetic characters.\n",
                "extends": {
                    "finish": [
                        85,
                        32
                    ],
                    "start": [
                        85,
                        20
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    85,
                    17
                ],
                "name": "LowerAlpha",
                "rawdesc": "List are numbered using lower-case alphabetic characters.\n",
                "start": [
                    85,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.LowerAlpha",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List are numbered using lower-case roman numerals.\n",
                "extends": {
                    "finish": [
                        75,
                        32
                    ],
                    "start": [
                        75,
                        20
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    75,
                    17
                ],
                "name": "LowerRoman",
                "rawdesc": "List are numbered using lower-case roman numerals.\n",
                "start": [
                    75,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.LowerRoman",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "TeX math (literal)\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            209,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            209,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    209,
                    37
                ],
                "rawdesc": "TeX math (literal)\n",
                "start": [
                    209,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Math",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "TeX math (literal)\n",
                            "finish": [
                                228,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "TeX math (literal)\n",
                            "start": [
                                228,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Math"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        228,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Math"
                        }
                    ],
                    "start": [
                        228,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Math:clone()\n  -> pandoc.Math"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    228,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    228,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Specifier determining whether the math content should be shown inline (InlineMath) or on a separate line (DisplayMath)",
                "extends": {
                    "finish": [
                        210,
                        28
                    ],
                    "start": [
                        210,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                210,
                                28
                            ],
                            "start": [
                                210,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "'DisplayMath'|'InlineMath'"
                        }
                    ],
                    "view": "'DisplayMath'|'InlineMath'"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    210,
                    28
                ],
                "name": "mathtype",
                "rawdesc": "Specifier determining whether the math content should be shown inline (InlineMath) or on a separate line (DisplayMath)",
                "start": [
                    210,
                    10
                ],
                "type": "doc.field",
                "view": "'DisplayMath'|'InlineMath'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        212,
                        18
                    ],
                    "start": [
                        212,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                212,
                                18
                            ],
                            "start": [
                                212,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Math\""
                        }
                    ],
                    "view": "\"Math\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    212,
                    18
                ],
                "name": "t",
                "start": [
                    212,
                    10
                ],
                "type": "doc.field",
                "view": "\"Math\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        213,
                        20
                    ],
                    "start": [
                        213,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                213,
                                20
                            ],
                            "start": [
                                213,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Math\""
                        }
                    ],
                    "view": "\"Math\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    213,
                    20
                ],
                "name": "tag",
                "start": [
                    213,
                    10
                ],
                "type": "doc.field",
                "view": "\"Math\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Math content",
                "extends": {
                    "finish": [
                        211,
                        21
                    ],
                    "start": [
                        211,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                211,
                                21
                            ],
                            "start": [
                                211,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    211,
                    21
                ],
                "name": "text",
                "rawdesc": "Math content",
                "start": [
                    211,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Math",
        "type": "type",
        "view": "pandoc.Math"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "TeX math (literal)\n",
                "extends": {
                    "desc": "TeX math (literal)\n",
                    "finish": [
                        214,
                        16
                    ],
                    "rawdesc": "TeX math (literal)\n",
                    "start": [
                        214,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Math"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    214,
                    11
                ],
                "name": "Math",
                "rawdesc": "TeX math (literal)\n",
                "start": [
                    214,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Math",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates an inline code element\n\n\n@*param* `mathtype` — Specifier determining whether the math content should be shown inline (InlineMath) or on a separate line (DisplayMath)\n\n@*param* `text` — Math content\n\n```lua\nmathtype:\n    | 'InlineMath'\n    | 'DisplayMath'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Specifier determining whether the math content should be shown inline (InlineMath) or on a separate line (DisplayMath)",
                            "finish": [
                                222,
                                29
                            ],
                            "name": "mathtype",
                            "rawdesc": "Specifier determining whether the math content should be shown inline (InlineMath) or on a separate line (DisplayMath)",
                            "start": [
                                222,
                                21
                            ],
                            "type": "local",
                            "view": "string|'DisplayMath'|'InlineMath'"
                        },
                        {
                            "desc": "Math content",
                            "finish": [
                                222,
                                35
                            ],
                            "name": "text",
                            "rawdesc": "Math content",
                            "start": [
                                222,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Creates an inline code element\n\n\n@*param* `mathtype` — Specifier determining whether the math content should be shown inline (InlineMath) or on a separate line (DisplayMath)\n\n@*param* `text` — Math content\n\n```lua\nmathtype:\n    | 'InlineMath'\n    | 'DisplayMath'\n```",
                    "finish": [
                        222,
                        40
                    ],
                    "rawdesc": "Creates an inline code element\n\n\n```lua\nmathtype:\n    | 'InlineMath'\n    | 'DisplayMath'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Math"
                        }
                    ],
                    "start": [
                        222,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Math(mathtype: string|'DisplayMath'|'InlineMath', text: string)\n  -> pandoc.Math"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    222,
                    20
                ],
                "name": "Math",
                "rawdesc": "Creates an inline code element\n\n\n```lua\nmathtype:\n    | 'InlineMath'\n    | 'DisplayMath'\n```",
                "start": [
                    222,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Math",
                "visible": "public"
            }
        ],
        "name": "pandoc.Math",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "TeX math (literal)\n",
                            "finish": [
                                228,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "TeX math (literal)\n",
                            "start": [
                                228,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Math"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        228,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Math"
                        }
                    ],
                    "start": [
                        228,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Math:clone()\n  -> pandoc.Math"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    228,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    228,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Math.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                "finish": [
                    14,
                    52
                ],
                "rawdesc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                "start": [
                    14,
                    10
                ],
                "type": "doc.alias",
                "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
            }
        ],
        "fields": [],
        "name": "pandoc.Meta",
        "type": "type",
        "view": "pandoc.Meta"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `meta_table` — Table containing document meta information\n\n@*return* — Meta object",
                "extends": {
                    "args": [
                        {
                            "desc": "Table containing document meta information",
                            "finish": [
                                18,
                                31
                            ],
                            "name": "meta_table",
                            "rawdesc": "Table containing document meta information",
                            "start": [
                                18,
                                21
                            ],
                            "type": "local",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        }
                    ],
                    "desc": "@*param* `meta_table` — Table containing document meta information\n\n@*return* — Meta object",
                    "finish": [
                        18,
                        36
                    ],
                    "returns": [
                        {
                            "desc": "Meta object",
                            "rawdesc": "Meta object",
                            "type": "function.return",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        }
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Meta(meta_table: table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>)\n  -> table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    18,
                    20
                ],
                "name": "Meta",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Meta",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a value to be used as a MetaBlocks value in meta\ndata; creates a copy of the input list via `pandoc.Blocks`,\ndiscarding all non-list keys.\n",
                "extends": {
                    "args": [
                        {
                            "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                27,
                                33
                            ],
                            "name": "blocks",
                            "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                27,
                                27
                            ],
                            "type": "local",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "desc": "Creates a value to be used as a MetaBlocks value in meta\ndata; creates a copy of the input list via `pandoc.Blocks`,\ndiscarding all non-list keys.\n",
                    "finish": [
                        27,
                        38
                    ],
                    "rawdesc": "Creates a value to be used as a MetaBlocks value in meta\ndata; creates a copy of the input list via `pandoc.Blocks`,\ndiscarding all non-list keys.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        27,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.MetaBlocks(blocks: pandoc.Blocks)\n  -> pandoc.List"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    27,
                    26
                ],
                "name": "MetaBlocks",
                "rawdesc": "Creates a value to be used as a MetaBlocks value in meta\ndata; creates a copy of the input list via `pandoc.Blocks`,\ndiscarding all non-list keys.\n",
                "start": [
                    27,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.MetaBlocks",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "finish": [
                    6,
                    39
                ],
                "start": [
                    6,
                    10
                ],
                "type": "doc.alias",
                "view": "pandoc.List"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaBlocks",
        "type": "type",
        "view": "pandoc.MetaBlocks"
    },
    {
        "defines": [
            {
                "finish": [
                    3,
                    33
                ],
                "start": [
                    3,
                    10
                ],
                "type": "doc.alias",
                "view": "boolean"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaBool",
        "type": "type",
        "view": "pandoc.MetaBool"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a value to be used as MetaBool in meta data; this is\nthe identity function for boolean values and exists only for\ncompleteness.\n\n\n@*param* `bool` — Boolean value",
                "extends": {
                    "args": [
                        {
                            "desc": "Boolean value",
                            "finish": [
                                73,
                                29
                            ],
                            "name": "bool",
                            "rawdesc": "Boolean value",
                            "start": [
                                73,
                                25
                            ],
                            "type": "local",
                            "view": "boolean"
                        }
                    ],
                    "desc": "Creates a value to be used as MetaBool in meta data; this is\nthe identity function for boolean values and exists only for\ncompleteness.\n\n\n@*param* `bool` — Boolean value",
                    "finish": [
                        73,
                        34
                    ],
                    "rawdesc": "Creates a value to be used as MetaBool in meta data; this is\nthe identity function for boolean values and exists only for\ncompleteness.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.MetaBool(bool: boolean)\n  -> boolean"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    73,
                    24
                ],
                "name": "MetaBool",
                "rawdesc": "Creates a value to be used as MetaBool in meta data; this is\nthe identity function for boolean values and exists only for\ncompleteness.\n",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.MetaBool",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a value to be used as a MetaInlines value in meta\ndata; creates a copy of the input list via `pandoc.Inlines`,\ndiscarding all non-list keys.\n",
                "extends": {
                    "args": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                36,
                                35
                            ],
                            "name": "inlines",
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                36,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates a value to be used as a MetaInlines value in meta\ndata; creates a copy of the input list via `pandoc.Inlines`,\ndiscarding all non-list keys.\n",
                    "finish": [
                        36,
                        40
                    ],
                    "rawdesc": "Creates a value to be used as a MetaInlines value in meta\ndata; creates a copy of the input list via `pandoc.Inlines`,\ndiscarding all non-list keys.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.List"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.MetaInlines(inlines: pandoc.Inlines)\n  -> pandoc.List"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    36,
                    27
                ],
                "name": "MetaInlines",
                "rawdesc": "Creates a value to be used as a MetaInlines value in meta\ndata; creates a copy of the input list via `pandoc.Inlines`,\ndiscarding all non-list keys.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.MetaInlines",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "finish": [
                    5,
                    40
                ],
                "start": [
                    5,
                    10
                ],
                "type": "doc.alias",
                "view": "pandoc.List"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaInlines",
        "type": "type",
        "view": "pandoc.MetaInlines"
    },
    {
        "defines": [
            {
                "finish": [
                    7,
                    56
                ],
                "start": [
                    7,
                    10
                ],
                "type": "doc.alias",
                "view": "table<number, pandoc.MetaValue>"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaList",
        "type": "type",
        "view": "pandoc.MetaList"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a value to be used as a MetaList in meta data;\ncreates a copy of the input list via `pandoc.List`,\ndiscarding all non-list keys.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                45,
                                36
                            ],
                            "name": "meta_values",
                            "start": [
                                45,
                                25
                            ],
                            "type": "local",
                            "view": "table<number, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        }
                    ],
                    "desc": "Creates a value to be used as a MetaList in meta data;\ncreates a copy of the input list via `pandoc.List`,\ndiscarding all non-list keys.\n",
                    "finish": [
                        45,
                        41
                    ],
                    "rawdesc": "Creates a value to be used as a MetaList in meta data;\ncreates a copy of the input list via `pandoc.List`,\ndiscarding all non-list keys.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<number, pandoc.MetaValue>"
                        }
                    ],
                    "start": [
                        45,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.MetaList(meta_values: table<number, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>)\n  -> table<number, pandoc.MetaValue>"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    45,
                    24
                ],
                "name": "MetaList",
                "rawdesc": "Creates a value to be used as a MetaList in meta data;\ncreates a copy of the input list via `pandoc.List`,\ndiscarding all non-list keys.\n",
                "start": [
                    45,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.MetaList",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "- Creates a value to be used as a MetaMap in meta data; creates\n-- a copy of the input table, keeping only pairs with string\n-- keys and discards all other keys.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                54,
                                37
                            ],
                            "name": "key_value_map",
                            "start": [
                                54,
                                24
                            ],
                            "type": "local",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        }
                    ],
                    "desc": "- Creates a value to be used as a MetaMap in meta data; creates\n-- a copy of the input table, keeping only pairs with string\n-- keys and discards all other keys.\n",
                    "finish": [
                        54,
                        42
                    ],
                    "rawdesc": "- Creates a value to be used as a MetaMap in meta data; creates\n-- a copy of the input table, keeping only pairs with string\n-- keys and discards all other keys.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<string, pandoc.MetaValue>"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.MetaMap(key_value_map: table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>)\n  -> table<string, pandoc.MetaValue>"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    54,
                    23
                ],
                "name": "MetaMap",
                "rawdesc": "- Creates a value to be used as a MetaMap in meta data; creates\n-- a copy of the input table, keeping only pairs with string\n-- keys and discards all other keys.\n",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.MetaMap",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "finish": [
                    8,
                    55
                ],
                "start": [
                    8,
                    10
                ],
                "type": "doc.alias",
                "view": "table<string, pandoc.MetaValue>"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaMap",
        "type": "type",
        "view": "pandoc.MetaMap"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a value to be used as a MetaString in meta data; this\nis the identity function for boolean values and exists only\nfor completeness.\n\n\n@*param* `str` — String value",
                "extends": {
                    "args": [
                        {
                            "desc": "String value",
                            "finish": [
                                64,
                                30
                            ],
                            "name": "str",
                            "rawdesc": "String value",
                            "start": [
                                64,
                                27
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "Creates a value to be used as a MetaString in meta data; this\nis the identity function for boolean values and exists only\nfor completeness.\n\n\n@*param* `str` — String value",
                    "finish": [
                        64,
                        35
                    ],
                    "rawdesc": "Creates a value to be used as a MetaString in meta data; this\nis the identity function for boolean values and exists only\nfor completeness.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|number"
                        }
                    ],
                    "start": [
                        64,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.MetaString(str: string|number)\n  -> string|number"
                },
                "file": "pandoc/meta.lua",
                "finish": [
                    64,
                    26
                ],
                "name": "MetaString",
                "rawdesc": "Creates a value to be used as a MetaString in meta data; this\nis the identity function for boolean values and exists only\nfor completeness.\n",
                "start": [
                    64,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.MetaString",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "finish": [
                    4,
                    41
                ],
                "start": [
                    4,
                    10
                ],
                "type": "doc.alias",
                "view": "string|number"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaString",
        "type": "type",
        "view": "pandoc.MetaString"
    },
    {
        "defines": [
            {
                "finish": [
                    2,
                    128
                ],
                "start": [
                    2,
                    10
                ],
                "type": "doc.alias",
                "view": "boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)"
            }
        ],
        "fields": [],
        "name": "pandoc.MetaValue",
        "type": "type",
        "view": "pandoc.MetaValue"
    },
    {
        "defines": [
            {
                "desc": "Raw inline content of a specified format\n",
                "finish": [
                    2,
                    679
                ],
                "rawdesc": "Raw inline content of a specified format\n",
                "start": [
                    2,
                    10
                ],
                "type": "doc.alias",
                "view": "boolean|pandoc.Block|pandoc.BlockQuote|pandoc.Blocks|pandoc.BulletList...(+39)"
            }
        ],
        "fields": [],
        "name": "pandoc.Node",
        "type": "type",
        "view": "pandoc.Node"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Default citation style is used.\n",
                "extends": {
                    "finish": [
                        15,
                        40
                    ],
                    "start": [
                        15,
                        24
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    15,
                    21
                ],
                "name": "NormalCitation",
                "rawdesc": "Default citation style is used.\n",
                "start": [
                    15,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.NormalCitation",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Footnote or endnote\n",
                "extends": {
                    "desc": "Footnote or endnote\n",
                    "finish": [
                        241,
                        16
                    ],
                    "rawdesc": "Footnote or endnote\n",
                    "start": [
                        241,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Note"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    241,
                    11
                ],
                "name": "Note",
                "rawdesc": "Footnote or endnote\n",
                "start": [
                    241,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Note",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a note element\n\n\n@*param* `content` — Div content (list of blocks)",
                "extends": {
                    "args": [
                        {
                            "desc": "Div content (list of blocks)",
                            "finish": [
                                248,
                                28
                            ],
                            "name": "content",
                            "rawdesc": "Div content (list of blocks)",
                            "start": [
                                248,
                                21
                            ],
                            "type": "local",
                            "view": "string|pandoc.Block|pandoc.Inline|pandoc.List"
                        }
                    ],
                    "desc": "Creates a note element\n\n\n@*param* `content` — Div content (list of blocks)",
                    "finish": [
                        248,
                        33
                    ],
                    "rawdesc": "Creates a note element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Note"
                        }
                    ],
                    "start": [
                        248,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Note(content: string|pandoc.Block|pandoc.Inline|pandoc.List)\n  -> pandoc.Note"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    248,
                    20
                ],
                "name": "Note",
                "rawdesc": "Creates a note element\n",
                "start": [
                    248,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Note",
                "visible": "public"
            }
        ],
        "name": "pandoc.Note",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Footnote or endnote\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            237,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            237,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    237,
                    37
                ],
                "rawdesc": "Footnote or endnote\n",
                "start": [
                    237,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Note",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Footnote or endnote\n",
                            "finish": [
                                254,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Footnote or endnote\n",
                            "start": [
                                254,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Note"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        254,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Note"
                        }
                    ],
                    "start": [
                        254,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Note:clone()\n  -> pandoc.Note"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    254,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    254,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Footnote block content",
                "extends": {
                    "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        238,
                        31
                    ],
                    "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        238,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                238,
                                31
                            ],
                            "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                238,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "view": "pandoc.Blocks"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    238,
                    31
                ],
                "name": "content",
                "rawdesc": "Footnote block content",
                "start": [
                    238,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Blocks",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        239,
                        18
                    ],
                    "start": [
                        239,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                239,
                                18
                            ],
                            "start": [
                                239,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Note\""
                        }
                    ],
                    "view": "\"Note\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    239,
                    18
                ],
                "name": "t",
                "start": [
                    239,
                    10
                ],
                "type": "doc.field",
                "view": "\"Note\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        240,
                        20
                    ],
                    "start": [
                        240,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                240,
                                20
                            ],
                            "start": [
                                240,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Note\""
                        }
                    ],
                    "view": "\"Note\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    240,
                    20
                ],
                "name": "tag",
                "start": [
                    240,
                    10
                ],
                "type": "doc.field",
                "view": "\"Note\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Note",
        "type": "type",
        "view": "pandoc.Note"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Footnote or endnote\n",
                            "finish": [
                                254,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Footnote or endnote\n",
                            "start": [
                                254,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Note"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        254,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Note"
                        }
                    ],
                    "start": [
                        254,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Note:clone()\n  -> pandoc.Note"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    254,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    254,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Note.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List numbers are delimited by a single parenthesis.\n",
                "extends": {
                    "finish": [
                        50,
                        28
                    ],
                    "start": [
                        50,
                        18
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    50,
                    15
                ],
                "name": "OneParen",
                "rawdesc": "List numbers are delimited by a single parenthesis.\n",
                "start": [
                    50,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.OneParen",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "An ordered list.\n",
                "extends": {
                    "desc": "An ordered list.\n",
                    "finish": [
                        321,
                        23
                    ],
                    "rawdesc": "An ordered list.\n",
                    "start": [
                        321,
                        21
                    ],
                    "type": "table",
                    "view": "pandoc.OrderedList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    321,
                    18
                ],
                "name": "OrderedList",
                "rawdesc": "An ordered list.\n",
                "start": [
                    321,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.OrderedList",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an ordered list\n\n\n@*param* `items` — List items\n\n@*param* `listAttributes` — List parameters",
                "extends": {
                    "args": [
                        {
                            "desc": "List items",
                            "finish": [
                                329,
                                33
                            ],
                            "name": "items",
                            "rawdesc": "List items",
                            "start": [
                                329,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.Blocks"
                        },
                        {
                            "desc": "List parameters",
                            "finish": [
                                329,
                                49
                            ],
                            "name": "listAttributes",
                            "rawdesc": "List parameters",
                            "start": [
                                329,
                                35
                            ],
                            "type": "local",
                            "view": "(pandoc.ListAttributes)?"
                        }
                    ],
                    "desc": "Create an ordered list\n\n\n@*param* `items` — List items\n\n@*param* `listAttributes` — List parameters",
                    "finish": [
                        329,
                        54
                    ],
                    "rawdesc": "Create an ordered list\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "start": [
                        329,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.OrderedList(items: pandoc.Blocks, listAttributes?: pandoc.ListAttributes)\n  -> pandoc.OrderedList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    329,
                    27
                ],
                "name": "OrderedList",
                "rawdesc": "Create an ordered list\n",
                "start": [
                    329,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.OrderedList",
                "visible": "public"
            }
        ],
        "name": "pandoc.OrderedList",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "An ordered list.\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            313,
                            43
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            313,
                            31
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    313,
                    43
                ],
                "rawdesc": "An ordered list.\n",
                "start": [
                    313,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.OrderedList",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "An ordered list.\n",
                            "finish": [
                                335,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "An ordered list.\n",
                            "start": [
                                335,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        335,
                        39
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "start": [
                        335,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.OrderedList:clone()\n  -> pandoc.OrderedList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    335,
                    33
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    335,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List items",
                "extends": {
                    "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        314,
                        31
                    ],
                    "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        314,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                314,
                                31
                            ],
                            "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                314,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "view": "pandoc.Blocks"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    314,
                    31
                ],
                "name": "content",
                "rawdesc": "List items",
                "start": [
                    314,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Blocks",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `listAttributes.delimiter`",
                "extends": {
                    "finish": [
                        318,
                        34
                    ],
                    "start": [
                        318,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                318,
                                34
                            ],
                            "start": [
                                318,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'"
                        }
                    ],
                    "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    318,
                    34
                ],
                "name": "delimeter",
                "rawdesc": "Alias for `listAttributes.delimiter`",
                "start": [
                    318,
                    10
                ],
                "type": "doc.field",
                "view": "'DefaultDelim'|'OneParen'|'Period'|'TwoParens'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List parameters",
                "extends": {
                    "desc": "List attributes\n",
                    "finish": [
                        315,
                        46
                    ],
                    "rawdesc": "List attributes\n",
                    "start": [
                        315,
                        25
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List attributes\n",
                            "finish": [
                                315,
                                46
                            ],
                            "rawdesc": "List attributes\n",
                            "start": [
                                315,
                                25
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.ListAttributes"
                        }
                    ],
                    "view": "pandoc.ListAttributes"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    315,
                    46
                ],
                "name": "listAttributes",
                "rawdesc": "List parameters",
                "start": [
                    315,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.ListAttributes",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `listAttributes.start`",
                "extends": {
                    "finish": [
                        316,
                        23
                    ],
                    "start": [
                        316,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                316,
                                23
                            ],
                            "start": [
                                316,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    316,
                    23
                ],
                "name": "start",
                "rawdesc": "Alias for `listAttributes.start`",
                "start": [
                    316,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `listAttributes.style`",
                "extends": {
                    "finish": [
                        317,
                        26
                    ],
                    "start": [
                        317,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                317,
                                26
                            ],
                            "start": [
                                317,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)"
                        }
                    ],
                    "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    317,
                    26
                ],
                "name": "style",
                "rawdesc": "Alias for `listAttributes.style`",
                "start": [
                    317,
                    10
                ],
                "type": "doc.field",
                "view": "'Decimal'|'DefaultStyle'|'Example'|'LowerAlpha'|'LowerRoman'...(+2)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        319,
                        25
                    ],
                    "start": [
                        319,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                319,
                                25
                            ],
                            "start": [
                                319,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"OrderedList\""
                        }
                    ],
                    "view": "\"OrderedList\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    319,
                    25
                ],
                "name": "t",
                "start": [
                    319,
                    10
                ],
                "type": "doc.field",
                "view": "\"OrderedList\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        320,
                        27
                    ],
                    "start": [
                        320,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                320,
                                27
                            ],
                            "start": [
                                320,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"OrderedList\""
                        }
                    ],
                    "view": "\"OrderedList\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    320,
                    27
                ],
                "name": "tag",
                "start": [
                    320,
                    10
                ],
                "type": "doc.field",
                "view": "\"OrderedList\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "An ordered list.\n",
                            "finish": [
                                342,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "An ordered list.\n",
                            "start": [
                                342,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.OrderedList"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                342,
                                43
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                342,
                                33
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        342,
                        48
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "start": [
                        342,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.OrderedList:walk(lua_filter: table<string, function>)\n  -> pandoc.OrderedList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    342,
                    32
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    342,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.OrderedList",
        "type": "type",
        "view": "pandoc.OrderedList"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "An ordered list.\n",
                            "finish": [
                                335,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "An ordered list.\n",
                            "start": [
                                335,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        335,
                        39
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "start": [
                        335,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.OrderedList:clone()\n  -> pandoc.OrderedList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    335,
                    33
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    335,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.OrderedList.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "An ordered list.\n",
                            "finish": [
                                342,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "An ordered list.\n",
                            "start": [
                                342,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.OrderedList"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                342,
                                43
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                342,
                                33
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        342,
                        48
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.OrderedList"
                        }
                    ],
                    "start": [
                        342,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.OrderedList:walk(lua_filter: table<string, function>)\n  -> pandoc.OrderedList"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    342,
                    32
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    342,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.OrderedList.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                "file": "pandoc/pandoc.lua",
                "finish": [
                    17,
                    23
                ],
                "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                "start": [
                    17,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Pandoc",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "document contents",
                "extends": {
                    "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        18,
                        30
                    ],
                    "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        18,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                18,
                                30
                            ],
                            "rawdesc": "List of `Block` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                18,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "view": "pandoc.Blocks"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    18,
                    30
                ],
                "name": "blocks",
                "rawdesc": "document contents",
                "start": [
                    18,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Blocks",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "finish": [
                                34,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "start": [
                                34,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        34,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        34,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Pandoc:clone()\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    34,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    34,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "document metadata",
                "extends": {
                    "desc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                    "finish": [
                        19,
                        26
                    ],
                    "rawdesc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                    "start": [
                        19,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                            "finish": [
                                19,
                                26
                            ],
                            "rawdesc": "Meta information on a document; string-indexed collection of meta values.\nMeta values are equal in Lua if and only if they are equal in Haskell.\n",
                            "start": [
                                19,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        }
                    ],
                    "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    19,
                    26
                ],
                "name": "meta",
                "rawdesc": "document metadata",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered document",
                "extends": {
                    "args": [
                        {
                            "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "finish": [
                                54,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "start": [
                                54,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                54,
                                38
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                54,
                                28
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered document",
                    "finish": [
                        54,
                        43
                    ],
                    "rawdesc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n",
                    "returns": [
                        {
                            "desc": "Filtered document",
                            "rawdesc": "Filtered document",
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Pandoc:walk(lua_filter: table<string, function>)\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    54,
                    27
                ],
                "name": "walk",
                "rawdesc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n",
                "start": [
                    54,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Pandoc",
        "type": "type",
        "view": "pandoc.Pandoc"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                "extends": {
                    "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                    "finish": [
                        20,
                        18
                    ],
                    "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                    "start": [
                        20,
                        16
                    ],
                    "type": "table",
                    "view": "pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    20,
                    13
                ],
                "name": "Pandoc",
                "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                "start": [
                    20,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Pandoc",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a complete pandoc document\n\n\n@*param* `blocks` — document contents\n\n@*param* `meta` — document metadata",
                "extends": {
                    "args": [
                        {
                            "desc": "document contents",
                            "finish": [
                                28,
                                29
                            ],
                            "name": "blocks",
                            "rawdesc": "document contents",
                            "start": [
                                28,
                                23
                            ],
                            "type": "local",
                            "view": "pandoc.Blocks"
                        },
                        {
                            "desc": "document metadata",
                            "finish": [
                                28,
                                35
                            ],
                            "name": "meta",
                            "rawdesc": "document metadata",
                            "start": [
                                28,
                                31
                            ],
                            "type": "local",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>?"
                        }
                    ],
                    "desc": "Create a complete pandoc document\n\n\n@*param* `blocks` — document contents\n\n@*param* `meta` — document metadata",
                    "finish": [
                        28,
                        40
                    ],
                    "rawdesc": "Create a complete pandoc document\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Pandoc(blocks: pandoc.Blocks, meta?: table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>)\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    28,
                    22
                ],
                "name": "Pandoc",
                "rawdesc": "Create a complete pandoc document\n",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Pandoc",
                "visible": "public"
            }
        ],
        "name": "pandoc.Pandoc",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "finish": [
                                34,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "start": [
                                34,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        34,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        34,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Pandoc:clone()\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    34,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    34,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Pandoc.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered document",
                "extends": {
                    "args": [
                        {
                            "desc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "finish": [
                                54,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Pandoc document\n\nValues of this type can be created with the`pandoc.Pandoc` constructor. Pandoc values are\nequal in Lua if and only if they are equal in Haskell.\n",
                            "start": [
                                54,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                54,
                                38
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                54,
                                28
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n\n\n@*param* `lua_filter` — Map of filter functions\n\n@*return* — Filtered document",
                    "finish": [
                        54,
                        43
                    ],
                    "rawdesc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n",
                    "returns": [
                        {
                            "desc": "Filtered document",
                            "rawdesc": "Filtered document",
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Pandoc:walk(lua_filter: table<string, function>)\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    54,
                    27
                ],
                "name": "walk",
                "rawdesc": "Applies a Lua filter to the Pandoc element. Just as for\nfull-document filters, the order in which elements are traversed\ncan be controlled by setting the `traverse` field of the filter;\nsee the section on [traversal order][Traversal order]. Returns a\n(deep) copy on which the filter has been applied: the original\nelement is left untouched.\n\nUsage:\n\n    -- returns `pandoc.Pandoc{pandoc.Para{pandoc.Str 'Bye'}}`\n    return pandoc.Pandoc{pandoc.Para('Hi')}:walk {\n      Str = function (_) return 'Bye' end,\n    }\n",
                "start": [
                    54,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Pandoc.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A paragraph\n",
                "extends": {
                    "desc": "A paragraph\n",
                    "finish": [
                        355,
                        16
                    ],
                    "rawdesc": "A paragraph\n",
                    "start": [
                        355,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Para"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    355,
                    11
                ],
                "name": "Para",
                "rawdesc": "A paragraph\n",
                "start": [
                    355,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Para",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a paragraph element\n\n\n@*param* `content` — Inline content",
                "extends": {
                    "args": [
                        {
                            "desc": "Inline content",
                            "finish": [
                                362,
                                28
                            ],
                            "name": "content",
                            "rawdesc": "Inline content",
                            "start": [
                                362,
                                21
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates a paragraph element\n\n\n@*param* `content` — Inline content",
                    "finish": [
                        362,
                        33
                    ],
                    "rawdesc": "Creates a paragraph element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Para"
                        }
                    ],
                    "start": [
                        362,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Para(content: pandoc.Inlines)\n  -> pandoc.Para"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    362,
                    20
                ],
                "name": "Para",
                "rawdesc": "Creates a paragraph element\n",
                "start": [
                    362,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Para",
                "visible": "public"
            }
        ],
        "name": "pandoc.Para",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A paragraph\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            351,
                            36
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            351,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    351,
                    36
                ],
                "rawdesc": "A paragraph\n",
                "start": [
                    351,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Para",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A paragraph\n",
                            "finish": [
                                368,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A paragraph\n",
                            "start": [
                                368,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Para"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        368,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Para"
                        }
                    ],
                    "start": [
                        368,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Para:clone()\n  -> pandoc.Para"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    368,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    368,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        352,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        352,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                352,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                352,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    352,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    352,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        353,
                        18
                    ],
                    "start": [
                        353,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                353,
                                18
                            ],
                            "start": [
                                353,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Para\""
                        }
                    ],
                    "view": "\"Para\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    353,
                    18
                ],
                "name": "t",
                "start": [
                    353,
                    10
                ],
                "type": "doc.field",
                "view": "\"Para\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        354,
                        20
                    ],
                    "start": [
                        354,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                354,
                                20
                            ],
                            "start": [
                                354,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Para\""
                        }
                    ],
                    "view": "\"Para\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    354,
                    20
                ],
                "name": "tag",
                "start": [
                    354,
                    10
                ],
                "type": "doc.field",
                "view": "\"Para\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A paragraph\n",
                            "finish": [
                                375,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A paragraph\n",
                            "start": [
                                375,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Para"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                375,
                                36
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                375,
                                26
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        375,
                        41
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Para"
                        }
                    ],
                    "start": [
                        375,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Para:walk(lua_filter: table<string, function>)\n  -> pandoc.Para"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    375,
                    25
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    375,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Para",
        "type": "type",
        "view": "pandoc.Para"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A paragraph\n",
                            "finish": [
                                368,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A paragraph\n",
                            "start": [
                                368,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Para"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        368,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Para"
                        }
                    ],
                    "start": [
                        368,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Para:clone()\n  -> pandoc.Para"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    368,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    368,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Para.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A paragraph\n",
                            "finish": [
                                375,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A paragraph\n",
                            "start": [
                                375,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Para"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                375,
                                36
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                375,
                                26
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        375,
                        41
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Para"
                        }
                    ],
                    "start": [
                        375,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Para:walk(lua_filter: table<string, function>)\n  -> pandoc.Para"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    375,
                    25
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    375,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Para.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List numbers are delimited by a period.\n",
                "extends": {
                    "finish": [
                        45,
                        24
                    ],
                    "start": [
                        45,
                        16
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    45,
                    13
                ],
                "name": "Period",
                "rawdesc": "List numbers are delimited by a period.\n",
                "start": [
                    45,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Period",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Plain text, not a paragarph\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            382,
                            37
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            382,
                            25
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    382,
                    37
                ],
                "rawdesc": "Plain text, not a paragarph\n",
                "start": [
                    382,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Plain",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Plain text, not a paragarph\n",
                            "finish": [
                                399,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Plain text, not a paragarph\n",
                            "start": [
                                399,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        399,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "start": [
                        399,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Plain:clone()\n  -> pandoc.Plain"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    399,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    399,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        383,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        383,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                383,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                383,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    383,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    383,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        384,
                        19
                    ],
                    "start": [
                        384,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                384,
                                19
                            ],
                            "start": [
                                384,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Plain\""
                        }
                    ],
                    "view": "\"Plain\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    384,
                    19
                ],
                "name": "t",
                "start": [
                    384,
                    10
                ],
                "type": "doc.field",
                "view": "\"Plain\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        385,
                        21
                    ],
                    "start": [
                        385,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                385,
                                21
                            ],
                            "start": [
                                385,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Plain\""
                        }
                    ],
                    "view": "\"Plain\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    385,
                    21
                ],
                "name": "tag",
                "start": [
                    385,
                    10
                ],
                "type": "doc.field",
                "view": "\"Plain\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Plain text, not a paragarph\n",
                            "finish": [
                                406,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Plain text, not a paragarph\n",
                            "start": [
                                406,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Plain"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                406,
                                37
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                406,
                                27
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        406,
                        42
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "start": [
                        406,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Plain:walk(lua_filter: table<string, function>)\n  -> pandoc.Plain"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    406,
                    26
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    406,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Plain",
        "type": "type",
        "view": "pandoc.Plain"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Plain text, not a paragarph\n",
                "extends": {
                    "desc": "Plain text, not a paragarph\n",
                    "finish": [
                        386,
                        17
                    ],
                    "rawdesc": "Plain text, not a paragarph\n",
                    "start": [
                        386,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.Plain"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    386,
                    12
                ],
                "name": "Plain",
                "rawdesc": "Plain text, not a paragarph\n",
                "start": [
                    386,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Plain",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a plain element\n\n\n@*param* `content` — Inline content",
                "extends": {
                    "args": [
                        {
                            "desc": "Inline content",
                            "finish": [
                                393,
                                29
                            ],
                            "name": "content",
                            "rawdesc": "Inline content",
                            "start": [
                                393,
                                22
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates a plain element\n\n\n@*param* `content` — Inline content",
                    "finish": [
                        393,
                        34
                    ],
                    "rawdesc": "Creates a plain element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "start": [
                        393,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Plain(content: pandoc.Inlines)\n  -> pandoc.Plain"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    393,
                    21
                ],
                "name": "Plain",
                "rawdesc": "Creates a plain element\n",
                "start": [
                    393,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Plain",
                "visible": "public"
            }
        ],
        "name": "pandoc.Plain",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Plain text, not a paragarph\n",
                            "finish": [
                                399,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Plain text, not a paragarph\n",
                            "start": [
                                399,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        399,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "start": [
                        399,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Plain:clone()\n  -> pandoc.Plain"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    399,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    399,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Plain.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Plain text, not a paragarph\n",
                            "finish": [
                                406,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Plain text, not a paragarph\n",
                            "start": [
                                406,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Plain"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                406,
                                37
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                406,
                                27
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        406,
                        42
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Plain"
                        }
                    ],
                    "start": [
                        406,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Plain:walk(lua_filter: table<string, function>)\n  -> pandoc.Plain"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    406,
                    26
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    406,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Plain.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Quoted text\n",
                "extends": {
                    "desc": "Quoted text\n",
                    "finish": [
                        266,
                        18
                    ],
                    "rawdesc": "Quoted text\n",
                    "start": [
                        266,
                        16
                    ],
                    "type": "table",
                    "view": "pandoc.Quoted"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    266,
                    13
                ],
                "name": "Quoted",
                "rawdesc": "Quoted text\n",
                "start": [
                    266,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Quoted",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates quoted text\n\n\n@*param* `quotetype` — Type of quotes to be used; one of SingleQuote or DoubleQuote\n\n@*param* `content` — Quoted text (list of inlines)\n\n```lua\nquotetype:\n    | 'SingleQuote'\n    | 'DoubleQuote'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Type of quotes to be used; one of SingleQuote or DoubleQuote",
                            "finish": [
                                274,
                                32
                            ],
                            "name": "quotetype",
                            "rawdesc": "Type of quotes to be used; one of SingleQuote or DoubleQuote",
                            "start": [
                                274,
                                23
                            ],
                            "type": "local",
                            "view": "string|'DoubleQuote'|'SingleQuote'"
                        },
                        {
                            "desc": "Quoted text (list of inlines)",
                            "finish": [
                                274,
                                41
                            ],
                            "name": "content",
                            "rawdesc": "Quoted text (list of inlines)",
                            "start": [
                                274,
                                34
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates quoted text\n\n\n@*param* `quotetype` — Type of quotes to be used; one of SingleQuote or DoubleQuote\n\n@*param* `content` — Quoted text (list of inlines)\n\n```lua\nquotetype:\n    | 'SingleQuote'\n    | 'DoubleQuote'\n```",
                    "finish": [
                        274,
                        46
                    ],
                    "rawdesc": "Creates quoted text\n\n\n```lua\nquotetype:\n    | 'SingleQuote'\n    | 'DoubleQuote'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Quoted"
                        }
                    ],
                    "start": [
                        274,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Quoted(quotetype: string|'DoubleQuote'|'SingleQuote', content: pandoc.Inlines)\n  -> pandoc.Quoted"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    274,
                    22
                ],
                "name": "Quoted",
                "rawdesc": "Creates quoted text\n\n\n```lua\nquotetype:\n    | 'SingleQuote'\n    | 'DoubleQuote'\n```",
                "start": [
                    274,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Quoted",
                "visible": "public"
            }
        ],
        "name": "pandoc.Quoted",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Quoted text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            261,
                            39
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            261,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    261,
                    39
                ],
                "rawdesc": "Quoted text\n",
                "start": [
                    261,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Quoted",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Quoted text\n",
                            "finish": [
                                280,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Quoted text\n",
                            "start": [
                                280,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Quoted"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        280,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Quoted"
                        }
                    ],
                    "start": [
                        280,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Quoted:clone()\n  -> pandoc.Quoted"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    280,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    280,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inlines in quotes",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        263,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        263,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                263,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                263,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    263,
                    32
                ],
                "name": "content",
                "rawdesc": "Inlines in quotes",
                "start": [
                    263,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Type of quotes to be used; one of SingleQuote or DoubleQuote",
                "extends": {
                    "finish": [
                        262,
                        30
                    ],
                    "start": [
                        262,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                262,
                                30
                            ],
                            "start": [
                                262,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "'DoubleQuote'|'SingleQuote'"
                        }
                    ],
                    "view": "'DoubleQuote'|'SingleQuote'"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    262,
                    30
                ],
                "name": "quotetype",
                "rawdesc": "Type of quotes to be used; one of SingleQuote or DoubleQuote",
                "start": [
                    262,
                    10
                ],
                "type": "doc.field",
                "view": "'DoubleQuote'|'SingleQuote'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        264,
                        20
                    ],
                    "start": [
                        264,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                264,
                                20
                            ],
                            "start": [
                                264,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Quoted\""
                        }
                    ],
                    "view": "\"Quoted\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    264,
                    20
                ],
                "name": "t",
                "start": [
                    264,
                    10
                ],
                "type": "doc.field",
                "view": "\"Quoted\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        265,
                        22
                    ],
                    "start": [
                        265,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                265,
                                22
                            ],
                            "start": [
                                265,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Quoted\""
                        }
                    ],
                    "view": "\"Quoted\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    265,
                    22
                ],
                "name": "tag",
                "start": [
                    265,
                    10
                ],
                "type": "doc.field",
                "view": "\"Quoted\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Quoted",
        "type": "type",
        "view": "pandoc.Quoted"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Quoted text\n",
                            "finish": [
                                280,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Quoted text\n",
                            "start": [
                                280,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Quoted"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        280,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Quoted"
                        }
                    ],
                    "start": [
                        280,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Quoted:clone()\n  -> pandoc.Quoted"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    280,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    280,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Quoted.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Raw content of a specified format\n",
                "extends": {
                    "desc": "Raw content of a specified format\n",
                    "finish": [
                        419,
                        20
                    ],
                    "rawdesc": "Raw content of a specified format\n",
                    "start": [
                        419,
                        18
                    ],
                    "type": "table",
                    "view": "pandoc.RawBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    419,
                    15
                ],
                "name": "RawBlock",
                "rawdesc": "Raw content of a specified format\n",
                "start": [
                    419,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.RawBlock",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a raw block element\n\n\n@*param* `format` — Format of content\n\n@*param* `text` — Raw content",
                "extends": {
                    "args": [
                        {
                            "desc": "Format of content",
                            "finish": [
                                427,
                                31
                            ],
                            "name": "format",
                            "rawdesc": "Format of content",
                            "start": [
                                427,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Raw content",
                            "finish": [
                                427,
                                37
                            ],
                            "name": "text",
                            "rawdesc": "Raw content",
                            "start": [
                                427,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Creates a raw block element\n\n\n@*param* `format` — Format of content\n\n@*param* `text` — Raw content",
                    "finish": [
                        427,
                        42
                    ],
                    "rawdesc": "Creates a raw block element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "start": [
                        427,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.RawBlock(format: string, text: string)\n  -> pandoc.RawBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    427,
                    24
                ],
                "name": "RawBlock",
                "rawdesc": "Creates a raw block element\n",
                "start": [
                    427,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.RawBlock",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawBlock",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Raw content of a specified format\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            414,
                            40
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            414,
                            28
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    414,
                    40
                ],
                "rawdesc": "Raw content of a specified format\n",
                "start": [
                    414,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.RawBlock",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Raw content of a specified format\n",
                            "finish": [
                                433,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Raw content of a specified format\n",
                            "start": [
                                433,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        433,
                        36
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "start": [
                        433,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.RawBlock:clone()\n  -> pandoc.RawBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    433,
                    30
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    433,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Format of content",
                "extends": {
                    "finish": [
                        415,
                        23
                    ],
                    "start": [
                        415,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                415,
                                23
                            ],
                            "start": [
                                415,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    415,
                    23
                ],
                "name": "format",
                "rawdesc": "Format of content",
                "start": [
                    415,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        417,
                        22
                    ],
                    "start": [
                        417,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                417,
                                22
                            ],
                            "start": [
                                417,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"RawBlock\""
                        }
                    ],
                    "view": "\"RawBlock\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    417,
                    22
                ],
                "name": "t",
                "start": [
                    417,
                    10
                ],
                "type": "doc.field",
                "view": "\"RawBlock\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        418,
                        24
                    ],
                    "start": [
                        418,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                418,
                                24
                            ],
                            "start": [
                                418,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"RawBlock\""
                        }
                    ],
                    "view": "\"RawBlock\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    418,
                    24
                ],
                "name": "tag",
                "start": [
                    418,
                    10
                ],
                "type": "doc.field",
                "view": "\"RawBlock\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Raw content",
                "extends": {
                    "finish": [
                        416,
                        21
                    ],
                    "start": [
                        416,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                416,
                                21
                            ],
                            "start": [
                                416,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    416,
                    21
                ],
                "name": "text",
                "rawdesc": "Raw content",
                "start": [
                    416,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Raw content of a specified format\n",
                            "finish": [
                                440,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Raw content of a specified format\n",
                            "start": [
                                440,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.RawBlock"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                440,
                                40
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                440,
                                30
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        440,
                        45
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "start": [
                        440,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.RawBlock:walk(lua_filter: table<string, function>)\n  -> pandoc.RawBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    440,
                    29
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    440,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawBlock",
        "type": "type",
        "view": "pandoc.RawBlock"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Raw content of a specified format\n",
                            "finish": [
                                433,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Raw content of a specified format\n",
                            "start": [
                                433,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        433,
                        36
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "start": [
                        433,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.RawBlock:clone()\n  -> pandoc.RawBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    433,
                    30
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    433,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawBlock.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "Raw content of a specified format\n",
                            "finish": [
                                440,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Raw content of a specified format\n",
                            "start": [
                                440,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.RawBlock"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                440,
                                40
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                440,
                                30
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        440,
                        45
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawBlock"
                        }
                    ],
                    "start": [
                        440,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.RawBlock:walk(lua_filter: table<string, function>)\n  -> pandoc.RawBlock"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    440,
                    29
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    440,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawBlock.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Raw inline content of a specified format\n",
                "extends": {
                    "desc": "Raw inline content of a specified format\n",
                    "finish": [
                        294,
                        21
                    ],
                    "rawdesc": "Raw inline content of a specified format\n",
                    "start": [
                        294,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.RawInline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    294,
                    16
                ],
                "name": "RawInline",
                "rawdesc": "Raw inline content of a specified format\n",
                "start": [
                    294,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.RawInline",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a raw inline element\n\n\n@*param* `format` — Format of content\n\n@*param* `text` — Raw content",
                "extends": {
                    "args": [
                        {
                            "desc": "Format of content",
                            "finish": [
                                302,
                                32
                            ],
                            "name": "format",
                            "rawdesc": "Format of content",
                            "start": [
                                302,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Raw content",
                            "finish": [
                                302,
                                38
                            ],
                            "name": "text",
                            "rawdesc": "Raw content",
                            "start": [
                                302,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Creates a raw inline element\n\n\n@*param* `format` — Format of content\n\n@*param* `text` — Raw content",
                    "finish": [
                        302,
                        43
                    ],
                    "rawdesc": "Creates a raw inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawInline"
                        }
                    ],
                    "start": [
                        302,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.RawInline(format: string, text: string)\n  -> pandoc.RawInline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    302,
                    25
                ],
                "name": "RawInline",
                "rawdesc": "Creates a raw inline element\n",
                "start": [
                    302,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.RawInline",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawInline",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Raw inline content of a specified format\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            289,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            289,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    289,
                    42
                ],
                "rawdesc": "Raw inline content of a specified format\n",
                "start": [
                    289,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.RawInline",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Raw inline content of a specified format\n",
                            "finish": [
                                308,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Raw inline content of a specified format\n",
                            "start": [
                                308,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.RawInline"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        308,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawInline"
                        }
                    ],
                    "start": [
                        308,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.RawInline:clone()\n  -> pandoc.RawInline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    308,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    308,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Format of content",
                "extends": {
                    "finish": [
                        290,
                        23
                    ],
                    "start": [
                        290,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                290,
                                23
                            ],
                            "start": [
                                290,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    290,
                    23
                ],
                "name": "format",
                "rawdesc": "Format of content",
                "start": [
                    290,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        292,
                        23
                    ],
                    "start": [
                        292,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                292,
                                23
                            ],
                            "start": [
                                292,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"RawInline\""
                        }
                    ],
                    "view": "\"RawInline\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    292,
                    23
                ],
                "name": "t",
                "start": [
                    292,
                    10
                ],
                "type": "doc.field",
                "view": "\"RawInline\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        293,
                        25
                    ],
                    "start": [
                        293,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                293,
                                25
                            ],
                            "start": [
                                293,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"RawInline\""
                        }
                    ],
                    "view": "\"RawInline\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    293,
                    25
                ],
                "name": "tag",
                "start": [
                    293,
                    10
                ],
                "type": "doc.field",
                "view": "\"RawInline\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Raw content",
                "extends": {
                    "finish": [
                        291,
                        21
                    ],
                    "start": [
                        291,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                291,
                                21
                            ],
                            "start": [
                                291,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    291,
                    21
                ],
                "name": "text",
                "rawdesc": "Raw content",
                "start": [
                    291,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawInline",
        "type": "type",
        "view": "pandoc.RawInline"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Raw inline content of a specified format\n",
                            "finish": [
                                308,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Raw inline content of a specified format\n",
                            "start": [
                                308,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.RawInline"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        308,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawInline"
                        }
                    ],
                    "start": [
                        308,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.RawInline:clone()\n  -> pandoc.RawInline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    308,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    308,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.RawInline.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pandoc reader options\n",
                "file": "pandoc/options.lua",
                "finish": [
                    5,
                    30
                ],
                "rawdesc": "Pandoc reader options\n",
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.ReaderOptions",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Set of known abbreviations",
                "extends": {
                    "finish": [
                        6,
                        29
                    ],
                    "start": [
                        6,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                6,
                                29
                            ],
                            "start": [
                                6,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    6,
                    29
                ],
                "name": "abbreviations",
                "rawdesc": "Set of known abbreviations",
                "start": [
                    6,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number of columns in terminal",
                "extends": {
                    "finish": [
                        7,
                        25
                    ],
                    "start": [
                        7,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                7,
                                25
                            ],
                            "start": [
                                7,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    7,
                    25
                ],
                "name": "columns",
                "rawdesc": "Number of columns in terminal",
                "start": [
                    7,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        8,
                        40
                    ],
                    "start": [
                        8,
                        34
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                8,
                                40
                            ],
                            "start": [
                                8,
                                34
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    8,
                    40
                ],
                "name": "default_image_extension",
                "start": [
                    8,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "String representation of the syntax extensions bit field",
                "extends": {
                    "finish": [
                        9,
                        26
                    ],
                    "start": [
                        9,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                9,
                                26
                            ],
                            "start": [
                                9,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    9,
                    26
                ],
                "name": "extensions",
                "rawdesc": "String representation of the syntax extensions bit field",
                "start": [
                    9,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Default classes for indented code blocks",
                "extends": {
                    "finish": [
                        10,
                        43
                    ],
                    "start": [
                        10,
                        32
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                10,
                                43
                            ],
                            "start": [
                                10,
                                32
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    10,
                    43
                ],
                "name": "indented_code_classes",
                "rawdesc": "Default classes for indented code blocks",
                "start": [
                    10,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Whether the input was a standalone document with header",
                "extends": {
                    "finish": [
                        11,
                        28
                    ],
                    "start": [
                        11,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                11,
                                28
                            ],
                            "start": [
                                11,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    11,
                    28
                ],
                "name": "standalone",
                "rawdesc": "Whether the input was a standalone document with header",
                "start": [
                    11,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "HTML comments are stripped instead of parsed as raw HTML",
                "extends": {
                    "finish": [
                        12,
                        32
                    ],
                    "start": [
                        12,
                        25
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                12,
                                32
                            ],
                            "start": [
                                12,
                                25
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    12,
                    32
                ],
                "name": "strip_comments",
                "rawdesc": "HTML comments are stripped instead of parsed as raw HTML",
                "start": [
                    12,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Width (i.e. equivalent number of spaces) of tab stops",
                "extends": {
                    "finish": [
                        13,
                        26
                    ],
                    "start": [
                        13,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                13,
                                26
                            ],
                            "start": [
                                13,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    13,
                    26
                ],
                "name": "tab_stop",
                "rawdesc": "Width (i.e. equivalent number of spaces) of tab stops",
                "start": [
                    13,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Track changes setting for docx; one of `accept-changes`, `reject-changes`, and `all-changes`",
                "extends": {
                    "finish": [
                        14,
                        71
                    ],
                    "start": [
                        14,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                40
                            ],
                            "start": [
                                14,
                                24
                            ],
                            "type": "doc.type.string",
                            "view": "\"accept-changes\""
                        },
                        {
                            "finish": [
                                14,
                                57
                            ],
                            "start": [
                                14,
                                41
                            ],
                            "type": "doc.type.string",
                            "view": "\"reject-changes\""
                        },
                        {
                            "finish": [
                                14,
                                71
                            ],
                            "start": [
                                14,
                                58
                            ],
                            "type": "doc.type.string",
                            "view": "\"all-changes\""
                        }
                    ],
                    "view": "\"accept-changes\"|\"all-changes\"|\"reject-changes\""
                },
                "file": "pandoc/options.lua",
                "finish": [
                    14,
                    71
                ],
                "name": "track_changes",
                "rawdesc": "Track changes setting for docx; one of `accept-changes`, `reject-changes`, and `all-changes`",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "\"accept-changes\"|\"all-changes\"|\"reject-changes\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.ReaderOptions",
        "type": "type",
        "view": "pandoc.ReaderOptions"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a new ReaderOptions value.\n\nUsage:\n\n    -- copy of the reader options that were defined on the command line.\n    local cli_opts = pandoc.ReaderOptions(PANDOC_READER_OPTIONS)\n\n    -- default reader options, but columns set to 66.\n    local short_colums_opts = pandoc.ReaderOptions {columns = 66}\n\n\n@*param* `opts` — Either a table with a subset of the properties of a ReaderOptions object, or another ReaderOptions object.",
                "extends": {
                    "args": [
                        {
                            "desc": "Either a table with a subset of the properties of a ReaderOptions object, or another ReaderOptions object.",
                            "finish": [
                                31,
                                34
                            ],
                            "name": "opts",
                            "rawdesc": "Either a table with a subset of the properties of a ReaderOptions object, or another ReaderOptions object.",
                            "start": [
                                31,
                                30
                            ],
                            "type": "local",
                            "view": "pandoc.ReaderOptions|table<string, any>"
                        }
                    ],
                    "desc": "Creates a new ReaderOptions value.\n\nUsage:\n\n    -- copy of the reader options that were defined on the command line.\n    local cli_opts = pandoc.ReaderOptions(PANDOC_READER_OPTIONS)\n\n    -- default reader options, but columns set to 66.\n    local short_colums_opts = pandoc.ReaderOptions {columns = 66}\n\n\n@*param* `opts` — Either a table with a subset of the properties of a ReaderOptions object, or another ReaderOptions object.",
                    "finish": [
                        31,
                        39
                    ],
                    "rawdesc": "Creates a new ReaderOptions value.\n\nUsage:\n\n    -- copy of the reader options that were defined on the command line.\n    local cli_opts = pandoc.ReaderOptions(PANDOC_READER_OPTIONS)\n\n    -- default reader options, but columns set to 66.\n    local short_colums_opts = pandoc.ReaderOptions {columns = 66}\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.ReaderOptions"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.ReaderOptions(opts: pandoc.ReaderOptions|table<string, any>)\n  -> pandoc.ReaderOptions"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    31,
                    29
                ],
                "name": "ReaderOptions",
                "rawdesc": "Creates a new ReaderOptions value.\n\nUsage:\n\n    -- copy of the reader options that were defined on the command line.\n    local cli_opts = pandoc.ReaderOptions(PANDOC_READER_OPTIONS)\n\n    -- default reader options, but columns set to 66.\n    local short_colums_opts = pandoc.ReaderOptions {columns = 66}\n",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.ReaderOptions",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table row\n",
                "extends": {
                    "desc": "A table row\n",
                    "finish": [
                        171,
                        15
                    ],
                    "rawdesc": "A table row\n",
                    "start": [
                        171,
                        13
                    ],
                    "type": "table",
                    "view": "pandoc.Row"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    171,
                    10
                ],
                "name": "Row",
                "rawdesc": "A table row\n",
                "start": [
                    171,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Row",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a table row\n\n\n@*param* `cells` — List of `Cell`\n\n@*param* `attr` — Row attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "List of `Cell`",
                            "finish": [
                                179,
                                25
                            ],
                            "name": "cells",
                            "rawdesc": "List of `Cell`",
                            "start": [
                                179,
                                20
                            ],
                            "type": "local",
                            "view": "(pandoc.List)?"
                        },
                        {
                            "desc": "Row attributes",
                            "finish": [
                                179,
                                31
                            ],
                            "name": "attr",
                            "rawdesc": "Row attributes",
                            "start": [
                                179,
                                27
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a table row\n\n\n@*param* `cells` — List of `Cell`\n\n@*param* `attr` — Row attributes",
                    "finish": [
                        179,
                        36
                    ],
                    "rawdesc": "Creates a table row\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Row"
                        }
                    ],
                    "start": [
                        179,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Row(cells?: pandoc.List, attr?: pandoc.Attr)\n  -> pandoc.Row"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    179,
                    19
                ],
                "name": "Row",
                "rawdesc": "Creates a table row\n",
                "start": [
                    179,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Row",
                "visible": "public"
            }
        ],
        "name": "pandoc.Row",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table row\n",
                "file": "pandoc/components.lua",
                "finish": [
                    168,
                    20
                ],
                "rawdesc": "A table row\n",
                "start": [
                    168,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Row",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Element attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        169,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        169,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                169,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                169,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    169,
                    26
                ],
                "name": "attr",
                "rawdesc": "Element attributes",
                "start": [
                    169,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Cell`",
                "extends": {
                    "finish": [
                        170,
                        27
                    ],
                    "start": [
                        170,
                        16
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                170,
                                27
                            ],
                            "start": [
                                170,
                                16
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    170,
                    27
                ],
                "name": "cells",
                "rawdesc": "List of `Cell`",
                "start": [
                    170,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table row\n",
                            "finish": [
                                185,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table row\n",
                            "start": [
                                185,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Row"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        185,
                        31
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Row"
                        }
                    ],
                    "start": [
                        185,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Row:clone()\n  -> pandoc.Row"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    185,
                    25
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    185,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Row",
        "type": "type",
        "view": "pandoc.Row"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table row\n",
                            "finish": [
                                185,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table row\n",
                            "start": [
                                185,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Row"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        185,
                        31
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Row"
                        }
                    ],
                    "start": [
                        185,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Row:clone()\n  -> pandoc.Row"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    185,
                    25
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    185,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Row.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                "file": "pandoc/table.lua",
                "finish": [
                    16,
                    28
                ],
                "rawdesc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                "start": [
                    16,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.SimpleTable",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of table alignments",
                "extends": {
                    "finish": [
                        18,
                        28
                    ],
                    "start": [
                        18,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                18,
                                28
                            ],
                            "start": [
                                18,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    18,
                    28
                ],
                "name": "aligns",
                "rawdesc": "List of table alignments",
                "start": [
                    18,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of inlines",
                "extends": {
                    "finish": [
                        17,
                        29
                    ],
                    "start": [
                        17,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                17,
                                29
                            ],
                            "start": [
                                17,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    17,
                    29
                ],
                "name": "caption",
                "rawdesc": "List of inlines",
                "start": [
                    17,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                            "finish": [
                                39,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                            "start": [
                                39,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        39,
                        39
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.SimpleTable:clone()\n  -> pandoc.SimpleTable"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    39,
                    33
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    39,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Table header row (a list of blocks, one for each cell)",
                "extends": {
                    "finish": [
                        20,
                        29
                    ],
                    "start": [
                        20,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                20,
                                29
                            ],
                            "start": [
                                20,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    20,
                    29
                ],
                "name": "headers",
                "rawdesc": "Table header row (a list of blocks, one for each cell)",
                "start": [
                    20,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of rows, where row is a list of blocks (one for each cell)",
                "extends": {
                    "finish": [
                        21,
                        26
                    ],
                    "start": [
                        21,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "start": [
                                21,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    21,
                    26
                ],
                "name": "rows",
                "rawdesc": "List of rows, where row is a list of blocks (one for each cell)",
                "start": [
                    21,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Column widths",
                "extends": {
                    "finish": [
                        19,
                        25
                    ],
                    "start": [
                        19,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                19,
                                25
                            ],
                            "start": [
                                19,
                                17
                            ],
                            "type": "doc.type.array",
                            "view": "number[]"
                        }
                    ],
                    "view": "number[]"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    19,
                    25
                ],
                "name": "widths",
                "rawdesc": "Column widths",
                "start": [
                    19,
                    10
                ],
                "type": "doc.field",
                "view": "number[]",
                "visible": "public"
            }
        ],
        "name": "pandoc.SimpleTable",
        "type": "type",
        "view": "pandoc.SimpleTable"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                "extends": {
                    "desc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                    "finish": [
                        22,
                        23
                    ],
                    "rawdesc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                    "start": [
                        22,
                        21
                    ],
                    "type": "table",
                    "view": "pandoc.SimpleTable"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    22,
                    18
                ],
                "name": "SimpleTable",
                "rawdesc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                "start": [
                    22,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.SimpleTable",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a simple table resembling the old (pre pandoc 2.10) table type.\n\n\n@*param* `caption` — Inline or list of inlines\n\n@*param* `aligns` — List of column alignments\n\n@*param* `widths` — Column widths\n\n@*param* `headers` — Table header row (a list of blocks, one for each cell)\n\n@*param* `rows` — List of rows, where row is a list of blocks (one for each cell)",
                "extends": {
                    "args": [
                        {
                            "desc": "Inline or list of inlines",
                            "finish": [
                                33,
                                35
                            ],
                            "name": "caption",
                            "rawdesc": "Inline or list of inlines",
                            "start": [
                                33,
                                28
                            ],
                            "type": "local",
                            "view": "string|pandoc.Inline|pandoc.List"
                        },
                        {
                            "desc": "List of column alignments",
                            "finish": [
                                33,
                                43
                            ],
                            "name": "aligns",
                            "rawdesc": "List of column alignments",
                            "start": [
                                33,
                                37
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Column widths",
                            "finish": [
                                33,
                                51
                            ],
                            "name": "widths",
                            "rawdesc": "Column widths",
                            "start": [
                                33,
                                45
                            ],
                            "type": "local",
                            "view": "number[]"
                        },
                        {
                            "desc": "Table header row (a list of blocks, one for each cell)",
                            "finish": [
                                33,
                                60
                            ],
                            "name": "headers",
                            "rawdesc": "Table header row (a list of blocks, one for each cell)",
                            "start": [
                                33,
                                53
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "List of rows, where row is a list of blocks (one for each cell)",
                            "finish": [
                                33,
                                66
                            ],
                            "name": "rows",
                            "rawdesc": "List of rows, where row is a list of blocks (one for each cell)",
                            "start": [
                                33,
                                62
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        }
                    ],
                    "desc": "Creates a simple table resembling the old (pre pandoc 2.10) table type.\n\n\n@*param* `caption` — Inline or list of inlines\n\n@*param* `aligns` — List of column alignments\n\n@*param* `widths` — Column widths\n\n@*param* `headers` — Table header row (a list of blocks, one for each cell)\n\n@*param* `rows` — List of rows, where row is a list of blocks (one for each cell)",
                    "finish": [
                        33,
                        71
                    ],
                    "rawdesc": "Creates a simple table resembling the old (pre pandoc 2.10) table type.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "start": [
                        33,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.SimpleTable(caption: string|pandoc.Inline|pandoc.List, aligns: pandoc.List, widths: number[], headers: pandoc.List, rows: pandoc.List)\n  -> pandoc.SimpleTable"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    33,
                    27
                ],
                "name": "SimpleTable",
                "rawdesc": "Creates a simple table resembling the old (pre pandoc 2.10) table type.\n",
                "start": [
                    33,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.SimpleTable",
                "visible": "public"
            }
        ],
        "name": "pandoc.SimpleTable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                            "finish": [
                                39,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                            "start": [
                                39,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        39,
                        39
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.SimpleTable:clone()\n  -> pandoc.SimpleTable"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    39,
                    33
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    39,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.SimpleTable.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Small caps text\n",
                "extends": {
                    "desc": "Small caps text\n",
                    "finish": [
                        320,
                        21
                    ],
                    "rawdesc": "Small caps text\n",
                    "start": [
                        320,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.SmallCaps"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    320,
                    16
                ],
                "name": "SmallCaps",
                "rawdesc": "Small caps text\n",
                "start": [
                    320,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.SmallCaps",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates text rendered in small caps\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                327,
                                33
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                327,
                                26
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates text rendered in small caps\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        327,
                        38
                    ],
                    "rawdesc": "Creates text rendered in small caps\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SmallCaps"
                        }
                    ],
                    "start": [
                        327,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.SmallCaps(content: pandoc.Inlines)\n  -> pandoc.SmallCaps"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    327,
                    25
                ],
                "name": "SmallCaps",
                "rawdesc": "Creates text rendered in small caps\n",
                "start": [
                    327,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.SmallCaps",
                "visible": "public"
            }
        ],
        "name": "pandoc.SmallCaps",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Small caps text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            316,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            316,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    316,
                    42
                ],
                "rawdesc": "Small caps text\n",
                "start": [
                    316,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.SmallCaps",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Small caps text\n",
                            "finish": [
                                333,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Small caps text\n",
                            "start": [
                                333,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.SmallCaps"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        333,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SmallCaps"
                        }
                    ],
                    "start": [
                        333,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.SmallCaps:clone()\n  -> pandoc.SmallCaps"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    333,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    333,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        317,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        317,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                317,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                317,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    317,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    317,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        318,
                        23
                    ],
                    "start": [
                        318,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                318,
                                23
                            ],
                            "start": [
                                318,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"SmallCaps\""
                        }
                    ],
                    "view": "\"SmallCaps\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    318,
                    23
                ],
                "name": "t",
                "start": [
                    318,
                    10
                ],
                "type": "doc.field",
                "view": "\"SmallCaps\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        319,
                        25
                    ],
                    "start": [
                        319,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                319,
                                25
                            ],
                            "start": [
                                319,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"SmallCaps\""
                        }
                    ],
                    "view": "\"SmallCaps\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    319,
                    25
                ],
                "name": "tag",
                "start": [
                    319,
                    10
                ],
                "type": "doc.field",
                "view": "\"SmallCaps\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.SmallCaps",
        "type": "type",
        "view": "pandoc.SmallCaps"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Small caps text\n",
                            "finish": [
                                333,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Small caps text\n",
                            "start": [
                                333,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.SmallCaps"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        333,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SmallCaps"
                        }
                    ],
                    "start": [
                        333,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.SmallCaps:clone()\n  -> pandoc.SmallCaps"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    333,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    333,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.SmallCaps.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Soft line break\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            341,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            341,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    341,
                    42
                ],
                "rawdesc": "Soft line break\n",
                "start": [
                    341,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.SoftBreak",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Soft line break\n",
                            "finish": [
                                356,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Soft line break\n",
                            "start": [
                                356,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.SoftBreak"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        356,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SoftBreak"
                        }
                    ],
                    "start": [
                        356,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.SoftBreak:clone()\n  -> pandoc.SoftBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    356,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    356,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        342,
                        23
                    ],
                    "start": [
                        342,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                342,
                                23
                            ],
                            "start": [
                                342,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"SoftBreak\""
                        }
                    ],
                    "view": "\"SoftBreak\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    342,
                    23
                ],
                "name": "t",
                "start": [
                    342,
                    10
                ],
                "type": "doc.field",
                "view": "\"SoftBreak\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        343,
                        25
                    ],
                    "start": [
                        343,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                343,
                                25
                            ],
                            "start": [
                                343,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"SoftBreak\""
                        }
                    ],
                    "view": "\"SoftBreak\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    343,
                    25
                ],
                "name": "tag",
                "start": [
                    343,
                    10
                ],
                "type": "doc.field",
                "view": "\"SoftBreak\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.SoftBreak",
        "type": "type",
        "view": "pandoc.SoftBreak"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Soft line break\n",
                "extends": {
                    "desc": "Soft line break\n",
                    "finish": [
                        344,
                        21
                    ],
                    "rawdesc": "Soft line break\n",
                    "start": [
                        344,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.SoftBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    344,
                    16
                ],
                "name": "SoftBreak",
                "rawdesc": "Soft line break\n",
                "start": [
                    344,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.SoftBreak",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a soft line break\n",
                "extends": {
                    "args": [],
                    "desc": "Create a soft line break\n",
                    "finish": [
                        350,
                        31
                    ],
                    "rawdesc": "Create a soft line break\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SoftBreak"
                        }
                    ],
                    "start": [
                        350,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.SoftBreak()\n  -> pandoc.SoftBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    350,
                    25
                ],
                "name": "SoftBreak",
                "rawdesc": "Create a soft line break\n",
                "start": [
                    350,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.SoftBreak",
                "visible": "public"
            }
        ],
        "name": "pandoc.SoftBreak",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Soft line break\n",
                            "finish": [
                                356,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Soft line break\n",
                            "start": [
                                356,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.SoftBreak"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        356,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SoftBreak"
                        }
                    ],
                    "start": [
                        356,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.SoftBreak:clone()\n  -> pandoc.SoftBreak"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    356,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    356,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.SoftBreak.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inter-word space\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            363,
                            38
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            363,
                            25
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    363,
                    38
                ],
                "rawdesc": "Inter-word space\n",
                "start": [
                    363,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Space",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Inter-word space\n",
                            "finish": [
                                378,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Inter-word space\n",
                            "start": [
                                378,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Space"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        378,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Space"
                        }
                    ],
                    "start": [
                        378,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Space:clone()\n  -> pandoc.Space"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    378,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    378,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        364,
                        19
                    ],
                    "start": [
                        364,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                364,
                                19
                            ],
                            "start": [
                                364,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Space\""
                        }
                    ],
                    "view": "\"Space\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    364,
                    19
                ],
                "name": "t",
                "start": [
                    364,
                    10
                ],
                "type": "doc.field",
                "view": "\"Space\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        365,
                        21
                    ],
                    "start": [
                        365,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                365,
                                21
                            ],
                            "start": [
                                365,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Space\""
                        }
                    ],
                    "view": "\"Space\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    365,
                    21
                ],
                "name": "tag",
                "start": [
                    365,
                    10
                ],
                "type": "doc.field",
                "view": "\"Space\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Space",
        "type": "type",
        "view": "pandoc.Space"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inter-word space\n",
                "extends": {
                    "desc": "Inter-word space\n",
                    "finish": [
                        366,
                        17
                    ],
                    "rawdesc": "Inter-word space\n",
                    "start": [
                        366,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.Space"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    366,
                    12
                ],
                "name": "Space",
                "rawdesc": "Inter-word space\n",
                "start": [
                    366,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Space",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create an inter-word space\n",
                "extends": {
                    "args": [],
                    "desc": "Create an inter-word space\n",
                    "finish": [
                        372,
                        27
                    ],
                    "rawdesc": "Create an inter-word space\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Space"
                        }
                    ],
                    "start": [
                        372,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Space()\n  -> pandoc.Space"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    372,
                    21
                ],
                "name": "Space",
                "rawdesc": "Create an inter-word space\n",
                "start": [
                    372,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Space",
                "visible": "public"
            }
        ],
        "name": "pandoc.Space",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Inter-word space\n",
                            "finish": [
                                378,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Inter-word space\n",
                            "start": [
                                378,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Space"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        378,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Space"
                        }
                    ],
                    "start": [
                        378,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Space:clone()\n  -> pandoc.Space"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    378,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    378,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Space.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Generic inline container with attributes\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            385,
                            37
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            385,
                            24
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    385,
                    37
                ],
                "rawdesc": "Generic inline container with attributes\n",
                "start": [
                    385,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Span",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        387,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        387,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                387,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                387,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    387,
                    26
                ],
                "name": "attr",
                "rawdesc": "Inline attributes",
                "start": [
                    387,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        390,
                        41
                    ],
                    "start": [
                        390,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                390,
                                41
                            ],
                            "start": [
                                390,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    390,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    390,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        389,
                        29
                    ],
                    "start": [
                        389,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                389,
                                29
                            ],
                            "start": [
                                389,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    389,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    389,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Generic inline container with attributes\n",
                            "finish": [
                                407,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Generic inline container with attributes\n",
                            "start": [
                                407,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Span"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        407,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Span"
                        }
                    ],
                    "start": [
                        407,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Span:clone()\n  -> pandoc.Span"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    407,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    407,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        386,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        386,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                386,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                386,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    386,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    386,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        388,
                        27
                    ],
                    "start": [
                        388,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                388,
                                27
                            ],
                            "start": [
                                388,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    388,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    388,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        391,
                        18
                    ],
                    "start": [
                        391,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                391,
                                18
                            ],
                            "start": [
                                391,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Span\""
                        }
                    ],
                    "view": "\"Span\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    391,
                    18
                ],
                "name": "t",
                "start": [
                    391,
                    10
                ],
                "type": "doc.field",
                "view": "\"Span\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        392,
                        20
                    ],
                    "start": [
                        392,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                392,
                                20
                            ],
                            "start": [
                                392,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Span\""
                        }
                    ],
                    "view": "\"Span\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    392,
                    20
                ],
                "name": "tag",
                "start": [
                    392,
                    10
                ],
                "type": "doc.field",
                "view": "\"Span\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Span",
        "type": "type",
        "view": "pandoc.Span"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Generic inline container with attributes\n",
                "extends": {
                    "desc": "Generic inline container with attributes\n",
                    "finish": [
                        393,
                        16
                    ],
                    "rawdesc": "Generic inline container with attributes\n",
                    "start": [
                        393,
                        14
                    ],
                    "type": "table",
                    "view": "pandoc.Span"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    393,
                    11
                ],
                "name": "Span",
                "rawdesc": "Generic inline container with attributes\n",
                "start": [
                    393,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Span",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a Span inline element\n\n\n@*param* `content` — Span content (list of inlines)\n\n@*param* `attr` — Span attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Span content (list of inlines)",
                            "finish": [
                                401,
                                28
                            ],
                            "name": "content",
                            "rawdesc": "Span content (list of inlines)",
                            "start": [
                                401,
                                21
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        },
                        {
                            "desc": "Span attributes",
                            "finish": [
                                401,
                                34
                            ],
                            "name": "attr",
                            "rawdesc": "Span attributes",
                            "start": [
                                401,
                                30
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a Span inline element\n\n\n@*param* `content` — Span content (list of inlines)\n\n@*param* `attr` — Span attributes",
                    "finish": [
                        401,
                        39
                    ],
                    "rawdesc": "Creates a Span inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Span"
                        }
                    ],
                    "start": [
                        401,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Span(content: pandoc.Inlines, attr?: pandoc.Attr)\n  -> pandoc.Span"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    401,
                    20
                ],
                "name": "Span",
                "rawdesc": "Creates a Span inline element\n",
                "start": [
                    401,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Span",
                "visible": "public"
            }
        ],
        "name": "pandoc.Span",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Generic inline container with attributes\n",
                            "finish": [
                                407,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Generic inline container with attributes\n",
                            "start": [
                                407,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Span"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        407,
                        32
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Span"
                        }
                    ],
                    "start": [
                        407,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Span:clone()\n  -> pandoc.Span"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    407,
                    26
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    407,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Span.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            415,
                            36
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            415,
                            23
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    415,
                    36
                ],
                "rawdesc": "Text\n",
                "start": [
                    415,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Str",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Text\n",
                            "finish": [
                                432,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Text\n",
                            "start": [
                                432,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Str"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        432,
                        31
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Str"
                        }
                    ],
                    "start": [
                        432,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Str:clone()\n  -> pandoc.Str"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    432,
                    25
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    432,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        417,
                        17
                    ],
                    "start": [
                        417,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                417,
                                17
                            ],
                            "start": [
                                417,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Str\""
                        }
                    ],
                    "view": "\"Str\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    417,
                    17
                ],
                "name": "t",
                "start": [
                    417,
                    10
                ],
                "type": "doc.field",
                "view": "\"Str\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        418,
                        19
                    ],
                    "start": [
                        418,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                418,
                                19
                            ],
                            "start": [
                                418,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Str\""
                        }
                    ],
                    "view": "\"Str\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    418,
                    19
                ],
                "name": "tag",
                "start": [
                    418,
                    10
                ],
                "type": "doc.field",
                "view": "\"Str\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Content",
                "extends": {
                    "finish": [
                        416,
                        21
                    ],
                    "start": [
                        416,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                416,
                                21
                            ],
                            "start": [
                                416,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    416,
                    21
                ],
                "name": "text",
                "rawdesc": "Content",
                "start": [
                    416,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.Str",
        "type": "type",
        "view": "pandoc.Str"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Text\n",
                "extends": {
                    "desc": "Text\n",
                    "finish": [
                        419,
                        15
                    ],
                    "rawdesc": "Text\n",
                    "start": [
                        419,
                        13
                    ],
                    "type": "table",
                    "view": "pandoc.Str"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    419,
                    10
                ],
                "name": "Str",
                "rawdesc": "Text\n",
                "start": [
                    419,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Str",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates string\n\n\n@*param* `text` — = Content",
                "extends": {
                    "args": [
                        {
                            "desc": "= Content",
                            "finish": [
                                426,
                                24
                            ],
                            "name": "text",
                            "rawdesc": "= Content",
                            "start": [
                                426,
                                20
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Creates string\n\n\n@*param* `text` — = Content",
                    "finish": [
                        426,
                        29
                    ],
                    "rawdesc": "Creates string\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Str"
                        }
                    ],
                    "start": [
                        426,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Str(text: string)\n  -> pandoc.Str"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    426,
                    19
                ],
                "name": "Str",
                "rawdesc": "Creates string\n",
                "start": [
                    426,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Str",
                "visible": "public"
            }
        ],
        "name": "pandoc.Str",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Text\n",
                            "finish": [
                                432,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Text\n",
                            "start": [
                                432,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Str"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        432,
                        31
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Str"
                        }
                    ],
                    "start": [
                        432,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Str:clone()\n  -> pandoc.Str"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    432,
                    25
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    432,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Str.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Strikeout text\n",
                "extends": {
                    "desc": "Strikeout text\n",
                    "finish": [
                        444,
                        21
                    ],
                    "rawdesc": "Strikeout text\n",
                    "start": [
                        444,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.Strikeout"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    444,
                    16
                ],
                "name": "Strikeout",
                "rawdesc": "Strikeout text\n",
                "start": [
                    444,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Strikeout",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates text which is struck out.\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                451,
                                33
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                451,
                                26
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates text which is struck out.\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        451,
                        38
                    ],
                    "rawdesc": "Creates text which is struck out.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Strikeout"
                        }
                    ],
                    "start": [
                        451,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Strikeout(content: pandoc.Inlines)\n  -> pandoc.Strikeout"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    451,
                    25
                ],
                "name": "Strikeout",
                "rawdesc": "Creates text which is struck out.\n",
                "start": [
                    451,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Strikeout",
                "visible": "public"
            }
        ],
        "name": "pandoc.Strikeout",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Strikeout text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            440,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            440,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    440,
                    42
                ],
                "rawdesc": "Strikeout text\n",
                "start": [
                    440,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Strikeout",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Strikeout text\n",
                            "finish": [
                                457,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Strikeout text\n",
                            "start": [
                                457,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Strikeout"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        457,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Strikeout"
                        }
                    ],
                    "start": [
                        457,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Strikeout:clone()\n  -> pandoc.Strikeout"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    457,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    457,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        441,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        441,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                441,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                441,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    441,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    441,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        442,
                        23
                    ],
                    "start": [
                        442,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                442,
                                23
                            ],
                            "start": [
                                442,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Strikeout\""
                        }
                    ],
                    "view": "\"Strikeout\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    442,
                    23
                ],
                "name": "t",
                "start": [
                    442,
                    10
                ],
                "type": "doc.field",
                "view": "\"Strikeout\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        443,
                        25
                    ],
                    "start": [
                        443,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                443,
                                25
                            ],
                            "start": [
                                443,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Strikeout\""
                        }
                    ],
                    "view": "\"Strikeout\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    443,
                    25
                ],
                "name": "tag",
                "start": [
                    443,
                    10
                ],
                "type": "doc.field",
                "view": "\"Strikeout\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Strikeout",
        "type": "type",
        "view": "pandoc.Strikeout"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Strikeout text\n",
                            "finish": [
                                457,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Strikeout text\n",
                            "start": [
                                457,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Strikeout"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        457,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Strikeout"
                        }
                    ],
                    "start": [
                        457,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Strikeout:clone()\n  -> pandoc.Strikeout"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    457,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    457,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Strikeout.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Strongly emphasized text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            464,
                            39
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            464,
                            26
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    464,
                    39
                ],
                "rawdesc": "Strongly emphasized text\n",
                "start": [
                    464,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Strong",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Strongly emphasized text\n",
                            "finish": [
                                481,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Strongly emphasized text\n",
                            "start": [
                                481,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Strong"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        481,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Strong"
                        }
                    ],
                    "start": [
                        481,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Strong:clone()\n  -> pandoc.Strong"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    481,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    481,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        465,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        465,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                465,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                465,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    465,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    465,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        466,
                        20
                    ],
                    "start": [
                        466,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                466,
                                20
                            ],
                            "start": [
                                466,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Strong\""
                        }
                    ],
                    "view": "\"Strong\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    466,
                    20
                ],
                "name": "t",
                "start": [
                    466,
                    10
                ],
                "type": "doc.field",
                "view": "\"Strong\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        467,
                        22
                    ],
                    "start": [
                        467,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                467,
                                22
                            ],
                            "start": [
                                467,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Strong\""
                        }
                    ],
                    "view": "\"Strong\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    467,
                    22
                ],
                "name": "tag",
                "start": [
                    467,
                    10
                ],
                "type": "doc.field",
                "view": "\"Strong\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Strong",
        "type": "type",
        "view": "pandoc.Strong"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Strongly emphasized text\n",
                "extends": {
                    "desc": "Strongly emphasized text\n",
                    "finish": [
                        468,
                        18
                    ],
                    "rawdesc": "Strongly emphasized text\n",
                    "start": [
                        468,
                        16
                    ],
                    "type": "table",
                    "view": "pandoc.Strong"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    468,
                    13
                ],
                "name": "Strong",
                "rawdesc": "Strongly emphasized text\n",
                "start": [
                    468,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Strong",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a Strong element, whose text is usually displayed in a bold font.\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                475,
                                30
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                475,
                                23
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates a Strong element, whose text is usually displayed in a bold font.\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        475,
                        35
                    ],
                    "rawdesc": "Creates a Strong element, whose text is usually displayed in a bold font.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Strong"
                        }
                    ],
                    "start": [
                        475,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Strong(content: pandoc.Inlines)\n  -> pandoc.Strong"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    475,
                    22
                ],
                "name": "Strong",
                "rawdesc": "Creates a Strong element, whose text is usually displayed in a bold font.\n",
                "start": [
                    475,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Strong",
                "visible": "public"
            }
        ],
        "name": "pandoc.Strong",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Strongly emphasized text\n",
                            "finish": [
                                481,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Strongly emphasized text\n",
                            "start": [
                                481,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Strong"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        481,
                        34
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Strong"
                        }
                    ],
                    "start": [
                        481,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Strong:clone()\n  -> pandoc.Strong"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    481,
                    28
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    481,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Strong.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Subscripted text\n",
                "extends": {
                    "desc": "Subscripted text\n",
                    "finish": [
                        492,
                        21
                    ],
                    "rawdesc": "Subscripted text\n",
                    "start": [
                        492,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.Subscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    492,
                    16
                ],
                "name": "Subscript",
                "rawdesc": "Subscripted text\n",
                "start": [
                    492,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Subscript",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a Subscript inline element\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                499,
                                33
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                499,
                                26
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates a Subscript inline element\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        499,
                        38
                    ],
                    "rawdesc": "Creates a Subscript inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Subscript"
                        }
                    ],
                    "start": [
                        499,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Subscript(content: pandoc.Inlines)\n  -> pandoc.Subscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    499,
                    25
                ],
                "name": "Subscript",
                "rawdesc": "Creates a Subscript inline element\n",
                "start": [
                    499,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Subscript",
                "visible": "public"
            }
        ],
        "name": "pandoc.Subscript",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Subscripted text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            488,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            488,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    488,
                    42
                ],
                "rawdesc": "Subscripted text\n",
                "start": [
                    488,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Subscript",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Subscripted text\n",
                            "finish": [
                                505,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Subscripted text\n",
                            "start": [
                                505,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Subscript"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        505,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Subscript"
                        }
                    ],
                    "start": [
                        505,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Subscript:clone()\n  -> pandoc.Subscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    505,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    505,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        489,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        489,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                489,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                489,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    489,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    489,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        490,
                        23
                    ],
                    "start": [
                        490,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                490,
                                23
                            ],
                            "start": [
                                490,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Subscript\""
                        }
                    ],
                    "view": "\"Subscript\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    490,
                    23
                ],
                "name": "t",
                "start": [
                    490,
                    10
                ],
                "type": "doc.field",
                "view": "\"Subscript\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        491,
                        25
                    ],
                    "start": [
                        491,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                491,
                                25
                            ],
                            "start": [
                                491,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Subscript\""
                        }
                    ],
                    "view": "\"Subscript\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    491,
                    25
                ],
                "name": "tag",
                "start": [
                    491,
                    10
                ],
                "type": "doc.field",
                "view": "\"Subscript\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Subscript",
        "type": "type",
        "view": "pandoc.Subscript"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Subscripted text\n",
                            "finish": [
                                505,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Subscripted text\n",
                            "start": [
                                505,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Subscript"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        505,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Subscript"
                        }
                    ],
                    "start": [
                        505,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Subscript:clone()\n  -> pandoc.Subscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    505,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    505,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Subscript.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Superscripted text\n",
                "extends": {
                    "desc": "Superscripted text\n",
                    "finish": [
                        516,
                        23
                    ],
                    "rawdesc": "Superscripted text\n",
                    "start": [
                        516,
                        21
                    ],
                    "type": "table",
                    "view": "pandoc.Superscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    516,
                    18
                ],
                "name": "Superscript",
                "rawdesc": "Superscripted text\n",
                "start": [
                    516,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Superscript",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a Superscript inline element\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                523,
                                35
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                523,
                                28
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates a Superscript inline element\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        523,
                        40
                    ],
                    "rawdesc": "Creates a Superscript inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Superscript"
                        }
                    ],
                    "start": [
                        523,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Superscript(content: pandoc.Inlines)\n  -> pandoc.Superscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    523,
                    27
                ],
                "name": "Superscript",
                "rawdesc": "Creates a Superscript inline element\n",
                "start": [
                    523,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Superscript",
                "visible": "public"
            }
        ],
        "name": "pandoc.Superscript",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Superscripted text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            512,
                            44
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            512,
                            31
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    512,
                    44
                ],
                "rawdesc": "Superscripted text\n",
                "start": [
                    512,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Superscript",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Superscripted text\n",
                            "finish": [
                                529,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Superscripted text\n",
                            "start": [
                                529,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Superscript"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        529,
                        39
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Superscript"
                        }
                    ],
                    "start": [
                        529,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Superscript:clone()\n  -> pandoc.Superscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    529,
                    33
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    529,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        513,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        513,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                513,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                513,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    513,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    513,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        514,
                        25
                    ],
                    "start": [
                        514,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                514,
                                25
                            ],
                            "start": [
                                514,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Superscript\""
                        }
                    ],
                    "view": "\"Superscript\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    514,
                    25
                ],
                "name": "t",
                "start": [
                    514,
                    10
                ],
                "type": "doc.field",
                "view": "\"Superscript\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        515,
                        27
                    ],
                    "start": [
                        515,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                515,
                                27
                            ],
                            "start": [
                                515,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Superscript\""
                        }
                    ],
                    "view": "\"Superscript\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    515,
                    27
                ],
                "name": "tag",
                "start": [
                    515,
                    10
                ],
                "type": "doc.field",
                "view": "\"Superscript\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Superscript",
        "type": "type",
        "view": "pandoc.Superscript"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Superscripted text\n",
                            "finish": [
                                529,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Superscripted text\n",
                            "start": [
                                529,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Superscript"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        529,
                        39
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Superscript"
                        }
                    ],
                    "start": [
                        529,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Superscript:clone()\n  -> pandoc.Superscript"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    529,
                    33
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    529,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Superscript.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Author name is suppressed.\n",
                "extends": {
                    "finish": [
                        10,
                        40
                    ],
                    "start": [
                        10,
                        24
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    10,
                    21
                ],
                "name": "SuppressAuthor",
                "rawdesc": "Author name is suppressed.\n",
                "start": [
                    10,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.SuppressAuthor",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "extends": [
                    {
                        "desc": "Block element\n",
                        "finish": [
                            454,
                            37
                        ],
                        "rawdesc": "Block element\n",
                        "start": [
                            454,
                            25
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Block"
                    }
                ],
                "file": "pandoc/blocks.lua",
                "finish": [
                    454,
                    37
                ],
                "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "start": [
                    454,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "file": "pandoc/table.lua",
                "finish": [
                    5,
                    22
                ],
                "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "start": [
                    5,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Table",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        455,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        455,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                455,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                455,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    455,
                    26
                ],
                "name": "attr",
                "rawdesc": "Table attributes",
                "start": [
                    455,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        458,
                        41
                    ],
                    "start": [
                        458,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                458,
                                41
                            ],
                            "start": [
                                458,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    458,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    458,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Table bodies (list of `TableBody`)",
                "extends": {
                    "finish": [
                        462,
                        28
                    ],
                    "start": [
                        462,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                462,
                                28
                            ],
                            "start": [
                                462,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    462,
                    28
                ],
                "name": "bodies",
                "rawdesc": "Table bodies (list of `TableBody`)",
                "start": [
                    462,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Table caption",
                "extends": {
                    "desc": "The caption of a table, with an optional short caption.\n",
                    "finish": [
                        459,
                        32
                    ],
                    "rawdesc": "The caption of a table, with an optional short caption.\n",
                    "start": [
                        459,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "The caption of a table, with an optional short caption.\n",
                            "finish": [
                                459,
                                32
                            ],
                            "rawdesc": "The caption of a table, with an optional short caption.\n",
                            "start": [
                                459,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Caption"
                        }
                    ],
                    "view": "pandoc.Caption"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    459,
                    32
                ],
                "name": "caption",
                "rawdesc": "Table caption",
                "start": [
                    459,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Caption",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        457,
                        29
                    ],
                    "start": [
                        457,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                457,
                                29
                            ],
                            "start": [
                                457,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    457,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    457,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "finish": [
                                481,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "start": [
                                481,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Table"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        481,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Table"
                        }
                    ],
                    "start": [
                        481,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Table:clone()\n  -> pandoc.Table"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    481,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    481,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Column specifications, i.e., alignments and widths (list of `ColSpec`)",
                "extends": {
                    "finish": [
                        460,
                        30
                    ],
                    "start": [
                        460,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                460,
                                30
                            ],
                            "start": [
                                460,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    460,
                    30
                ],
                "name": "colspecs",
                "rawdesc": "Column specifications, i.e., alignments and widths (list of `ColSpec`)",
                "start": [
                    460,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Table foot",
                "extends": {
                    "desc": "The foot of a table\n",
                    "finish": [
                        463,
                        31
                    ],
                    "rawdesc": "The foot of a table\n",
                    "start": [
                        463,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "The foot of a table\n",
                            "finish": [
                                463,
                                31
                            ],
                            "rawdesc": "The foot of a table\n",
                            "start": [
                                463,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.TableFoot"
                        }
                    ],
                    "view": "pandoc.TableFoot"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    463,
                    31
                ],
                "name": "foot",
                "rawdesc": "Table foot",
                "start": [
                    463,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.TableFoot",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Table head",
                "extends": {
                    "desc": "The head of a table\n",
                    "finish": [
                        461,
                        31
                    ],
                    "rawdesc": "The head of a table\n",
                    "start": [
                        461,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "The head of a table\n",
                            "finish": [
                                461,
                                31
                            ],
                            "rawdesc": "The head of a table\n",
                            "start": [
                                461,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.TableHead"
                        }
                    ],
                    "view": "pandoc.TableHead"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    461,
                    31
                ],
                "name": "head",
                "rawdesc": "Table head",
                "start": [
                    461,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.TableHead",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        456,
                        27
                    ],
                    "start": [
                        456,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                456,
                                27
                            ],
                            "start": [
                                456,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    456,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    456,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        464,
                        19
                    ],
                    "start": [
                        464,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                464,
                                19
                            ],
                            "start": [
                                464,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Table\""
                        }
                    ],
                    "view": "\"Table\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    464,
                    19
                ],
                "name": "t",
                "start": [
                    464,
                    10
                ],
                "type": "doc.field",
                "view": "\"Table\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        465,
                        21
                    ],
                    "start": [
                        465,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                465,
                                21
                            ],
                            "start": [
                                465,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Table\""
                        }
                    ],
                    "view": "\"Table\""
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    465,
                    21
                ],
                "name": "tag",
                "start": [
                    465,
                    10
                ],
                "type": "doc.field",
                "view": "\"Table\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "finish": [
                                488,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "start": [
                                488,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Table"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                488,
                                37
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                488,
                                27
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        488,
                        42
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Table"
                        }
                    ],
                    "start": [
                        488,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Table:walk(lua_filter: table<string, function>)\n  -> pandoc.Table"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    488,
                    26
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    488,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Table",
        "type": "type",
        "view": "pandoc.Table"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "extends": {
                    "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                    "finish": [
                        466,
                        17
                    ],
                    "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                    "start": [
                        466,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.Table"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    466,
                    12
                ],
                "name": "Table",
                "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "start": [
                    466,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "@*param* `caption` — Table caption\n\n@*param* `colspecs` — Column specifications, i.e., alignments and widths (list of `ColSpec`)\n\n@*param* `head` — Table head\n\n@*param* `bodies` — Table bodies (list of `TableBody`)\n\n@*param* `foot` — Table foot\n\n@*param* `attr` — Table attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "Table caption",
                            "finish": [
                                475,
                                29
                            ],
                            "name": "caption",
                            "rawdesc": "Table caption",
                            "start": [
                                475,
                                22
                            ],
                            "type": "local",
                            "view": "pandoc.Caption"
                        },
                        {
                            "desc": "Column specifications, i.e., alignments and widths (list of `ColSpec`)",
                            "finish": [
                                475,
                                39
                            ],
                            "name": "colspecs",
                            "rawdesc": "Column specifications, i.e., alignments and widths (list of `ColSpec`)",
                            "start": [
                                475,
                                31
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Table head",
                            "finish": [
                                475,
                                45
                            ],
                            "name": "head",
                            "rawdesc": "Table head",
                            "start": [
                                475,
                                41
                            ],
                            "type": "local",
                            "view": "pandoc.TableHead"
                        },
                        {
                            "desc": "Table bodies (list of `TableBody`)",
                            "finish": [
                                475,
                                53
                            ],
                            "name": "bodies",
                            "rawdesc": "Table bodies (list of `TableBody`)",
                            "start": [
                                475,
                                47
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "Table foot",
                            "finish": [
                                475,
                                59
                            ],
                            "name": "foot",
                            "rawdesc": "Table foot",
                            "start": [
                                475,
                                55
                            ],
                            "type": "local",
                            "view": "pandoc.TableFoot"
                        },
                        {
                            "desc": "Table attributes",
                            "finish": [
                                475,
                                65
                            ],
                            "name": "attr",
                            "rawdesc": "Table attributes",
                            "start": [
                                475,
                                61
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "@*param* `caption` — Table caption\n\n@*param* `colspecs` — Column specifications, i.e., alignments and widths (list of `ColSpec`)\n\n@*param* `head` — Table head\n\n@*param* `bodies` — Table bodies (list of `TableBody`)\n\n@*param* `foot` — Table foot\n\n@*param* `attr` — Table attributes",
                    "finish": [
                        475,
                        70
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Table"
                        }
                    ],
                    "start": [
                        475,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Table(caption: pandoc.Caption, colspecs: pandoc.List, head: pandoc.TableHead, bodies: pandoc.List, foot: pandoc.TableFoot, attr?: pandoc.Attr)\n  -> pandoc.Table"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    475,
                    21
                ],
                "name": "Table",
                "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "start": [
                    475,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "extends": {
                    "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                    "finish": [
                        6,
                        17
                    ],
                    "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                    "start": [
                        6,
                        15
                    ],
                    "type": "table",
                    "view": "pandoc.Table"
                },
                "file": "pandoc/table.lua",
                "finish": [
                    6,
                    12
                ],
                "name": "Table",
                "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                "start": [
                    6,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Table",
                "visible": "public"
            }
        ],
        "name": "pandoc.Table",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "finish": [
                                481,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "start": [
                                481,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Table"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        481,
                        33
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Table"
                        }
                    ],
                    "start": [
                        481,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Table:clone()\n  -> pandoc.Table"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    481,
                    27
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    481,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Table.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                "extends": {
                    "args": [
                        {
                            "desc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "finish": [
                                488,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A table\n\nA table cell is a list of blocks.\n\nAlignment is a string value indicating the horizontal alignment of a table column. AlignLeft, AlignRight, and AlignCenter\nleads cell content to be left-aligned, right-aligned, and centered, respectively. The default alignment is AlignDefault \n(often equivalent to centered).\n",
                            "start": [
                                488,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Table"
                        },
                        {
                            "desc": "Map of filter functions",
                            "finish": [
                                488,
                                37
                            ],
                            "name": "lua_filter",
                            "rawdesc": "Map of filter functions",
                            "start": [
                                488,
                                27
                            ],
                            "type": "local",
                            "view": "table<string, function>"
                        }
                    ],
                    "desc": "Apply a Lua filter\n\n\n@*param* `lua_filter` — Map of filter functions",
                    "finish": [
                        488,
                        42
                    ],
                    "rawdesc": "Apply a Lua filter\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Table"
                        }
                    ],
                    "start": [
                        488,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Table:walk(lua_filter: table<string, function>)\n  -> pandoc.Table"
                },
                "file": "pandoc/blocks.lua",
                "finish": [
                    488,
                    26
                ],
                "name": "walk",
                "rawdesc": "Apply a Lua filter\n",
                "start": [
                    488,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Table.walk",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                "extends": {
                    "desc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                    "finish": [
                        197,
                        21
                    ],
                    "rawdesc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                    "start": [
                        197,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.TableBody"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    197,
                    16
                ],
                "name": "TableBody",
                "rawdesc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                "start": [
                    197,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.TableBody",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableBody",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                "file": "pandoc/components.lua",
                "finish": [
                    192,
                    26
                ],
                "rawdesc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                "start": [
                    192,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.TableBody",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table body attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        193,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        193,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                193,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                193,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    193,
                    26
                ],
                "name": "attr",
                "rawdesc": "Table body attributes",
                "start": [
                    193,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Row`",
                "extends": {
                    "finish": [
                        194,
                        26
                    ],
                    "start": [
                        194,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                194,
                                26
                            ],
                            "start": [
                                194,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    194,
                    26
                ],
                "name": "body",
                "rawdesc": "List of `Row`",
                "start": [
                    194,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                            "finish": [
                                204,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                            "start": [
                                204,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.TableBody"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        204,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableBody"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.TableBody:clone()\n  -> pandoc.TableBody"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    204,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    204,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Intermediate head (list of `Row`)",
                "extends": {
                    "finish": [
                        195,
                        26
                    ],
                    "start": [
                        195,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                195,
                                26
                            ],
                            "start": [
                                195,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    195,
                    26
                ],
                "name": "head",
                "rawdesc": "Intermediate head (list of `Row`)",
                "start": [
                    195,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number of columns taken up by the row head of each row of a `TableBody`. The row body takes up the remaining columns.",
                "extends": {
                    "finish": [
                        196,
                        34
                    ],
                    "start": [
                        196,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "start": [
                                196,
                                27
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    196,
                    34
                ],
                "name": "row_head_columns",
                "rawdesc": "Number of columns taken up by the row head of each row of a `TableBody`. The row body takes up the remaining columns.",
                "start": [
                    196,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableBody",
        "type": "type",
        "view": "pandoc.TableBody"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                            "finish": [
                                204,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "A body of a table, with an intermediate head and the specified\nnumber of row header columns.\n",
                            "start": [
                                204,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.TableBody"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        204,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableBody"
                        }
                    ],
                    "start": [
                        204,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.TableBody:clone()\n  -> pandoc.TableBody"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    204,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    204,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableBody.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The foot of a table\n",
                "file": "pandoc/components.lua",
                "finish": [
                    210,
                    26
                ],
                "rawdesc": "The foot of a table\n",
                "start": [
                    210,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.TableFoot",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Element attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        211,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        211,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                211,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                211,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    211,
                    26
                ],
                "name": "attr",
                "rawdesc": "Element attributes",
                "start": [
                    211,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        214,
                        41
                    ],
                    "start": [
                        214,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                214,
                                41
                            ],
                            "start": [
                                214,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    214,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    214,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        213,
                        29
                    ],
                    "start": [
                        213,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                213,
                                29
                            ],
                            "start": [
                                213,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    213,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    213,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "The foot of a table\n",
                            "finish": [
                                230,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "The foot of a table\n",
                            "start": [
                                230,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.TableFoot"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        230,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableFoot"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.TableFoot:clone()\n  -> pandoc.TableFoot"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    230,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    230,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        212,
                        27
                    ],
                    "start": [
                        212,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                212,
                                27
                            ],
                            "start": [
                                212,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    212,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    212,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Row`",
                "extends": {
                    "finish": [
                        215,
                        26
                    ],
                    "start": [
                        215,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                215,
                                26
                            ],
                            "start": [
                                215,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    215,
                    26
                ],
                "name": "rows",
                "rawdesc": "List of `Row`",
                "start": [
                    215,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableFoot",
        "type": "type",
        "view": "pandoc.TableFoot"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The foot of a table\n",
                "extends": {
                    "desc": "The foot of a table\n",
                    "finish": [
                        216,
                        21
                    ],
                    "rawdesc": "The foot of a table\n",
                    "start": [
                        216,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.TableFoot"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    216,
                    16
                ],
                "name": "TableFoot",
                "rawdesc": "The foot of a table\n",
                "start": [
                    216,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.TableFoot",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a table foot\n\n\n@*param* `rows` — List of `Row`\n\n@*param* `attr` — Element attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "List of `Row`",
                            "finish": [
                                224,
                                30
                            ],
                            "name": "rows",
                            "rawdesc": "List of `Row`",
                            "start": [
                                224,
                                26
                            ],
                            "type": "local",
                            "view": "(pandoc.List)?"
                        },
                        {
                            "desc": "Element attributes",
                            "finish": [
                                224,
                                36
                            ],
                            "name": "attr",
                            "rawdesc": "Element attributes",
                            "start": [
                                224,
                                32
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a table foot\n\n\n@*param* `rows` — List of `Row`\n\n@*param* `attr` — Element attributes",
                    "finish": [
                        224,
                        41
                    ],
                    "rawdesc": "Creates a table foot\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableFoot"
                        }
                    ],
                    "start": [
                        224,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.TableFoot(rows?: pandoc.List, attr?: pandoc.Attr)\n  -> pandoc.TableFoot"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    224,
                    25
                ],
                "name": "TableFoot",
                "rawdesc": "Creates a table foot\n",
                "start": [
                    224,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.TableFoot",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableFoot",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "The foot of a table\n",
                            "finish": [
                                230,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "The foot of a table\n",
                            "start": [
                                230,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.TableFoot"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        230,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableFoot"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.TableFoot:clone()\n  -> pandoc.TableFoot"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    230,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    230,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableFoot.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The head of a table\n",
                "extends": {
                    "desc": "The head of a table\n",
                    "finish": [
                        241,
                        21
                    ],
                    "rawdesc": "The head of a table\n",
                    "start": [
                        241,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.TableHead"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    241,
                    16
                ],
                "name": "TableHead",
                "rawdesc": "The head of a table\n",
                "start": [
                    241,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.TableHead",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a table head\n\n\n@*param* `rows` — List of `Row`\n\n@*param* `attr` — Element attributes",
                "extends": {
                    "args": [
                        {
                            "desc": "List of `Row`",
                            "finish": [
                                249,
                                30
                            ],
                            "name": "rows",
                            "rawdesc": "List of `Row`",
                            "start": [
                                249,
                                26
                            ],
                            "type": "local",
                            "view": "(pandoc.List)?"
                        },
                        {
                            "desc": "Element attributes",
                            "finish": [
                                249,
                                36
                            ],
                            "name": "attr",
                            "rawdesc": "Element attributes",
                            "start": [
                                249,
                                32
                            ],
                            "type": "local",
                            "view": "(pandoc.Attr)?"
                        }
                    ],
                    "desc": "Creates a table head\n\n\n@*param* `rows` — List of `Row`\n\n@*param* `attr` — Element attributes",
                    "finish": [
                        249,
                        41
                    ],
                    "rawdesc": "Creates a table head\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableHead"
                        }
                    ],
                    "start": [
                        249,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.TableHead(rows?: pandoc.List, attr?: pandoc.Attr)\n  -> pandoc.TableHead"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    249,
                    25
                ],
                "name": "TableHead",
                "rawdesc": "Creates a table head\n",
                "start": [
                    249,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.TableHead",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableHead",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The head of a table\n",
                "file": "pandoc/components.lua",
                "finish": [
                    235,
                    26
                ],
                "rawdesc": "The head of a table\n",
                "start": [
                    235,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.TableHead",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Element attributes",
                "extends": {
                    "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "finish": [
                        236,
                        26
                    ],
                    "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                    "start": [
                        236,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "finish": [
                                236,
                                26
                            ],
                            "rawdesc": "A set of element attributes. Values of this type can be created\nwith the [`pandoc.Attr`](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23pandoc.attr) constructor. For\nconvenience, it is usually not necessary to construct the value\ndirectly if it is part of an element, and it is sufficient to\npass an HTML-like table. E.g., to create a span with identifier\n\"text\" and classes \"a\" and \"b\", one can write:\n\n    local span = pandoc.Span('text', {id = 'text', class = 'a b'})\n\nThis also works when using the `attr` setter:\n\n    local span = pandoc.Span 'text'\n    span.attr = {id = 'text', class = 'a b', other_attribute = '1'}\n\nAttr values are equal in Lua if and only if they are equal in\nHaskell.\n",
                            "start": [
                                236,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Attr"
                        }
                    ],
                    "view": "pandoc.Attr"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    236,
                    26
                ],
                "name": "attr",
                "rawdesc": "Element attributes",
                "start": [
                    236,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Attr",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.attributes`",
                "extends": {
                    "finish": [
                        239,
                        41
                    ],
                    "start": [
                        239,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                239,
                                41
                            ],
                            "start": [
                                239,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    239,
                    41
                ],
                "name": "attributes",
                "rawdesc": "Alias for `attr.attributes`",
                "start": [
                    239,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, string>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.classes`",
                "extends": {
                    "finish": [
                        238,
                        29
                    ],
                    "start": [
                        238,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                238,
                                29
                            ],
                            "start": [
                                238,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    238,
                    29
                ],
                "name": "classes",
                "rawdesc": "Alias for `attr.classes`",
                "start": [
                    238,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "The head of a table\n",
                            "finish": [
                                255,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "The head of a table\n",
                            "start": [
                                255,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.TableHead"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        255,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableHead"
                        }
                    ],
                    "start": [
                        255,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.TableHead:clone()\n  -> pandoc.TableHead"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    255,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    255,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Alias for `attr.identifier`",
                "extends": {
                    "finish": [
                        237,
                        27
                    ],
                    "start": [
                        237,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                237,
                                27
                            ],
                            "start": [
                                237,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    237,
                    27
                ],
                "name": "identifier",
                "rawdesc": "Alias for `attr.identifier`",
                "start": [
                    237,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "List of `Row`",
                "extends": {
                    "finish": [
                        240,
                        26
                    ],
                    "start": [
                        240,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                240,
                                26
                            ],
                            "start": [
                                240,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.List"
                        }
                    ],
                    "view": "pandoc.List"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    240,
                    26
                ],
                "name": "rows",
                "rawdesc": "List of `Row`",
                "start": [
                    240,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.List",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableHead",
        "type": "type",
        "view": "pandoc.TableHead"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "The head of a table\n",
                            "finish": [
                                255,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "The head of a table\n",
                            "start": [
                                255,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.TableHead"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        255,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.TableHead"
                        }
                    ],
                    "start": [
                        255,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.TableHead:clone()\n  -> pandoc.TableHead"
                },
                "file": "pandoc/components.lua",
                "finish": [
                    255,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    255,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.TableHead.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Opaque type holding a compiled template.\n",
                "file": "pandoc/template.lua",
                "finish": [
                    8,
                    25
                ],
                "rawdesc": "Opaque type holding a compiled template.\n",
                "start": [
                    8,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Template",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "pandoc.Template",
        "type": "type",
        "view": "pandoc.Template"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Opaque type holding a compiled template.\n",
                "extends": {
                    "desc": "Opaque type holding a compiled template.\n",
                    "finish": [
                        9,
                        20
                    ],
                    "rawdesc": "Opaque type holding a compiled template.\n",
                    "start": [
                        9,
                        18
                    ],
                    "type": "table",
                    "view": "pandoc.Template"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    9,
                    15
                ],
                "name": "Template",
                "rawdesc": "Opaque type holding a compiled template.\n",
                "start": [
                    9,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Template",
                "visible": "public"
            }
        ],
        "name": "pandoc.Template",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List numbers are delimited by a double parentheses.\n",
                "extends": {
                    "finish": [
                        55,
                        30
                    ],
                    "start": [
                        55,
                        19
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    55,
                    16
                ],
                "name": "TwoParens",
                "rawdesc": "List numbers are delimited by a double parentheses.\n",
                "start": [
                    55,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.TwoParens",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Underlined text\n",
                "extends": [
                    {
                        "desc": "Inline element\n",
                        "finish": [
                            537,
                            42
                        ],
                        "rawdesc": "Inline element\n",
                        "start": [
                            537,
                            29
                        ],
                        "type": "doc.extends.name",
                        "view": "pandoc.Inline"
                    }
                ],
                "file": "pandoc/inlines.lua",
                "finish": [
                    537,
                    42
                ],
                "rawdesc": "Underlined text\n",
                "start": [
                    537,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Underline",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Underlined text\n",
                            "finish": [
                                554,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Underlined text\n",
                            "start": [
                                554,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Underline"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        554,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Underline"
                        }
                    ],
                    "start": [
                        554,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Underline:clone()\n  -> pandoc.Underline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    554,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    554,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Inline content",
                "extends": {
                    "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "finish": [
                        538,
                        32
                    ],
                    "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                    "start": [
                        538,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "finish": [
                                538,
                                32
                            ],
                            "rawdesc": "List of `Inline` elements, with the same methods as a generic\n`List`, but also supporting a `walk` method.\n",
                            "start": [
                                538,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "view": "pandoc.Inlines"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    538,
                    32
                ],
                "name": "content",
                "rawdesc": "Inline content",
                "start": [
                    538,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Inlines",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        539,
                        23
                    ],
                    "start": [
                        539,
                        12
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                539,
                                23
                            ],
                            "start": [
                                539,
                                12
                            ],
                            "type": "doc.type.string",
                            "view": "\"Underline\""
                        }
                    ],
                    "view": "\"Underline\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    539,
                    23
                ],
                "name": "t",
                "start": [
                    539,
                    10
                ],
                "type": "doc.field",
                "view": "\"Underline\"",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        540,
                        25
                    ],
                    "start": [
                        540,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                540,
                                25
                            ],
                            "start": [
                                540,
                                14
                            ],
                            "type": "doc.type.string",
                            "view": "\"Underline\""
                        }
                    ],
                    "view": "\"Underline\""
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    540,
                    25
                ],
                "name": "tag",
                "start": [
                    540,
                    10
                ],
                "type": "doc.field",
                "view": "\"Underline\"",
                "visible": "public"
            }
        ],
        "name": "pandoc.Underline",
        "type": "type",
        "view": "pandoc.Underline"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Underlined text\n",
                "extends": {
                    "desc": "Underlined text\n",
                    "finish": [
                        541,
                        21
                    ],
                    "rawdesc": "Underlined text\n",
                    "start": [
                        541,
                        19
                    ],
                    "type": "table",
                    "view": "pandoc.Underline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    541,
                    16
                ],
                "name": "Underline",
                "rawdesc": "Underlined text\n",
                "start": [
                    541,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Underline",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates an Underline inline element\n\n\n@*param* `content` — List of inlines",
                "extends": {
                    "args": [
                        {
                            "desc": "List of inlines",
                            "finish": [
                                548,
                                33
                            ],
                            "name": "content",
                            "rawdesc": "List of inlines",
                            "start": [
                                548,
                                26
                            ],
                            "type": "local",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "desc": "Creates an Underline inline element\n\n\n@*param* `content` — List of inlines",
                    "finish": [
                        548,
                        38
                    ],
                    "rawdesc": "Creates an Underline inline element\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Underline"
                        }
                    ],
                    "start": [
                        548,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Underline(content: pandoc.Inlines)\n  -> pandoc.Underline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    548,
                    25
                ],
                "name": "Underline",
                "rawdesc": "Creates an Underline inline element\n",
                "start": [
                    548,
                    9
                ],
                "type": "setfield",
                "view": "function|pandoc.Underline",
                "visible": "public"
            }
        ],
        "name": "pandoc.Underline",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Make a clone\n",
                "extends": {
                    "args": [
                        {
                            "desc": "Underlined text\n",
                            "finish": [
                                554,
                                8
                            ],
                            "name": "self",
                            "rawdesc": "Underlined text\n",
                            "start": [
                                554,
                                8
                            ],
                            "type": "self",
                            "view": "pandoc.Underline"
                        }
                    ],
                    "desc": "Make a clone\n",
                    "finish": [
                        554,
                        37
                    ],
                    "rawdesc": "Make a clone\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Underline"
                        }
                    ],
                    "start": [
                        554,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.Underline:clone()\n  -> pandoc.Underline"
                },
                "file": "pandoc/inlines.lua",
                "finish": [
                    554,
                    31
                ],
                "name": "clone",
                "rawdesc": "Make a clone\n",
                "start": [
                    554,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Underline.clone",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List are numbered using upper-case alphabetic characters.\n",
                "extends": {
                    "finish": [
                        90,
                        32
                    ],
                    "start": [
                        90,
                        20
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    90,
                    17
                ],
                "name": "UpperAlpha",
                "rawdesc": "List are numbered using upper-case alphabetic characters.\n",
                "start": [
                    90,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.UpperAlpha",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List are numbered using upper-case roman numerals\n",
                "extends": {
                    "finish": [
                        80,
                        32
                    ],
                    "start": [
                        80,
                        20
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/constants.lua",
                "finish": [
                    80,
                    17
                ],
                "name": "UpperRoman",
                "rawdesc": "List are numbered using upper-case roman numerals\n",
                "start": [
                    80,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.UpperRoman",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "extends": {
                    "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                    "finish": [
                        20,
                        19
                    ],
                    "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                    "start": [
                        20,
                        17
                    ],
                    "type": "table",
                    "view": "pandoc.Version"
                },
                "file": "pandoc/version.lua",
                "finish": [
                    20,
                    14
                ],
                "name": "Version",
                "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "start": [
                    20,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.Version",
                "visible": "public"
            }
        ],
        "name": "pandoc.Version",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "file": "pandoc/version.lua",
                "finish": [
                    19,
                    24
                ],
                "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "start": [
                    19,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.Version",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n\n\n@*param* `actual` — Actual version specifier\n\n@*param* `expected` — Expected version specifier\n\n@*param* `error_message` — (Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                "extends": {
                    "args": [
                        {
                            "desc": "Actual version specifier",
                            "finish": [
                                36,
                                47
                            ],
                            "name": "actual",
                            "rawdesc": "Actual version specifier",
                            "start": [
                                36,
                                41
                            ],
                            "type": "local",
                            "view": "string|integer|integer[]|pandoc.Version"
                        },
                        {
                            "desc": "Expected version specifier",
                            "finish": [
                                36,
                                57
                            ],
                            "name": "expected",
                            "rawdesc": "Expected version specifier",
                            "start": [
                                36,
                                49
                            ],
                            "type": "local",
                            "view": "string|integer|integer[]|pandoc.Version"
                        },
                        {
                            "desc": "(Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                            "finish": [
                                36,
                                72
                            ],
                            "name": "error_message",
                            "rawdesc": "(Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                            "start": [
                                36,
                                59
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n\n\n@*param* `actual` — Actual version specifier\n\n@*param* `expected` — Expected version specifier\n\n@*param* `error_message` — (Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                    "finish": [
                        36,
                        77
                    ],
                    "rawdesc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n",
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Version.must_be_at_least(actual: string|integer|integer[]|pandoc.Version, expected: string|integer|integer[]|pandoc.Version, error_message?: string)"
                },
                "file": "pandoc/version.lua",
                "finish": [
                    36,
                    40
                ],
                "name": "must_be_at_least",
                "rawdesc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n",
                "start": [
                    36,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Version",
        "type": "type",
        "view": "pandoc.Version"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n\n\n@*param* `actual` — Actual version specifier\n\n@*param* `expected` — Expected version specifier\n\n@*param* `error_message` — (Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                "extends": {
                    "args": [
                        {
                            "desc": "Actual version specifier",
                            "finish": [
                                36,
                                47
                            ],
                            "name": "actual",
                            "rawdesc": "Actual version specifier",
                            "start": [
                                36,
                                41
                            ],
                            "type": "local",
                            "view": "string|integer|integer[]|pandoc.Version"
                        },
                        {
                            "desc": "Expected version specifier",
                            "finish": [
                                36,
                                57
                            ],
                            "name": "expected",
                            "rawdesc": "Expected version specifier",
                            "start": [
                                36,
                                49
                            ],
                            "type": "local",
                            "view": "string|integer|integer[]|pandoc.Version"
                        },
                        {
                            "desc": "(Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                            "finish": [
                                36,
                                72
                            ],
                            "name": "error_message",
                            "rawdesc": "(Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                            "start": [
                                36,
                                59
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n\n\n@*param* `actual` — Actual version specifier\n\n@*param* `expected` — Expected version specifier\n\n@*param* `error_message` — (Optional) Error message template. The string is used as format string, with the expected and actual versions as arguments. Defaults to `\"expected version %s or newer, got %s\"`.",
                    "finish": [
                        36,
                        77
                    ],
                    "rawdesc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n",
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.Version.must_be_at_least(actual: string|integer|integer[]|pandoc.Version, expected: string|integer|integer[]|pandoc.Version, error_message?: string)"
                },
                "file": "pandoc/version.lua",
                "finish": [
                    36,
                    40
                ],
                "name": "must_be_at_least",
                "rawdesc": "Raise an error message if the version is older than the expected version; \ndoes nothing if actual is equal to or newer than the expected version.  \n",
                "start": [
                    36,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.Version.must_be_at_least",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a new WriterOptions value.\n\nUsage:\n\n    -- copy of the writer options that were defined on the command line.\n    local cli_opts = pandoc.WriterOptions(PANDOC_WRITER_OPTIONS)\n\n    -- default writer options, but DPI set to 300.\n    local short_colums_opts = pandoc.WriterOptions {dpi = 300}\n\n\n@*param* `opts` — Either a table with a subset of the properties of a WriterOptions object, or another WriterOptions object",
                "extends": {
                    "args": [
                        {
                            "desc": "Either a table with a subset of the properties of a WriterOptions object, or another WriterOptions object",
                            "finish": [
                                82,
                                34
                            ],
                            "name": "opts",
                            "rawdesc": "Either a table with a subset of the properties of a WriterOptions object, or another WriterOptions object",
                            "start": [
                                82,
                                30
                            ],
                            "type": "local",
                            "view": "pandoc.WriterOptions|table<string, any>"
                        }
                    ],
                    "desc": "Creates a new WriterOptions value.\n\nUsage:\n\n    -- copy of the writer options that were defined on the command line.\n    local cli_opts = pandoc.WriterOptions(PANDOC_WRITER_OPTIONS)\n\n    -- default writer options, but DPI set to 300.\n    local short_colums_opts = pandoc.WriterOptions {dpi = 300}\n\n\n@*param* `opts` — Either a table with a subset of the properties of a WriterOptions object, or another WriterOptions object",
                    "finish": [
                        82,
                        39
                    ],
                    "rawdesc": "Creates a new WriterOptions value.\n\nUsage:\n\n    -- copy of the writer options that were defined on the command line.\n    local cli_opts = pandoc.WriterOptions(PANDOC_WRITER_OPTIONS)\n\n    -- default writer options, but DPI set to 300.\n    local short_colums_opts = pandoc.WriterOptions {dpi = 300}\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.WriterOptions"
                        }
                    ],
                    "start": [
                        82,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.WriterOptions(opts: pandoc.WriterOptions|table<string, any>)\n  -> pandoc.WriterOptions"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    82,
                    29
                ],
                "name": "WriterOptions",
                "rawdesc": "Creates a new WriterOptions value.\n\nUsage:\n\n    -- copy of the writer options that were defined on the command line.\n    local cli_opts = pandoc.WriterOptions(PANDOC_WRITER_OPTIONS)\n\n    -- default writer options, but DPI set to 300.\n    local short_colums_opts = pandoc.WriterOptions {dpi = 300}\n",
                "start": [
                    82,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.WriterOptions",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Table of the options that will be passed to the writer. While the object can be modified, the changes will not be picked up by pandoc.\n",
                "file": "pandoc/options.lua",
                "finish": [
                    36,
                    30
                ],
                "rawdesc": "Table of the options that will be passed to the writer. While the object can be modified, the changes will not be picked up by pandoc.\n",
                "start": [
                    36,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.WriterOptions",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "How to print cites -- one of 'citeproc', 'natbib', or 'biblatex'",
                "extends": {
                    "finish": [
                        37,
                        51
                    ],
                    "start": [
                        37,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                37,
                                31
                            ],
                            "start": [
                                37,
                                22
                            ],
                            "type": "doc.type.string",
                            "view": "'citproc'"
                        },
                        {
                            "finish": [
                                37,
                                40
                            ],
                            "start": [
                                37,
                                32
                            ],
                            "type": "doc.type.string",
                            "view": "'natbib'"
                        },
                        {
                            "finish": [
                                37,
                                51
                            ],
                            "start": [
                                37,
                                41
                            ],
                            "type": "doc.type.string",
                            "view": "'biblatex'"
                        }
                    ],
                    "view": "'biblatex'|'citproc'|'natbib'"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    37,
                    51
                ],
                "name": "cite_method",
                "rawdesc": "How to print cites -- one of 'citeproc', 'natbib', or 'biblatex'",
                "start": [
                    37,
                    10
                ],
                "type": "doc.field",
                "view": "'biblatex'|'citproc'|'natbib'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Characters in a line (for text wrapping)",
                "extends": {
                    "finish": [
                        38,
                        25
                    ],
                    "start": [
                        38,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                38,
                                25
                            ],
                            "start": [
                                38,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    38,
                    25
                ],
                "name": "columns",
                "rawdesc": "Characters in a line (for text wrapping)",
                "start": [
                    38,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "DPI for pixel to/from inch/cm conversions",
                "extends": {
                    "finish": [
                        39,
                        21
                    ],
                    "start": [
                        39,
                        14
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                39,
                                21
                            ],
                            "start": [
                                39,
                                14
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    39,
                    21
                ],
                "name": "dpi",
                "rawdesc": "DPI for pixel to/from inch/cm conversions",
                "start": [
                    39,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "How to obfuscate emails -- one of 'none', 'references', or 'javascript'",
                "extends": {
                    "finish": [
                        40,
                        60
                    ],
                    "start": [
                        40,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                40,
                                34
                            ],
                            "start": [
                                40,
                                28
                            ],
                            "type": "doc.type.string",
                            "view": "'none'"
                        },
                        {
                            "finish": [
                                40,
                                47
                            ],
                            "start": [
                                40,
                                35
                            ],
                            "type": "doc.type.string",
                            "view": "'references'"
                        },
                        {
                            "finish": [
                                40,
                                60
                            ],
                            "start": [
                                40,
                                48
                            ],
                            "type": "doc.type.string",
                            "view": "'javascript'"
                        }
                    ],
                    "view": "'javascript'|'none'|'references'"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    40,
                    60
                ],
                "name": "email_obfuscation",
                "rawdesc": "How to obfuscate emails -- one of 'none', 'references', or 'javascript'",
                "start": [
                    40,
                    10
                ],
                "type": "doc.field",
                "view": "'javascript'|'none'|'references'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Header level for chapters, i.e., how the document is split into separate files",
                "extends": {
                    "finish": [
                        41,
                        36
                    ],
                    "start": [
                        41,
                        29
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                41,
                                36
                            ],
                            "start": [
                                41,
                                29
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    41,
                    36
                ],
                "name": "epub_chapter_level",
                "rawdesc": "Header level for chapters, i.e., how the document is split into separate files",
                "start": [
                    41,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Paths to fonts to embed",
                "extends": {
                    "finish": [
                        42,
                        26
                    ],
                    "start": [
                        42,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                42,
                                26
                            ],
                            "start": [
                                42,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    42,
                    26
                ],
                "name": "epub_fonts",
                "rawdesc": "Paths to fonts to embed",
                "start": [
                    42,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Metadata to include in EPUB",
                "extends": {
                    "finish": [
                        43,
                        31
                    ],
                    "start": [
                        43,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                43,
                                30
                            ],
                            "start": [
                                43,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    43,
                    31
                ],
                "name": "epub_metadata",
                "rawdesc": "Metadata to include in EPUB",
                "start": [
                    43,
                    10
                ],
                "type": "doc.field",
                "view": "string?",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Subdir for epub in OCF",
                "extends": {
                    "finish": [
                        44,
                        34
                    ],
                    "start": [
                        44,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                44,
                                34
                            ],
                            "start": [
                                44,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    44,
                    34
                ],
                "name": "epub_subdirectory",
                "rawdesc": "Subdir for epub in OCF",
                "start": [
                    44,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Markdown extensions that can be used",
                "extends": {
                    "finish": [
                        45,
                        26
                    ],
                    "start": [
                        45,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                45,
                                26
                            ],
                            "start": [
                                45,
                                21
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    45,
                    26
                ],
                "name": "extensions",
                "rawdesc": "Markdown extensions that can be used",
                "start": [
                    45,
                    10
                ],
                "type": "doc.field",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Style to use for highlighting; see the output of `pandoc --print-highlight-style=...` for an example structure. The value `nil` means that no highlighting is used.",
                "extends": {
                    "finish": [
                        46,
                        35
                    ],
                    "start": [
                        46,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                46,
                                31
                            ],
                            "start": [
                                46,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "table"
                        },
                        {
                            "finish": [
                                46,
                                35
                            ],
                            "start": [
                                46,
                                32
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "table|nil"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    46,
                    35
                ],
                "name": "highlight_style",
                "rawdesc": "Style to use for highlighting; see the output of `pandoc --print-highlight-style=...` for an example structure. The value `nil` means that no highlighting is used.",
                "start": [
                    46,
                    10
                ],
                "type": "doc.field",
                "view": "table|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "How to print math in HTML; one 'plain', 'gladtex', 'webtex', 'mathml', 'mathjax', or a table with keys `method` and `url`.",
                "extends": {
                    "finish": [
                        47,
                        87
                    ],
                    "start": [
                        47,
                        27
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                47,
                                44
                            ],
                            "start": [
                                47,
                                27
                            ],
                            "type": "doc.type.name",
                            "view": "'gladtex'|'mathjax'|'mathml'|'plain'|'webtex'"
                        },
                        {
                            "fields": [
                                {
                                    "finish": [
                                        47,
                                        72
                                    ],
                                    "name": {
                                        "[1]": "method",
                                        "finish": [
                                            47,
                                            53
                                        ],
                                        "start": [
                                            47,
                                            47
                                        ],
                                        "type": "doc.field.name",
                                        "view": "method"
                                    },
                                    "start": [
                                        47,
                                        47
                                    ],
                                    "type": "doc.type.field",
                                    "view": "'gladtex'|'mathjax'|'mathml'|'plain'|'webtex'"
                                },
                                {
                                    "finish": [
                                        47,
                                        85
                                    ],
                                    "name": {
                                        "[1]": "url",
                                        "finish": [
                                            47,
                                            77
                                        ],
                                        "start": [
                                            47,
                                            74
                                        ],
                                        "type": "doc.field.name",
                                        "view": "url"
                                    },
                                    "start": [
                                        47,
                                        74
                                    ],
                                    "type": "doc.type.field",
                                    "view": "string"
                                }
                            ],
                            "finish": [
                                47,
                                87
                            ],
                            "start": [
                                47,
                                45
                            ],
                            "type": "doc.type.table",
                            "view": "{ method: 'gladtex'|'mathjax'|'mathml'|'plain'|'webtex', url: string }"
                        }
                    ],
                    "view": "'gladtex'|'mathjax'|'mathml'|'plain'|'webtex'...(+1)"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    47,
                    87
                ],
                "name": "html_math_method",
                "rawdesc": "How to print math in HTML; one 'plain', 'gladtex', 'webtex', 'mathml', 'mathjax', or a table with keys `method` and `url`.",
                "start": [
                    47,
                    10
                ],
                "type": "doc.field",
                "view": "'gladtex'|'mathjax'|'mathml'|'plain'|'webtex'...(+1)",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Use `<q>` tags for quotes in HTML",
                "extends": {
                    "finish": [
                        48,
                        29
                    ],
                    "start": [
                        48,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                48,
                                29
                            ],
                            "start": [
                                48,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    48,
                    29
                ],
                "name": "html_q_tags",
                "rawdesc": "Use `<q>` tags for quotes in HTML",
                "start": [
                    48,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Prefix for section & note ids in HTML and for footnote marks in markdown",
                "extends": {
                    "finish": [
                        49,
                        34
                    ],
                    "start": [
                        49,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                49,
                                34
                            ],
                            "start": [
                                49,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    49,
                    34
                ],
                "name": "identifier_prefix",
                "rawdesc": "Prefix for section & note ids in HTML and for footnote marks in markdown",
                "start": [
                    49,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "True if lists should be incremental",
                "extends": {
                    "finish": [
                        50,
                        29
                    ],
                    "start": [
                        50,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                50,
                                29
                            ],
                            "start": [
                                50,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    50,
                    29
                ],
                "name": "incremental",
                "rawdesc": "True if lists should be incremental",
                "start": [
                    50,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Use listings package for code",
                "extends": {
                    "finish": [
                        51,
                        26
                    ],
                    "start": [
                        51,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                51,
                                26
                            ],
                            "start": [
                                51,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    51,
                    26
                ],
                "name": "listings",
                "rawdesc": "Use listings package for code",
                "start": [
                    51,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Starting number for section, subsection, ... (sequence of integers)",
                "extends": {
                    "finish": [
                        52,
                        33
                    ],
                    "start": [
                        52,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                52,
                                33
                            ],
                            "start": [
                                52,
                                24
                            ],
                            "type": "doc.type.array",
                            "view": "integer[]"
                        }
                    ],
                    "view": "integer[]"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    52,
                    33
                ],
                "name": "number_offset",
                "rawdesc": "Starting number for section, subsection, ... (sequence of integers)",
                "start": [
                    52,
                    10
                ],
                "type": "doc.field",
                "view": "integer[]",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number sections in LaTeX",
                "extends": {
                    "finish": [
                        53,
                        33
                    ],
                    "start": [
                        53,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                53,
                                33
                            ],
                            "start": [
                                53,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    53,
                    33
                ],
                "name": "number_sections",
                "rawdesc": "Number sections in LaTeX",
                "start": [
                    53,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Prefer ASCII representations of characters when possible",
                "extends": {
                    "finish": [
                        54,
                        30
                    ],
                    "start": [
                        54,
                        23
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                54,
                                30
                            ],
                            "start": [
                                54,
                                23
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    54,
                    30
                ],
                "name": "prefer_ascii",
                "rawdesc": "Prefer ASCII representations of characters when possible",
                "start": [
                    54,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Path to reference document if specified",
                "extends": {
                    "finish": [
                        55,
                        34
                    ],
                    "start": [
                        55,
                        24
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                55,
                                30
                            ],
                            "start": [
                                55,
                                24
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        },
                        {
                            "finish": [
                                55,
                                34
                            ],
                            "start": [
                                55,
                                31
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "string|nil"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    55,
                    34
                ],
                "name": "reference_doc",
                "rawdesc": "Path to reference document if specified",
                "start": [
                    55,
                    10
                ],
                "type": "doc.field",
                "view": "string|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Use reference links in writing markdown, rst",
                "extends": {
                    "finish": [
                        56,
                        33
                    ],
                    "start": [
                        56,
                        26
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                56,
                                33
                            ],
                            "start": [
                                56,
                                26
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    56,
                    33
                ],
                "name": "reference_links",
                "rawdesc": "Use reference links in writing markdown, rst",
                "start": [
                    56,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Location of footnotes and references for writing markdown; one of 'end-of-block', 'end-of-section', 'end-of-document'.",
                "extends": {
                    "finish": [
                        57,
                        78
                    ],
                    "start": [
                        57,
                        29
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                57,
                                43
                            ],
                            "start": [
                                57,
                                29
                            ],
                            "type": "doc.type.string",
                            "view": "'end-of-block'"
                        },
                        {
                            "finish": [
                                57,
                                60
                            ],
                            "start": [
                                57,
                                44
                            ],
                            "type": "doc.type.string",
                            "view": "'end-of-section'"
                        },
                        {
                            "finish": [
                                57,
                                78
                            ],
                            "start": [
                                57,
                                61
                            ],
                            "type": "doc.type.string",
                            "view": "'end-of-document'"
                        }
                    ],
                    "view": "'end-of-block'|'end-of-document'|'end-of-section'"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    57,
                    78
                ],
                "name": "reference_location",
                "rawdesc": "Location of footnotes and references for writing markdown; one of 'end-of-block', 'end-of-section', 'end-of-document'.",
                "start": [
                    57,
                    10
                ],
                "type": "doc.field",
                "view": "'end-of-block'|'end-of-document'|'end-of-section'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Put sections in div tags in HTML",
                "extends": {
                    "finish": [
                        58,
                        30
                    ],
                    "start": [
                        58,
                        23
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                58,
                                30
                            ],
                            "start": [
                                58,
                                23
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    58,
                    30
                ],
                "name": "section_divs",
                "rawdesc": "Put sections in div tags in HTML",
                "start": [
                    58,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Use setext headers for levels 1-2 in markdown",
                "extends": {
                    "finish": [
                        59,
                        32
                    ],
                    "start": [
                        59,
                        25
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                59,
                                32
                            ],
                            "start": [
                                59,
                                25
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    59,
                    32
                ],
                "name": "setext_headers",
                "rawdesc": "Use setext headers for levels 1-2 in markdown",
                "start": [
                    59,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Force header level of slides",
                "extends": {
                    "finish": [
                        60,
                        33
                    ],
                    "start": [
                        60,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                60,
                                29
                            ],
                            "start": [
                                60,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                60,
                                33
                            ],
                            "start": [
                                60,
                                30
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "integer|nil"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    60,
                    33
                ],
                "name": "slide_level",
                "rawdesc": "Force header level of slides",
                "start": [
                    60,
                    10
                ],
                "type": "doc.field",
                "view": "integer|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Tabstop for conversion btw spaces and tabs",
                "extends": {
                    "finish": [
                        61,
                        26
                    ],
                    "start": [
                        61,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                61,
                                26
                            ],
                            "start": [
                                61,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    61,
                    26
                ],
                "name": "tab_stop",
                "rawdesc": "Tabstop for conversion btw spaces and tabs",
                "start": [
                    61,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Include table of contents",
                "extends": {
                    "finish": [
                        62,
                        35
                    ],
                    "start": [
                        62,
                        28
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                62,
                                35
                            ],
                            "start": [
                                62,
                                28
                            ],
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    62,
                    35
                ],
                "name": "table_of_contents",
                "rawdesc": "Include table of contents",
                "start": [
                    62,
                    10
                ],
                "type": "doc.field",
                "view": "boolean",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Template to use",
                "extends": {
                    "desc": "Opaque type holding a compiled template.\n",
                    "finish": [
                        63,
                        38
                    ],
                    "rawdesc": "Opaque type holding a compiled template.\n",
                    "start": [
                        63,
                        19
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "desc": "Opaque type holding a compiled template.\n",
                            "finish": [
                                63,
                                34
                            ],
                            "rawdesc": "Opaque type holding a compiled template.\n",
                            "start": [
                                63,
                                19
                            ],
                            "type": "doc.type.name",
                            "view": "pandoc.Template"
                        },
                        {
                            "finish": [
                                63,
                                38
                            ],
                            "start": [
                                63,
                                35
                            ],
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "pandoc.Template|nil"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    63,
                    38
                ],
                "name": "template",
                "rawdesc": "Template to use",
                "start": [
                    63,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.Template|nil",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Number of levels to include in TOC",
                "extends": {
                    "finish": [
                        64,
                        27
                    ],
                    "start": [
                        64,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                64,
                                27
                            ],
                            "start": [
                                64,
                                20
                            ],
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    64,
                    27
                ],
                "name": "toc_depth",
                "rawdesc": "Number of levels to include in TOC",
                "start": [
                    64,
                    10
                ],
                "type": "doc.field",
                "view": "integer",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Type of top-level divisions; one of 'top-level-part', 'top-level-chapter', 'top-level-section', or 'top-level-default'.",
                "extends": {
                    "finish": [
                        65,
                        105
                    ],
                    "start": [
                        65,
                        29
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                65,
                                45
                            ],
                            "start": [
                                65,
                                29
                            ],
                            "type": "doc.type.string",
                            "view": "'top-level-part'"
                        },
                        {
                            "finish": [
                                65,
                                65
                            ],
                            "start": [
                                65,
                                46
                            ],
                            "type": "doc.type.string",
                            "view": "'top-level-chapter'"
                        },
                        {
                            "finish": [
                                65,
                                85
                            ],
                            "start": [
                                65,
                                66
                            ],
                            "type": "doc.type.string",
                            "view": "'top-level-section'"
                        },
                        {
                            "finish": [
                                65,
                                105
                            ],
                            "start": [
                                65,
                                86
                            ],
                            "type": "doc.type.string",
                            "view": "'top-level-default'"
                        }
                    ],
                    "view": "'top-level-chapter'|'top-level-default'|'top-level-part'|'top-level-section'"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    65,
                    105
                ],
                "name": "top_level_division",
                "rawdesc": "Type of top-level divisions; one of 'top-level-part', 'top-level-chapter', 'top-level-section', or 'top-level-default'.",
                "start": [
                    65,
                    10
                ],
                "type": "doc.field",
                "view": "'top-level-chapter'|'top-level-default'|'top-level-part'|'top-level-section'",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Variables to set in template; string-indexed table",
                "extends": {
                    "finish": [
                        66,
                        37
                    ],
                    "start": [
                        66,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                66,
                                37
                            ],
                            "start": [
                                66,
                                20
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, any>"
                        }
                    ],
                    "view": "table<string, any>"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    66,
                    37
                ],
                "name": "variables",
                "rawdesc": "Variables to set in template; string-indexed table",
                "start": [
                    66,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, any>",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Option for wrapping text; one of 'wrap-auto', 'wrap-none', or 'wrap-preserve'.",
                "extends": {
                    "finish": [
                        67,
                        59
                    ],
                    "start": [
                        67,
                        20
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                67,
                                31
                            ],
                            "start": [
                                67,
                                20
                            ],
                            "type": "doc.type.string",
                            "view": "'wrap-auto'"
                        },
                        {
                            "finish": [
                                67,
                                43
                            ],
                            "start": [
                                67,
                                32
                            ],
                            "type": "doc.type.string",
                            "view": "'wrap-none'"
                        },
                        {
                            "finish": [
                                67,
                                59
                            ],
                            "start": [
                                67,
                                44
                            ],
                            "type": "doc.type.string",
                            "view": "'wrap-preserve'"
                        }
                    ],
                    "view": "'wrap-auto'|'wrap-none'|'wrap-preserve'"
                },
                "file": "pandoc/options.lua",
                "finish": [
                    67,
                    59
                ],
                "name": "wrap_text",
                "rawdesc": "Option for wrapping text; one of 'wrap-auto', 'wrap-none', or 'wrap-preserve'.",
                "start": [
                    67,
                    10
                ],
                "type": "doc.field",
                "view": "'wrap-auto'|'wrap-none'|'wrap-preserve'",
                "visible": "public"
            }
        ],
        "name": "pandoc.WriterOptions",
        "type": "type",
        "view": "pandoc.WriterOptions"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCommand line options and argument parsing.\n\n",
                "extends": {
                    "finish": [
                        8,
                        15
                    ],
                    "start": [
                        8,
                        13
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/cli.lua",
                "finish": [
                    8,
                    10
                ],
                "name": "cli",
                "rawdesc": "\nCommand line options and argument parsing.\n\n",
                "start": [
                    8,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.cli",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        31,
                        31
                    ],
                    "start": [
                        31,
                        29
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/cli.lua",
                "finish": [
                    31,
                    26
                ],
                "name": "default_options",
                "start": [
                    31,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "pandoc.cli.default_options",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nParses command line arguments into pandoc options. Typically this\nfunction will be used in stand-alone pandoc Lua scripts, taking the list\nof arguments from the global `arg`.\n\nParameters:\n\n`args`\n:   list of command line arguments ({string,...})\n\nReturns:\n\n-   parsed options, using their JSON-like representation. (table)\n\n\n\n@*param* `args` — list of command line arguments\n\n@*return* — parsed options, using their JSON-like representation.",
                "extends": {
                    "args": [
                        {
                            "desc": "list of command line arguments",
                            "finish": [
                                27,
                                38
                            ],
                            "name": "args",
                            "rawdesc": "list of command line arguments",
                            "start": [
                                27,
                                34
                            ],
                            "type": "local",
                            "view": "string[]"
                        }
                    ],
                    "desc": "\nParses command line arguments into pandoc options. Typically this\nfunction will be used in stand-alone pandoc Lua scripts, taking the list\nof arguments from the global `arg`.\n\nParameters:\n\n`args`\n:   list of command line arguments ({string,...})\n\nReturns:\n\n-   parsed options, using their JSON-like representation. (table)\n\n\n\n@*param* `args` — list of command line arguments\n\n@*return* — parsed options, using their JSON-like representation.",
                    "finish": [
                        27,
                        43
                    ],
                    "rawdesc": "\nParses command line arguments into pandoc options. Typically this\nfunction will be used in stand-alone pandoc Lua scripts, taking the list\nof arguments from the global `arg`.\n\nParameters:\n\n`args`\n:   list of command line arguments ({string,...})\n\nReturns:\n\n-   parsed options, using their JSON-like representation. (table)\n\n",
                    "returns": [
                        {
                            "desc": "parsed options, using their JSON-like representation.",
                            "rawdesc": "parsed options, using their JSON-like representation.",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        27,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.cli.parse_options(args: string[])\n  -> table"
                },
                "file": "pandoc/cli.lua",
                "finish": [
                    27,
                    33
                ],
                "name": "parse_options",
                "rawdesc": "\nParses command line arguments into pandoc options. Typically this\nfunction will be used in stand-alone pandoc Lua scripts, taking the list\nof arguments from the global `arg`.\n\nParameters:\n\n`args`\n:   list of command line arguments ({string,...})\n\nReturns:\n\n-   parsed options, using their JSON-like representation. (table)\n\n",
                "start": [
                    27,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.cli.parse_options",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        18
                    ],
                    "start": [
                        3,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/format.lua",
                "finish": [
                    3,
                    13
                ],
                "name": "format",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the list of all valid extensions for a format. No\ndistinction is made between input and output; an extension can\nhave an effect when reading a format but not when writing it, or\n*vice versa*.\n\n\n@*param* `format` — Format name",
                "extends": {
                    "args": [
                        {
                            "desc": "Format name",
                            "finish": [
                                15,
                                44
                            ],
                            "name": "format",
                            "rawdesc": "Format name",
                            "start": [
                                15,
                                38
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns the list of all valid extensions for a format. No\ndistinction is made between input and output; an extension can\nhave an effect when reading a format but not when writing it, or\n*vice versa*.\n\n\n@*param* `format` — Format name",
                    "finish": [
                        15,
                        49
                    ],
                    "rawdesc": "Returns the list of all valid extensions for a format. No\ndistinction is made between input and output; an extension can\nhave an effect when reading a format but not when writing it, or\n*vice versa*.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<string, boolean>"
                        }
                    ],
                    "start": [
                        15,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.format.all_extensions(format: string)\n  -> table<string, boolean>"
                },
                "file": "pandoc/format.lua",
                "finish": [
                    15,
                    37
                ],
                "name": "all_extensions",
                "rawdesc": "Returns the list of all valid extensions for a format. No\ndistinction is made between input and output; an extension can\nhave an effect when reading a format but not when writing it, or\n*vice versa*.\n",
                "start": [
                    15,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.format.all_extensions",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the list of default extensions of the given format; this\nfunction does not check if the format is supported, it will return\na fallback list of extensions even for unknown formats.\n\n\n@*param* `format` — Format name",
                "extends": {
                    "args": [
                        {
                            "desc": "Format name",
                            "finish": [
                                24,
                                48
                            ],
                            "name": "format",
                            "rawdesc": "Format name",
                            "start": [
                                24,
                                42
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns the list of default extensions of the given format; this\nfunction does not check if the format is supported, it will return\na fallback list of extensions even for unknown formats.\n\n\n@*param* `format` — Format name",
                    "finish": [
                        24,
                        53
                    ],
                    "rawdesc": "Returns the list of default extensions of the given format; this\nfunction does not check if the format is supported, it will return\na fallback list of extensions even for unknown formats.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<string, boolean>"
                        }
                    ],
                    "start": [
                        24,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.format.default_extensions(format: string)\n  -> table<string, boolean>"
                },
                "file": "pandoc/format.lua",
                "finish": [
                    24,
                    41
                ],
                "name": "default_extensions",
                "rawdesc": "Returns the list of default extensions of the given format; this\nfunction does not check if the format is supported, it will return\na fallback list of extensions even for unknown formats.\n",
                "start": [
                    24,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.format.default_extensions",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the extension configuration for the given format.\nThe configuration is represented as a table with all supported\nextensions as keys and their default status as value, with\n`true` indicating that the extension is enabled by default,\nwhile `false` marks a supported extension that's disabled.\n\nThis function can be used to assign a value to the `Extensions`\nglobal in custom readers and writers.\n\n\n@*param* `format` — Format name",
                "extends": {
                    "args": [
                        {
                            "desc": "Format name",
                            "finish": [
                                38,
                                40
                            ],
                            "name": "format",
                            "rawdesc": "Format name",
                            "start": [
                                38,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns the extension configuration for the given format.\nThe configuration is represented as a table with all supported\nextensions as keys and their default status as value, with\n`true` indicating that the extension is enabled by default,\nwhile `false` marks a supported extension that's disabled.\n\nThis function can be used to assign a value to the `Extensions`\nglobal in custom readers and writers.\n\n\n@*param* `format` — Format name",
                    "finish": [
                        38,
                        45
                    ],
                    "rawdesc": "Returns the extension configuration for the given format.\nThe configuration is represented as a table with all supported\nextensions as keys and their default status as value, with\n`true` indicating that the extension is enabled by default,\nwhile `false` marks a supported extension that's disabled.\n\nThis function can be used to assign a value to the `Extensions`\nglobal in custom readers and writers.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<string, boolean>"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.format.extensions(format: string)\n  -> table<string, boolean>"
                },
                "file": "pandoc/format.lua",
                "finish": [
                    38,
                    33
                ],
                "name": "extensions",
                "rawdesc": "Returns the extension configuration for the given format.\nThe configuration is represented as a table with all supported\nextensions as keys and their default status as value, with\n`true` indicating that the extension is enabled by default,\nwhile `false` marks a supported extension that's disabled.\n\nThis function can be used to assign a value to the `Extensions`\nglobal in custom readers and writers.\n",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.format.extensions",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        17
                    ],
                    "start": [
                        3,
                        15
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/image.lua",
                "finish": [
                    3,
                    12
                ],
                "name": "image",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.image",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the format of an image as a lowercase string.\n\nFormats recognized by pandoc include `png`, `gif`, `tiff`, `jpeg`, `pdf`, `svg`, `eps`, and` `emf`.\n\nIf the format is not recognized, the function returns nil.\n\n\n@*param* `imagedata` — image data (such as returned by `pandoc.mediabag.fetch`)",
                "extends": {
                    "args": [
                        {
                            "desc": "image data (such as returned by `pandoc.mediabag.fetch`)",
                            "finish": [
                                25,
                                38
                            ],
                            "name": "imagedata",
                            "rawdesc": "image data (such as returned by `pandoc.mediabag.fetch`)",
                            "start": [
                                25,
                                29
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns the format of an image as a lowercase string.\n\nFormats recognized by pandoc include `png`, `gif`, `tiff`, `jpeg`, `pdf`, `svg`, `eps`, and` `emf`.\n\nIf the format is not recognized, the function returns nil.\n\n\n@*param* `imagedata` — image data (such as returned by `pandoc.mediabag.fetch`)",
                    "finish": [
                        25,
                        43
                    ],
                    "rawdesc": "Returns the format of an image as a lowercase string.\n\nFormats recognized by pandoc include `png`, `gif`, `tiff`, `jpeg`, `pdf`, `svg`, `eps`, and` `emf`.\n\nIf the format is not recognized, the function returns nil.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.image.format(imagedata: string)\n  -> string|nil"
                },
                "file": "pandoc/image.lua",
                "finish": [
                    25,
                    28
                ],
                "name": "format",
                "rawdesc": "Returns the format of an image as a lowercase string.\n\nFormats recognized by pandoc include `png`, `gif`, `tiff`, `jpeg`, `pdf`, `svg`, `eps`, and` `emf`.\n\nIf the format is not recognized, the function returns nil.\n",
                "start": [
                    25,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.image.format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a table containing the size and resolution of an image; throws an error if the given string is not an image, or if the size of the image cannot be determined.\n\nThe resulting table has four entries: width, height, dpi_horz, and dpi_vert.\n\nThe opts parameter, when given, should be either a WriterOptions object such as PANDOC_WRITER_OPTIONS, or a table with a dpi entry. It affects the calculation for vector image formats such as SVG.\n\n\n@*param* `imagedata` — image data (such as returned by `pandoc.mediabag.fetch`)",
                "extends": {
                    "args": [
                        {
                            "desc": "image data (such as returned by `pandoc.mediabag.fetch`)",
                            "finish": [
                                14,
                                36
                            ],
                            "name": "imagedata",
                            "rawdesc": "image data (such as returned by `pandoc.mediabag.fetch`)",
                            "start": [
                                14,
                                27
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns a table containing the size and resolution of an image; throws an error if the given string is not an image, or if the size of the image cannot be determined.\n\nThe resulting table has four entries: width, height, dpi_horz, and dpi_vert.\n\nThe opts parameter, when given, should be either a WriterOptions object such as PANDOC_WRITER_OPTIONS, or a table with a dpi entry. It affects the calculation for vector image formats such as SVG.\n\n\n@*param* `imagedata` — image data (such as returned by `pandoc.mediabag.fetch`)",
                    "finish": [
                        14,
                        41
                    ],
                    "rawdesc": "Returns a table containing the size and resolution of an image; throws an error if the given string is not an image, or if the size of the image cannot be determined.\n\nThe resulting table has four entries: width, height, dpi_horz, and dpi_vert.\n\nThe opts parameter, when given, should be either a WriterOptions object such as PANDOC_WRITER_OPTIONS, or a table with a dpi entry. It affects the calculation for vector image formats such as SVG.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        14,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.image.size(imagedata: string)\n  -> table"
                },
                "file": "pandoc/image.lua",
                "finish": [
                    14,
                    26
                ],
                "name": "size",
                "rawdesc": "Returns a table containing the size and resolution of an image; throws an error if the given string is not an image, or if the size of the image cannot be determined.\n\nThe resulting table has four entries: width, height, dpi_horz, and dpi_vert.\n\nThe opts parameter, when given, should be either a WriterOptions object such as PANDOC_WRITER_OPTIONS, or a table with a dpi entry. It affects the calculation for vector image formats such as SVG.\n",
                "start": [
                    14,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.image.size",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        18
                    ],
                    "start": [
                        4,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/layout.lua",
                "finish": [
                    4,
                    13
                ],
                "name": "layout",
                "start": [
                    4,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "pandoc.layout",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        15
                    ],
                    "start": [
                        3,
                        13
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/log.lua",
                "finish": [
                    3,
                    10
                ],
                "name": "log",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.log",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Reports a ScriptingInfo message to pandoc's logging system.\n\n\n@*param* `message` — the info message",
                "extends": {
                    "args": [
                        {
                            "desc": "the info message",
                            "finish": [
                                10,
                                32
                            ],
                            "name": "message",
                            "rawdesc": "the info message",
                            "start": [
                                10,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Reports a ScriptingInfo message to pandoc's logging system.\n\n\n@*param* `message` — the info message",
                    "finish": [
                        10,
                        37
                    ],
                    "rawdesc": "Reports a ScriptingInfo message to pandoc's logging system.\n",
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.log.info(message: string)"
                },
                "file": "pandoc/log.lua",
                "finish": [
                    10,
                    24
                ],
                "name": "info",
                "rawdesc": "Reports a ScriptingInfo message to pandoc's logging system.\n",
                "start": [
                    10,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.log.info",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies the function to the given arguments while preventing log messages from being added to the log.\nThe warnings and info messages reported during the function call are returned as the first return value, with the results of the function call following thereafter.\n\n\n@*param* `fn` — the function to call\n\n@*return* — List of log messages triggered during the function call, and any value returned by the function.",
                "extends": {
                    "args": [
                        {
                            "desc": "the function to call",
                            "finish": [
                                18,
                                30
                            ],
                            "name": "fn",
                            "rawdesc": "the function to call",
                            "start": [
                                18,
                                28
                            ],
                            "type": "local",
                            "view": "function"
                        }
                    ],
                    "desc": "Applies the function to the given arguments while preventing log messages from being added to the log.\nThe warnings and info messages reported during the function call are returned as the first return value, with the results of the function call following thereafter.\n\n\n@*param* `fn` — the function to call\n\n@*return* — List of log messages triggered during the function call, and any value returned by the function.",
                    "finish": [
                        18,
                        35
                    ],
                    "rawdesc": "Applies the function to the given arguments while preventing log messages from being added to the log.\nThe warnings and info messages reported during the function call are returned as the first return value, with the results of the function call following thereafter.\n",
                    "returns": [
                        {
                            "desc": "List of log messages triggered during the function call, and any value returned by the function.",
                            "rawdesc": "List of log messages triggered during the function call, and any value returned by the function.",
                            "type": "function.return",
                            "view": "table"
                        },
                        {
                            "desc": "List of log messages triggered during the function call, and any value returned by the function.",
                            "rawdesc": "List of log messages triggered during the function call, and any value returned by the function.",
                            "type": "function.return",
                            "view": "any[]"
                        }
                    ],
                    "start": [
                        18,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.log.silence(fn: function)\n  -> table\n  2. any[]"
                },
                "file": "pandoc/log.lua",
                "finish": [
                    18,
                    27
                ],
                "name": "silence",
                "rawdesc": "Applies the function to the given arguments while preventing log messages from being added to the log.\nThe warnings and info messages reported during the function call are returned as the first return value, with the results of the function call following thereafter.\n",
                "start": [
                    18,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.log.silence",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Reports a ScriptingWarning to pandoc's logging system. The warning will be printed to stderr unless logging verbosity has been set to ERROR.\n\n\n@*param* `message` — the warning message",
                "extends": {
                    "args": [
                        {
                            "desc": "the warning message",
                            "finish": [
                                24,
                                32
                            ],
                            "name": "message",
                            "rawdesc": "the warning message",
                            "start": [
                                24,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Reports a ScriptingWarning to pandoc's logging system. The warning will be printed to stderr unless logging verbosity has been set to ERROR.\n\n\n@*param* `message` — the warning message",
                    "finish": [
                        24,
                        37
                    ],
                    "rawdesc": "Reports a ScriptingWarning to pandoc's logging system. The warning will be printed to stderr unless logging verbosity has been set to ERROR.\n",
                    "start": [
                        24,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.log.warn(message: string)"
                },
                "file": "pandoc/log.lua",
                "finish": [
                    24,
                    24
                ],
                "name": "warn",
                "rawdesc": "Reports a ScriptingWarning to pandoc's logging system. The warning will be printed to stderr unless logging verbosity has been set to ERROR.\n",
                "start": [
                    24,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.log.warn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        20
                    ],
                    "start": [
                        3,
                        18
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    3,
                    15
                ],
                "name": "mediabag",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Removes a single entry from the media bag.\n\n\n@*param* `filepath` — Path of the item to be deleted. The media bag will be left unchanged if no entry with the given filename exists.",
                "extends": {
                    "args": [
                        {
                            "desc": "Path of the item to be deleted. The media bag will be left unchanged if no entry with the given filename exists.",
                            "finish": [
                                9,
                                40
                            ],
                            "name": "filepath",
                            "rawdesc": "Path of the item to be deleted. The media bag will be left unchanged if no entry with the given filename exists.",
                            "start": [
                                9,
                                32
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Removes a single entry from the media bag.\n\n\n@*param* `filepath` — Path of the item to be deleted. The media bag will be left unchanged if no entry with the given filename exists.",
                    "finish": [
                        9,
                        45
                    ],
                    "rawdesc": "Removes a single entry from the media bag.\n",
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.delete(filepath: string)"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    9,
                    31
                ],
                "name": "delete",
                "rawdesc": "Removes a single entry from the media bag.\n",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.delete",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Clear-out the media bag, deleting all items.\n",
                "extends": {
                    "args": [],
                    "desc": "Clear-out the media bag, deleting all items.\n",
                    "finish": [
                        14,
                        36
                    ],
                    "rawdesc": "Clear-out the media bag, deleting all items.\n",
                    "start": [
                        14,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.empty()"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    14,
                    30
                ],
                "name": "empty",
                "rawdesc": "Clear-out the media bag, deleting all items.\n",
                "start": [
                    14,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.empty",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Fetches the given source from a URL or local file. Returns two\nvalues: the contents of the file and the MIME type (or an empty\nstring).\n\nThe function will first try to retrieve `source` from the\nmediabag; if that fails, it will try to download it or read it\nfrom the local file system while respecting pandoc's \"resource\npath\" setting.\n\nReturns:\n\n-   the entries MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local diagram_url = \"https://pandoc.org/diagram.jpg\"\n    local mt, contents = pandoc.mediabag.fetch(diagram_url)\n\n\n@*param* `source` — Path to a resource; either a local file path or URI",
                "extends": {
                    "args": [
                        {
                            "desc": "Path to a resource; either a local file path or URI",
                            "finish": [
                                134,
                                37
                            ],
                            "name": "source",
                            "rawdesc": "Path to a resource; either a local file path or URI",
                            "start": [
                                134,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Fetches the given source from a URL or local file. Returns two\nvalues: the contents of the file and the MIME type (or an empty\nstring).\n\nThe function will first try to retrieve `source` from the\nmediabag; if that fails, it will try to download it or read it\nfrom the local file system while respecting pandoc's \"resource\npath\" setting.\n\nReturns:\n\n-   the entries MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local diagram_url = \"https://pandoc.org/diagram.jpg\"\n    local mt, contents = pandoc.mediabag.fetch(diagram_url)\n\n\n@*param* `source` — Path to a resource; either a local file path or URI",
                    "finish": [
                        134,
                        42
                    ],
                    "rawdesc": "Fetches the given source from a URL or local file. Returns two\nvalues: the contents of the file and the MIME type (or an empty\nstring).\n\nThe function will first try to retrieve `source` from the\nmediabag; if that fails, it will try to download it or read it\nfrom the local file system while respecting pandoc's \"resource\npath\" setting.\n\nReturns:\n\n-   the entries MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local diagram_url = \"https://pandoc.org/diagram.jpg\"\n    local mt, contents = pandoc.mediabag.fetch(diagram_url)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        },
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        134,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.fetch(source: string)\n  -> string|nil\n  2. string|nil"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    134,
                    30
                ],
                "name": "fetch",
                "rawdesc": "Fetches the given source from a URL or local file. Returns two\nvalues: the contents of the file and the MIME type (or an empty\nstring).\n\nThe function will first try to retrieve `source` from the\nmediabag; if that fails, it will try to download it or read it\nfrom the local file system while respecting pandoc's \"resource\npath\" setting.\n\nReturns:\n\n-   the entries MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local diagram_url = \"https://pandoc.org/diagram.jpg\"\n    local mt, contents = pandoc.mediabag.fetch(diagram_url)\n",
                "start": [
                    134,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.fetch",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Fills the mediabag with the images in the given document. An\nimage that cannot be retrieved will be replaced with a Span of\nclass \"image\" that contains the image description.\n\nImages for which the mediabag already contains an item will\nnot be processed again.\n\n\n@*param* `doc` — Document from which to fill the mediabag\n\n@*return* — Modified document",
                "extends": {
                    "args": [
                        {
                            "desc": "Document from which to fill the mediabag",
                            "finish": [
                                26,
                                33
                            ],
                            "name": "doc",
                            "rawdesc": "Document from which to fill the mediabag",
                            "start": [
                                26,
                                30
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "desc": "Fills the mediabag with the images in the given document. An\nimage that cannot be retrieved will be replaced with a Span of\nclass \"image\" that contains the image description.\n\nImages for which the mediabag already contains an item will\nnot be processed again.\n\n\n@*param* `doc` — Document from which to fill the mediabag\n\n@*return* — Modified document",
                    "finish": [
                        26,
                        38
                    ],
                    "rawdesc": "Fills the mediabag with the images in the given document. An\nimage that cannot be retrieved will be replaced with a Span of\nclass \"image\" that contains the image description.\n\nImages for which the mediabag already contains an item will\nnot be processed again.\n",
                    "returns": [
                        {
                            "desc": "Modified document",
                            "rawdesc": "Modified document",
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.fill(doc: pandoc.Pandoc)\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    26,
                    29
                ],
                "name": "fill",
                "rawdesc": "Fills the mediabag with the images in the given document. An\nimage that cannot be retrieved will be replaced with a Span of\nclass \"image\" that contains the image description.\n\nImages for which the mediabag already contains an item will\nnot be processed again.\n",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.fill",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Adds a new entry to pandoc's media bag. Replaces any existing\nmediabag entry with the same `filepath`.\n\nUsage:\n\n    local fp = \"media/hello.txt\"\n    local mt = \"text/plain\"\n    local contents = \"Hello, World!\"\n    pandoc.mediabag.insert(fp, mt, contents)\n\n\n@*param* `filepath` — Filename and path relative to the output folder.\n\n@*param* `mime_type` — The file's MIME type; use `nil` if unknown or unavailable.\n\n@*param* `contents` — The binary contents of the file",
                "extends": {
                    "args": [
                        {
                            "desc": "Filename and path relative to the output folder.",
                            "finish": [
                                43,
                                40
                            ],
                            "name": "filepath",
                            "rawdesc": "Filename and path relative to the output folder.",
                            "start": [
                                43,
                                32
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The file's MIME type; use `nil` if unknown or unavailable.",
                            "finish": [
                                43,
                                51
                            ],
                            "name": "mime_type",
                            "rawdesc": "The file's MIME type; use `nil` if unknown or unavailable.",
                            "start": [
                                43,
                                42
                            ],
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "desc": "The binary contents of the file",
                            "finish": [
                                43,
                                61
                            ],
                            "name": "contents",
                            "rawdesc": "The binary contents of the file",
                            "start": [
                                43,
                                53
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Adds a new entry to pandoc's media bag. Replaces any existing\nmediabag entry with the same `filepath`.\n\nUsage:\n\n    local fp = \"media/hello.txt\"\n    local mt = \"text/plain\"\n    local contents = \"Hello, World!\"\n    pandoc.mediabag.insert(fp, mt, contents)\n\n\n@*param* `filepath` — Filename and path relative to the output folder.\n\n@*param* `mime_type` — The file's MIME type; use `nil` if unknown or unavailable.\n\n@*param* `contents` — The binary contents of the file",
                    "finish": [
                        43,
                        66
                    ],
                    "rawdesc": "Adds a new entry to pandoc's media bag. Replaces any existing\nmediabag entry with the same `filepath`.\n\nUsage:\n\n    local fp = \"media/hello.txt\"\n    local mt = \"text/plain\"\n    local contents = \"Hello, World!\"\n    pandoc.mediabag.insert(fp, mt, contents)\n",
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.insert(filepath: string, mime_type: string|nil, contents: string)"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    43,
                    31
                ],
                "name": "insert",
                "rawdesc": "Adds a new entry to pandoc's media bag. Replaces any existing\nmediabag entry with the same `filepath`.\n\nUsage:\n\n    local fp = \"media/hello.txt\"\n    local mt = \"text/plain\"\n    local contents = \"Hello, World!\"\n    pandoc.mediabag.insert(fp, mt, contents)\n",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.insert",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns an iterator triple to be used with Lua's generic `for`\nstatement. The iterator returns the filepath, MIME type, and\ncontent of a media bag item on each invocation. Items are\nprocessed one-by-one to avoid excessive memory use.\n\nThis function should be used only when full access to all items,\nincluding their contents, is required. For all other cases,\n`list` should be preferred.\n\nReturns:\n\n-   The iterator function; must be called with the iterator\n    state and the current iterator value.\n-   Iterator state -- an opaque value to be passed to the\n    iterator function.\n-   Initial iterator value.\n\nUsage:\n\n    for fp, mt, contents in pandoc.mediabag.items() do\n      -- print(fp, mt, contents)\n    end\n",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator triple to be used with Lua's generic `for`\nstatement. The iterator returns the filepath, MIME type, and\ncontent of a media bag item on each invocation. Items are\nprocessed one-by-one to avoid excessive memory use.\n\nThis function should be used only when full access to all items,\nincluding their contents, is required. For all other cases,\n`list` should be preferred.\n\nReturns:\n\n-   The iterator function; must be called with the iterator\n    state and the current iterator value.\n-   Iterator state -- an opaque value to be passed to the\n    iterator function.\n-   Initial iterator value.\n\nUsage:\n\n    for fp, mt, contents in pandoc.mediabag.items() do\n      -- print(fp, mt, contents)\n    end\n",
                    "finish": [
                        70,
                        36
                    ],
                    "rawdesc": "Returns an iterator triple to be used with Lua's generic `for`\nstatement. The iterator returns the filepath, MIME type, and\ncontent of a media bag item on each invocation. Items are\nprocessed one-by-one to avoid excessive memory use.\n\nThis function should be used only when full access to all items,\nincluding their contents, is required. For all other cases,\n`list` should be preferred.\n\nReturns:\n\n-   The iterator function; must be called with the iterator\n    state and the current iterator value.\n-   Iterator state -- an opaque value to be passed to the\n    iterator function.\n-   Initial iterator value.\n\nUsage:\n\n    for fp, mt, contents in pandoc.mediabag.items() do\n      -- print(fp, mt, contents)\n    end\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "type": "function.return",
                            "view": "unknown"
                        },
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        70,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.items()\n  -> function\n  2. unknown\n  3. unknown"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    70,
                    30
                ],
                "name": "items",
                "rawdesc": "Returns an iterator triple to be used with Lua's generic `for`\nstatement. The iterator returns the filepath, MIME type, and\ncontent of a media bag item on each invocation. Items are\nprocessed one-by-one to avoid excessive memory use.\n\nThis function should be used only when full access to all items,\nincluding their contents, is required. For all other cases,\n`list` should be preferred.\n\nReturns:\n\n-   The iterator function; must be called with the iterator\n    state and the current iterator value.\n-   Iterator state -- an opaque value to be passed to the\n    iterator function.\n-   Initial iterator value.\n\nUsage:\n\n    for fp, mt, contents in pandoc.mediabag.items() do\n      -- print(fp, mt, contents)\n    end\n",
                "start": [
                    70,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.items",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get a summary of the current media bag contents.\n\nReturns: A list of elements summarizing each entry in the media\nbag. The summary item contains the keys `path`, `type`, and\n`length`, giving the filepath, MIME type, and length of contents\nin bytes, respectively.\n\nUsage:\n\n    -- calculate the size of the media bag.\n    local mb_items = pandoc.mediabag.list()\n    local sum = 0\n    for i = 1, #mb_items do\n        sum = sum + mb_items[i].length\n    end\n    print(sum)\n",
                "extends": {
                    "args": [],
                    "desc": "Get a summary of the current media bag contents.\n\nReturns: A list of elements summarizing each entry in the media\nbag. The summary item contains the keys `path`, `type`, and\n`length`, giving the filepath, MIME type, and length of contents\nin bytes, respectively.\n\nUsage:\n\n    -- calculate the size of the media bag.\n    local mb_items = pandoc.mediabag.list()\n    local sum = 0\n    for i = 1, #mb_items do\n        sum = sum + mb_items[i].length\n    end\n    print(sum)\n",
                    "finish": [
                        92,
                        35
                    ],
                    "rawdesc": "Get a summary of the current media bag contents.\n\nReturns: A list of elements summarizing each entry in the media\nbag. The summary item contains the keys `path`, `type`, and\n`length`, giving the filepath, MIME type, and length of contents\nin bytes, respectively.\n\nUsage:\n\n    -- calculate the size of the media bag.\n    local mb_items = pandoc.mediabag.list()\n    local sum = 0\n    for i = 1, #mb_items do\n        sum = sum + mb_items[i].length\n    end\n    print(sum)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "{ path: string, type: string, length: integer }[]"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.list()\n  -> { path: string, type: string, length: integer }[]"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    92,
                    29
                ],
                "name": "list",
                "rawdesc": "Get a summary of the current media bag contents.\n\nReturns: A list of elements summarizing each entry in the media\nbag. The summary item contains the keys `path`, `type`, and\n`length`, giving the filepath, MIME type, and length of contents\nin bytes, respectively.\n\nUsage:\n\n    -- calculate the size of the media bag.\n    local mb_items = pandoc.mediabag.list()\n    local sum = 0\n    for i = 1, #mb_items do\n        sum = sum + mb_items[i].length\n    end\n    print(sum)\n",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.list",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Lookup a media item in the media bag, and return its MIME type\nand contents.\n\nReturns:\n\n-   the entry's MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local filename = \"media/diagram.png\"\n    local mt, contents = pandoc.mediabag.lookup(filename)\n\n\n@*param* `filepath` — Name of the file to look up.",
                "extends": {
                    "args": [
                        {
                            "desc": "Name of the file to look up.",
                            "finish": [
                                110,
                                40
                            ],
                            "name": "filepath",
                            "rawdesc": "Name of the file to look up.",
                            "start": [
                                110,
                                32
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Lookup a media item in the media bag, and return its MIME type\nand contents.\n\nReturns:\n\n-   the entry's MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local filename = \"media/diagram.png\"\n    local mt, contents = pandoc.mediabag.lookup(filename)\n\n\n@*param* `filepath` — Name of the file to look up.",
                    "finish": [
                        110,
                        45
                    ],
                    "rawdesc": "Lookup a media item in the media bag, and return its MIME type\nand contents.\n\nReturns:\n\n-   the entry's MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local filename = \"media/diagram.png\"\n    local mt, contents = pandoc.mediabag.lookup(filename)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        },
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        110,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.lookup(filepath: string)\n  -> string|nil\n  2. string|nil"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    110,
                    31
                ],
                "name": "lookup",
                "rawdesc": "Lookup a media item in the media bag, and return its MIME type\nand contents.\n\nReturns:\n\n-   the entry's MIME type, or nil if the file was not found.\n-   contents of the file, or nil if the file was not found.\n\nUsage:\n\n    local filename = \"media/diagram.png\"\n    local mt, contents = pandoc.mediabag.lookup(filename)\n",
                "start": [
                    110,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.lookup",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Writes the contents of mediabag to the given target directory. If\n`fp` is given, then only the resource with the given name will be\nextracted. Omitting that parameter means that the whole mediabag\ngets extracted. An error is thrown if `fp` is given but cannot be\nfound in the mediabag.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                145,
                                34
                            ],
                            "name": "dir",
                            "start": [
                                145,
                                31
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                145,
                                38
                            ],
                            "name": "fp",
                            "start": [
                                145,
                                36
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Writes the contents of mediabag to the given target directory. If\n`fp` is given, then only the resource with the given name will be\nextracted. Omitting that parameter means that the whole mediabag\ngets extracted. An error is thrown if `fp` is given but cannot be\nfound in the mediabag.\n",
                    "finish": [
                        145,
                        43
                    ],
                    "rawdesc": "Writes the contents of mediabag to the given target directory. If\n`fp` is given, then only the resource with the given name will be\nextracted. Omitting that parameter means that the whole mediabag\ngets extracted. An error is thrown if `fp` is given but cannot be\nfound in the mediabag.\n",
                    "start": [
                        145,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.mediabag.write(dir: any, fp: any)"
                },
                "file": "pandoc/mediabag.lua",
                "finish": [
                    145,
                    30
                ],
                "name": "write",
                "rawdesc": "Writes the contents of mediabag to the given target directory. If\n`fp` is given, then only the resource with the given name will be\nextracted. Omitting that parameter means that the whole mediabag\ngets extracted. An error is thrown if `fp` is given but cannot be\nfound in the mediabag.\n",
                "start": [
                    145,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.mediabag.write",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        16
                    ],
                    "start": [
                        3,
                        14
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    3,
                    11
                ],
                "name": "path",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.path",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Gets the directory name, i.e., removes the last directory\nseparator and everything after from the given path.\n\n\n@*return* — The filepath up to the last directory separator.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                22,
                                39
                            ],
                            "name": "filepath",
                            "start": [
                                22,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Gets the directory name, i.e., removes the last directory\nseparator and everything after from the given path.\n\n\n@*return* — The filepath up to the last directory separator.",
                    "finish": [
                        22,
                        44
                    ],
                    "rawdesc": "Gets the directory name, i.e., removes the last directory\nseparator and everything after from the given path.\n",
                    "returns": [
                        {
                            "desc": "The filepath up to the last directory separator.",
                            "rawdesc": "The filepath up to the last directory separator.",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        22,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.directory(filepath: string)\n  -> string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    22,
                    30
                ],
                "name": "directory",
                "rawdesc": "Gets the directory name, i.e., removes the last directory\nseparator and everything after from the given path.\n",
                "start": [
                    22,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get the file name.\n\n\n@*return* — File name part of the input path.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                29,
                                38
                            ],
                            "name": "filepath",
                            "start": [
                                29,
                                30
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Get the file name.\n\n\n@*return* — File name part of the input path.",
                    "finish": [
                        29,
                        43
                    ],
                    "rawdesc": "Get the file name.\n",
                    "returns": [
                        {
                            "desc": "File name part of the input path.",
                            "rawdesc": "File name part of the input path.",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        29,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.filename(filepath: string)\n  -> string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    29,
                    29
                ],
                "name": "filename",
                "rawdesc": "Get the file name.\n",
                "start": [
                    29,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.filename",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Checks whether a path is absolute, i.e. not fixed to a root.\n\n\n@*return* — `true` if `filepath` is an absolute path, `false` otherwise.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                36,
                                41
                            ],
                            "name": "filepath",
                            "start": [
                                36,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Checks whether a path is absolute, i.e. not fixed to a root.\n\n\n@*return* — `true` if `filepath` is an absolute path, `false` otherwise.",
                    "finish": [
                        36,
                        46
                    ],
                    "rawdesc": "Checks whether a path is absolute, i.e. not fixed to a root.\n",
                    "returns": [
                        {
                            "desc": "`true` if `filepath` is an absolute path, `false` otherwise.",
                            "rawdesc": "`true` if `filepath` is an absolute path, `false` otherwise.",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.is_absolute(filepath: string)\n  -> boolean"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    36,
                    32
                ],
                "name": "is_absolute",
                "rawdesc": "Checks whether a path is absolute, i.e. not fixed to a root.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.is_absolute",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Checks whether a path is relative or fixed to a root.\n\n\n@*return* — `true` if `filepath` is a relative path, `false` otherwise.",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                41
                            ],
                            "name": "filepath",
                            "start": [
                                43,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Checks whether a path is relative or fixed to a root.\n\n\n@*return* — `true` if `filepath` is a relative path, `false` otherwise.",
                    "finish": [
                        43,
                        46
                    ],
                    "rawdesc": "Checks whether a path is relative or fixed to a root.\n",
                    "returns": [
                        {
                            "desc": "`true` if `filepath` is a relative path, `false` otherwise.",
                            "rawdesc": "`true` if `filepath` is a relative path, `false` otherwise.",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.is_relative(filepath: string)\n  -> boolean"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    43,
                    32
                ],
                "name": "is_relative",
                "rawdesc": "Checks whether a path is relative or fixed to a root.\n",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.is_relative",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Join path elements back together by the directory separator.\n\n\n@*param* `filepaths` — Path components\n\n@*return* — The joined path",
                "extends": {
                    "args": [
                        {
                            "desc": "Path components",
                            "finish": [
                                50,
                                35
                            ],
                            "name": "filepaths",
                            "rawdesc": "Path components",
                            "start": [
                                50,
                                26
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Join path elements back together by the directory separator.\n\n\n@*param* `filepaths` — Path components\n\n@*return* — The joined path",
                    "finish": [
                        50,
                        40
                    ],
                    "rawdesc": "Join path elements back together by the directory separator.\n",
                    "returns": [
                        {
                            "desc": "The joined path",
                            "rawdesc": "The joined path",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.join(filepaths: table)\n  -> string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    50,
                    25
                ],
                "name": "join",
                "rawdesc": "Join path elements back together by the directory separator.\n",
                "start": [
                    50,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.join",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Contract a filename, based on a relative path. Note that the\nresulting path will usually not introduce `..` paths, as the\npresence of symlinks means `../b` may not reach `a/b` if it starts\nfrom `a/c`. For a worked example see [this blog\npost](https://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html).\n\n\n@*param* `path` — Path to be made relative\n\n@*param* `root` — Root path\n\n@*param* `unsafe` — Whether to allow `..` in the result.\n\n@*return* — Contracted filename",
                "extends": {
                    "args": [
                        {
                            "desc": "Path to be made relative",
                            "finish": [
                                64,
                                39
                            ],
                            "name": "path",
                            "rawdesc": "Path to be made relative",
                            "start": [
                                64,
                                35
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Root path",
                            "finish": [
                                64,
                                45
                            ],
                            "name": "root",
                            "rawdesc": "Root path",
                            "start": [
                                64,
                                41
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Whether to allow `..` in the result.",
                            "finish": [
                                64,
                                53
                            ],
                            "name": "unsafe",
                            "rawdesc": "Whether to allow `..` in the result.",
                            "start": [
                                64,
                                47
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Contract a filename, based on a relative path. Note that the\nresulting path will usually not introduce `..` paths, as the\npresence of symlinks means `../b` may not reach `a/b` if it starts\nfrom `a/c`. For a worked example see [this blog\npost](https://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html).\n\n\n@*param* `path` — Path to be made relative\n\n@*param* `root` — Root path\n\n@*param* `unsafe` — Whether to allow `..` in the result.\n\n@*return* — Contracted filename",
                    "finish": [
                        64,
                        58
                    ],
                    "rawdesc": "Contract a filename, based on a relative path. Note that the\nresulting path will usually not introduce `..` paths, as the\npresence of symlinks means `../b` may not reach `a/b` if it starts\nfrom `a/c`. For a worked example see [this blog\npost](https://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html).\n",
                    "returns": [
                        {
                            "desc": "Contracted filename",
                            "rawdesc": "Contracted filename",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        64,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.make_relative(path: string, root: string, unsafe?: boolean)\n  -> string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    64,
                    34
                ],
                "name": "make_relative",
                "rawdesc": "Contract a filename, based on a relative path. Note that the\nresulting path will usually not introduce `..` paths, as the\npresence of symlinks means `../b` may not reach `a/b` if it starts\nfrom `a/c`. For a worked example see [this blog\npost](https://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html).\n",
                "start": [
                    64,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.make_relative",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Normalizes a path.\n\n-   `//` makes sense only as part of a (Windows) network drive;\n    elsewhere, multiple slashes are reduced to a single\n    `path.separator` (platform dependent).\n-   `/` becomes `path.separator` (platform dependent)\n-   `./` -\\> ''\n-   an empty path becomes `.`\n\n\n@*param* `filepath` — Path to file\n\n@*return* — The normalized path.",
                "extends": {
                    "args": [
                        {
                            "desc": "Path to file",
                            "finish": [
                                78,
                                39
                            ],
                            "name": "filepath",
                            "rawdesc": "Path to file",
                            "start": [
                                78,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Normalizes a path.\n\n-   `//` makes sense only as part of a (Windows) network drive;\n    elsewhere, multiple slashes are reduced to a single\n    `path.separator` (platform dependent).\n-   `/` becomes `path.separator` (platform dependent)\n-   `./` -\\> ''\n-   an empty path becomes `.`\n\n\n@*param* `filepath` — Path to file\n\n@*return* — The normalized path.",
                    "finish": [
                        78,
                        44
                    ],
                    "rawdesc": "Normalizes a path.\n\n-   `//` makes sense only as part of a (Windows) network drive;\n    elsewhere, multiple slashes are reduced to a single\n    `path.separator` (platform dependent).\n-   `/` becomes `path.separator` (platform dependent)\n-   `./` -\\> ''\n-   an empty path becomes `.`\n",
                    "returns": [
                        {
                            "desc": "The normalized path.",
                            "rawdesc": "The normalized path.",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        78,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.normalize(filepath: string)\n  -> string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    78,
                    30
                ],
                "name": "normalize",
                "rawdesc": "Normalizes a path.\n\n-   `//` makes sense only as part of a (Windows) network drive;\n    elsewhere, multiple slashes are reduced to a single\n    `path.separator` (platform dependent).\n-   `/` becomes `path.separator` (platform dependent)\n-   `./` -\\> ''\n-   an empty path becomes `.`\n",
                "start": [
                    78,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.normalize",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The character that is used to separate the entries in the `PATH`\nenvironment variable.\n",
                "extends": {
                    "finish": [
                        14,
                        39
                    ],
                    "start": [
                        14,
                        36
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    14,
                    33
                ],
                "name": "search_path_separator",
                "rawdesc": "The character that is used to separate the entries in the `PATH`\nenvironment variable.\n",
                "start": [
                    14,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.search_path_separator",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The character that separates directories.\n",
                "extends": {
                    "finish": [
                        8,
                        27
                    ],
                    "start": [
                        8,
                        24
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    8,
                    21
                ],
                "name": "separator",
                "rawdesc": "The character that separates directories.\n",
                "start": [
                    8,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.separator",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Splits a path by the directory separator.\n\n\n@*param* `filepath` — Path to file\n\n@*return* — List of all path components",
                "extends": {
                    "args": [
                        {
                            "desc": "Path to file",
                            "finish": [
                                85,
                                35
                            ],
                            "name": "filepath",
                            "rawdesc": "Path to file",
                            "start": [
                                85,
                                27
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Splits a path by the directory separator.\n\n\n@*param* `filepath` — Path to file\n\n@*return* — List of all path components",
                    "finish": [
                        85,
                        40
                    ],
                    "rawdesc": "Splits a path by the directory separator.\n",
                    "returns": [
                        {
                            "desc": "List of all path components",
                            "rawdesc": "List of all path components",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        85,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.split(filepath: string)\n  -> table"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    85,
                    26
                ],
                "name": "split",
                "rawdesc": "Splits a path by the directory separator.\n",
                "start": [
                    85,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.split",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Splits the last extension from a file path and returns the parts. The\nextension, if present, includes the leading separator; if the path has\nno extension, then the empty string is returned as the extension.\n\nReturns:\n\n-   filepath without extension (string)\n-   extension or empty string (string)\n\n\n@*param* `filepath` — Path to file",
                "extends": {
                    "args": [
                        {
                            "desc": "Path to file",
                            "finish": [
                                99,
                                45
                            ],
                            "name": "filepath",
                            "rawdesc": "Path to file",
                            "start": [
                                99,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Splits the last extension from a file path and returns the parts. The\nextension, if present, includes the leading separator; if the path has\nno extension, then the empty string is returned as the extension.\n\nReturns:\n\n-   filepath without extension (string)\n-   extension or empty string (string)\n\n\n@*param* `filepath` — Path to file",
                    "finish": [
                        99,
                        50
                    ],
                    "rawdesc": "Splits the last extension from a file path and returns the parts. The\nextension, if present, includes the leading separator; if the path has\nno extension, then the empty string is returned as the extension.\n\nReturns:\n\n-   filepath without extension (string)\n-   extension or empty string (string)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        99,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.split_extension(filepath: string)\n  -> string\n  2. string"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    99,
                    36
                ],
                "name": "split_extension",
                "rawdesc": "Splits the last extension from a file path and returns the parts. The\nextension, if present, includes the leading separator; if the path has\nno extension, then the empty string is returned as the extension.\n\nReturns:\n\n-   filepath without extension (string)\n-   extension or empty string (string)\n",
                "start": [
                    99,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.split_extension",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Takes a string and splits it on the `search_path_separator` character.\nBlank items are ignored on Windows, and converted to `.` on Posix. On\nWindows path elements are stripped of quotes.\n\n\n@*param* `search_path` — Platform-specific search path\n\n@*return* — List of directories in search path",
                "extends": {
                    "args": [
                        {
                            "desc": "Platform-specific search path",
                            "finish": [
                                108,
                                50
                            ],
                            "name": "search_path",
                            "rawdesc": "Platform-specific search path",
                            "start": [
                                108,
                                39
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Takes a string and splits it on the `search_path_separator` character.\nBlank items are ignored on Windows, and converted to `.` on Posix. On\nWindows path elements are stripped of quotes.\n\n\n@*param* `search_path` — Platform-specific search path\n\n@*return* — List of directories in search path",
                    "finish": [
                        108,
                        55
                    ],
                    "rawdesc": "Takes a string and splits it on the `search_path_separator` character.\nBlank items are ignored on Windows, and converted to `.` on Posix. On\nWindows path elements are stripped of quotes.\n",
                    "returns": [
                        {
                            "desc": "List of directories in search path",
                            "rawdesc": "List of directories in search path",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        108,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.path.split_search_path(search_path: string)\n  -> table"
                },
                "file": "pandoc/path.lua",
                "finish": [
                    108,
                    38
                ],
                "name": "split_search_path",
                "rawdesc": "Takes a string and splits it on the `search_path_separator` character.\nBlank items are ignored on Windows, and converted to `.` on Posix. On\nWindows path elements are stripped of quotes.\n",
                "start": [
                    108,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.path.split_search_path",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Runs command with arguments, passing it some input, and returns the output.\n\n\n@*param* `command` — Program to run; the executable will be resolved using default system methods\n\n@*param* `args` — List of arguments to pass to the program\n\n@*param* `input` — Data which is piped into the program via stdin\n\n@*return* — Output of command, i.e. data printed to stdout",
                "extends": {
                    "args": [
                        {
                            "desc": "Program to run; the executable will be resolved using default system methods",
                            "finish": [
                                63,
                                28
                            ],
                            "name": "command",
                            "rawdesc": "Program to run; the executable will be resolved using default system methods",
                            "start": [
                                63,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "List of arguments to pass to the program",
                            "finish": [
                                63,
                                34
                            ],
                            "name": "args",
                            "rawdesc": "List of arguments to pass to the program",
                            "start": [
                                63,
                                30
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "Data which is piped into the program via stdin",
                            "finish": [
                                63,
                                41
                            ],
                            "name": "input",
                            "rawdesc": "Data which is piped into the program via stdin",
                            "start": [
                                63,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Runs command with arguments, passing it some input, and returns the output.\n\n\n@*param* `command` — Program to run; the executable will be resolved using default system methods\n\n@*param* `args` — List of arguments to pass to the program\n\n@*param* `input` — Data which is piped into the program via stdin\n\n@*return* — Output of command, i.e. data printed to stdout",
                    "finish": [
                        63,
                        46
                    ],
                    "rawdesc": "Runs command with arguments, passing it some input, and returns the output.\n",
                    "returns": [
                        {
                            "desc": "Output of command, i.e. data printed to stdout",
                            "rawdesc": "Output of command, i.e. data printed to stdout",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.pipe(command: string, args: table, input: string)\n  -> string"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    63,
                    20
                ],
                "name": "pipe",
                "rawdesc": "Runs command with arguments, passing it some input, and returns the output.\n",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.pipe",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Parse the given string into a Pandoc document.\n\nThe parser is run in the same environment that was used to read\nthe main input files; it has full access to the file-system and\nthe mediabag. This means that if the document specifies files to\nbe included, as is possible in formats like LaTeX,\nreStructuredText, and Org, then these will be included in the\nresulting document. Any media elements are added to those\nretrieved from the other parsed input files.\n\nThe `format` parameter defines the format flavor that will be\nparsed. This can be either a string, using `+` and `-` to enable\nand disable extensions, or a table with fields `format` (string)\nand `extensions` (table). The `extensions` table can be a list of\nall enabled extensions, or a table with extensions as keys and\ntheir activation status as values (`true` or `'enable'` to enable\nan extension, `false` or `'disable'` to disable it).\n\nUsage:\n\n    local org_markup = \"/emphasis/\"  -- Input to be read\n    local document = pandoc.read(org_markup, \"org\")\n    -- Get the first block of the document\n    local block = document.blocks[1]\n    -- The inline element in that block is an `Emph`\n    assert(block.content[1].t == \"Emph\")\n\n\n@*param* `markup` — The markup to be parsed\n\n@*param* `format` — Format specification, defaults to `\"markdown\"\n\n@*param* `reader_options` — Options passed to the reader; may be a ReaderOptions object or a table with a subset of the keys and values of a ReaderOptions object; defaults to the default values documented in the manual.\n\n@*return* — Pandoc document",
                "extends": {
                    "args": [
                        {
                            "desc": "The markup to be parsed",
                            "finish": [
                                119,
                                27
                            ],
                            "name": "markup",
                            "rawdesc": "The markup to be parsed",
                            "start": [
                                119,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Format specification, defaults to `\"markdown\"",
                            "finish": [
                                119,
                                35
                            ],
                            "name": "format",
                            "rawdesc": "Format specification, defaults to `\"markdown\"",
                            "start": [
                                119,
                                29
                            ],
                            "type": "local",
                            "view": "(string|string[]|{ format: string, extensions: string[]|table<string, boolean|\"disable\"|\"enable\"> })?"
                        },
                        {
                            "desc": "Options passed to the reader; may be a ReaderOptions object or a table with a subset of the keys and values of a ReaderOptions object; defaults to the default values documented in the manual.",
                            "finish": [
                                119,
                                51
                            ],
                            "name": "reader_options",
                            "rawdesc": "Options passed to the reader; may be a ReaderOptions object or a table with a subset of the keys and values of a ReaderOptions object; defaults to the default values documented in the manual.",
                            "start": [
                                119,
                                37
                            ],
                            "type": "local",
                            "view": "(table|pandoc.ReaderOptions)?"
                        }
                    ],
                    "desc": "Parse the given string into a Pandoc document.\n\nThe parser is run in the same environment that was used to read\nthe main input files; it has full access to the file-system and\nthe mediabag. This means that if the document specifies files to\nbe included, as is possible in formats like LaTeX,\nreStructuredText, and Org, then these will be included in the\nresulting document. Any media elements are added to those\nretrieved from the other parsed input files.\n\nThe `format` parameter defines the format flavor that will be\nparsed. This can be either a string, using `+` and `-` to enable\nand disable extensions, or a table with fields `format` (string)\nand `extensions` (table). The `extensions` table can be a list of\nall enabled extensions, or a table with extensions as keys and\ntheir activation status as values (`true` or `'enable'` to enable\nan extension, `false` or `'disable'` to disable it).\n\nUsage:\n\n    local org_markup = \"/emphasis/\"  -- Input to be read\n    local document = pandoc.read(org_markup, \"org\")\n    -- Get the first block of the document\n    local block = document.blocks[1]\n    -- The inline element in that block is an `Emph`\n    assert(block.content[1].t == \"Emph\")\n\n\n@*param* `markup` — The markup to be parsed\n\n@*param* `format` — Format specification, defaults to `\"markdown\"\n\n@*param* `reader_options` — Options passed to the reader; may be a ReaderOptions object or a table with a subset of the keys and values of a ReaderOptions object; defaults to the default values documented in the manual.\n\n@*return* — Pandoc document",
                    "finish": [
                        119,
                        56
                    ],
                    "rawdesc": "Parse the given string into a Pandoc document.\n\nThe parser is run in the same environment that was used to read\nthe main input files; it has full access to the file-system and\nthe mediabag. This means that if the document specifies files to\nbe included, as is possible in formats like LaTeX,\nreStructuredText, and Org, then these will be included in the\nresulting document. Any media elements are added to those\nretrieved from the other parsed input files.\n\nThe `format` parameter defines the format flavor that will be\nparsed. This can be either a string, using `+` and `-` to enable\nand disable extensions, or a table with fields `format` (string)\nand `extensions` (table). The `extensions` table can be a list of\nall enabled extensions, or a table with extensions as keys and\ntheir activation status as values (`true` or `'enable'` to enable\nan extension, `false` or `'disable'` to disable it).\n\nUsage:\n\n    local org_markup = \"/emphasis/\"  -- Input to be read\n    local document = pandoc.read(org_markup, \"org\")\n    -- Get the first block of the document\n    local block = document.blocks[1]\n    -- The inline element in that block is an `Emph`\n    assert(block.content[1].t == \"Emph\")\n",
                    "returns": [
                        {
                            "desc": "Pandoc document",
                            "rawdesc": "Pandoc document",
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        119,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.read(markup: string, format?: string|string[]|{ format: string, extensions: string[]|table<string, boolean|\"disable\"|\"enable\"> }, reader_options?: table|pandoc.ReaderOptions)\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    119,
                    20
                ],
                "name": "read",
                "rawdesc": "Parse the given string into a Pandoc document.\n\nThe parser is run in the same environment that was used to read\nthe main input files; it has full access to the file-system and\nthe mediabag. This means that if the document specifies files to\nbe included, as is possible in formats like LaTeX,\nreStructuredText, and Org, then these will be included in the\nresulting document. Any media elements are added to those\nretrieved from the other parsed input files.\n\nThe `format` parameter defines the format flavor that will be\nparsed. This can be either a string, using `+` and `-` to enable\nand disable extensions, or a table with fields `format` (string)\nand `extensions` (table). The `extensions` table can be a list of\nall enabled extensions, or a table with extensions as keys and\ntheir activation status as values (`true` or `'enable'` to enable\nan extension, `false` or `'disable'` to disable it).\n\nUsage:\n\n    local org_markup = \"/emphasis/\"  -- Input to be read\n    local document = pandoc.read(org_markup, \"org\")\n    -- Get the first block of the document\n    local block = document.blocks[1]\n    -- The inline element in that block is an `Emph`\n    assert(block.content[1].t == \"Emph\")\n",
                "start": [
                    119,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.read",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        6,
                        19
                    ],
                    "start": [
                        6,
                        17
                    ],
                    "type": "table",
                    "view": "{ [string]: boolean }"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    6,
                    14
                ],
                "name": "readers",
                "start": [
                    6,
                    0
                ],
                "type": "setfield",
                "view": "table<string, boolean>",
                "visible": "public"
            }
        ],
        "name": "pandoc.readers",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nAccess to the higher-level document structure, including hierarchical\nsections and the table of contents.\n\n",
                "extends": {
                    "finish": [
                        9,
                        21
                    ],
                    "start": [
                        9,
                        19
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    9,
                    16
                ],
                "name": "structure",
                "rawdesc": "\nAccess to the higher-level document structure, including hierarchical\nsections and the table of contents.\n\n",
                "start": [
                    9,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.structure",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nPuts [Blocks](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-blocks) into a hierarchical structure: a list of\nsections (each a Div with class \"section\" and first element a Header).\n\nThe optional `opts` argument can be a table; two settings are\nrecognized: If `number_sections` is true, a `number` attribute\ncontaining the section number will be added to each `Header`. If\n`base_level` is an integer, then `Header` levels will be reorganized so\nthat there are no gaps, with numbering levels shifted by the given\nvalue. Finally, an integer `slide_level` value triggers the creation of\nslides at that heading level.\n\nNote that a [WriterOptions](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-writeroptions) object can be passed as\nthe opts table; this will set the `number_section` and `slide_level`\nvalues to those defined on the command line.\n\nUsage:\n\n    local blocks = {\n      pandoc.Header(2, pandoc.Str 'first'),\n      pandoc.Header(2, pandoc.Str 'second'),\n    }\n    local opts = PANDOC_WRITER_OPTIONS\n    local newblocks = pandoc.structure.make_sections(blocks, opts)\n\n\n\n@*param* `blocks` — document blocks to process\n\n@*param* `opts` — options\n\n@*return* — processed blocks",
                "extends": {
                    "args": [
                        {
                            "desc": "document blocks to process",
                            "finish": [
                                40,
                                46
                            ],
                            "name": "blocks",
                            "rawdesc": "document blocks to process",
                            "start": [
                                40,
                                40
                            ],
                            "type": "local",
                            "view": "pandoc.Blocks"
                        },
                        {
                            "desc": "options",
                            "finish": [
                                40,
                                52
                            ],
                            "name": "opts",
                            "rawdesc": "options",
                            "start": [
                                40,
                                48
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nPuts [Blocks](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-blocks) into a hierarchical structure: a list of\nsections (each a Div with class \"section\" and first element a Header).\n\nThe optional `opts` argument can be a table; two settings are\nrecognized: If `number_sections` is true, a `number` attribute\ncontaining the section number will be added to each `Header`. If\n`base_level` is an integer, then `Header` levels will be reorganized so\nthat there are no gaps, with numbering levels shifted by the given\nvalue. Finally, an integer `slide_level` value triggers the creation of\nslides at that heading level.\n\nNote that a [WriterOptions](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-writeroptions) object can be passed as\nthe opts table; this will set the `number_section` and `slide_level`\nvalues to those defined on the command line.\n\nUsage:\n\n    local blocks = {\n      pandoc.Header(2, pandoc.Str 'first'),\n      pandoc.Header(2, pandoc.Str 'second'),\n    }\n    local opts = PANDOC_WRITER_OPTIONS\n    local newblocks = pandoc.structure.make_sections(blocks, opts)\n\n\n\n@*param* `blocks` — document blocks to process\n\n@*param* `opts` — options\n\n@*return* — processed blocks",
                    "finish": [
                        40,
                        57
                    ],
                    "rawdesc": "\nPuts [Blocks](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-blocks) into a hierarchical structure: a list of\nsections (each a Div with class \"section\" and first element a Header).\n\nThe optional `opts` argument can be a table; two settings are\nrecognized: If `number_sections` is true, a `number` attribute\ncontaining the section number will be added to each `Header`. If\n`base_level` is an integer, then `Header` levels will be reorganized so\nthat there are no gaps, with numbering levels shifted by the given\nvalue. Finally, an integer `slide_level` value triggers the creation of\nslides at that heading level.\n\nNote that a [WriterOptions](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-writeroptions) object can be passed as\nthe opts table; this will set the `number_section` and `slide_level`\nvalues to those defined on the command line.\n\nUsage:\n\n    local blocks = {\n      pandoc.Header(2, pandoc.Str 'first'),\n      pandoc.Header(2, pandoc.Str 'second'),\n    }\n    local opts = PANDOC_WRITER_OPTIONS\n    local newblocks = pandoc.structure.make_sections(blocks, opts)\n\n",
                    "returns": [
                        {
                            "desc": "processed blocks",
                            "rawdesc": "processed blocks",
                            "type": "function.return",
                            "view": "pandoc.Blocks[]"
                        }
                    ],
                    "start": [
                        40,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.structure.make_sections(blocks: pandoc.Blocks, opts?: table)\n  -> pandoc.Blocks[]"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    40,
                    39
                ],
                "name": "make_sections",
                "rawdesc": "\nPuts [Blocks](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-blocks) into a hierarchical structure: a list of\nsections (each a Div with class \"section\" and first element a Header).\n\nThe optional `opts` argument can be a table; two settings are\nrecognized: If `number_sections` is true, a `number` attribute\ncontaining the section number will be added to each `Header`. If\n`base_level` is an integer, then `Header` levels will be reorganized so\nthat there are no gaps, with numbering levels shifted by the given\nvalue. Finally, an integer `slide_level` value triggers the creation of\nslides at that heading level.\n\nNote that a [WriterOptions](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-writeroptions) object can be passed as\nthe opts table; this will set the `number_section` and `slide_level`\nvalues to those defined on the command line.\n\nUsage:\n\n    local blocks = {\n      pandoc.Header(2, pandoc.Str 'first'),\n      pandoc.Header(2, pandoc.Str 'second'),\n    }\n    local opts = PANDOC_WRITER_OPTIONS\n    local newblocks = pandoc.structure.make_sections(blocks, opts)\n\n",
                "start": [
                    40,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.structure.make_sections",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Find level of header that starts slides (defined as the least header\nlevel that occurs before a non-header/non-hrule in the blocks).\n\n\n@*param* `blocks` — document body\n\n@*return* — slide level",
                "extends": {
                    "args": [
                        {
                            "desc": "document body",
                            "finish": [
                                48,
                                44
                            ],
                            "name": "blocks",
                            "rawdesc": "document body",
                            "start": [
                                48,
                                38
                            ],
                            "type": "local",
                            "view": "pandoc.Blocks|pandoc.Pandoc"
                        }
                    ],
                    "desc": "Find level of header that starts slides (defined as the least header\nlevel that occurs before a non-header/non-hrule in the blocks).\n\n\n@*param* `blocks` — document body\n\n@*return* — slide level",
                    "finish": [
                        48,
                        49
                    ],
                    "rawdesc": "Find level of header that starts slides (defined as the least header\nlevel that occurs before a non-header/non-hrule in the blocks).\n",
                    "returns": [
                        {
                            "desc": "slide level",
                            "rawdesc": "slide level",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        48,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.structure.slide_level(blocks: pandoc.Blocks|pandoc.Pandoc)\n  -> integer"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    48,
                    37
                ],
                "name": "slide_level",
                "rawdesc": "Find level of header that starts slides (defined as the least header\nlevel that occurs before a non-header/non-hrule in the blocks).\n",
                "start": [
                    48,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.structure.slide_level",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts a [Pandoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-pandoc) document into a\n[ChunkedDoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-chunkeddoc).\n\nThe following option fields are supported:\n\n    `path_template`\n    :   template used to generate the chunks' filepaths\n        `%n` will be replaced with the chunk number (padded with\n        leading 0s to 3 digits), `%s` with the section number of\n        the heading, `%h` with the (stringified) heading text,\n        `%i` with the section identifier. For example,\n        `\"section-%s-%i.html\"` might be resolved to\n        `\"section-1.2-introduction.html\"`.\n\n        Default is `\"chunk-%n\"` (string)\n\n    `number_sections`\n    :   whether sections should be numbered; default is `false`\n        (boolean)\n\n    `chunk_level`\n    :   The heading level the document should be split into\n        chunks. The default is to split at the top-level, i.e.,\n        `1`. (integer)\n\n    `base_heading_level`\n    :   The base level to be used for numbering. Default is `nil`\n        (integer|nil)\n\n\n@*param* `doc` — document to split\n\n@*param* `opts` — Options. see documentation body for details",
                "extends": {
                    "args": [
                        {
                            "desc": "document to split",
                            "finish": [
                                83,
                                47
                            ],
                            "name": "doc",
                            "rawdesc": "document to split",
                            "start": [
                                83,
                                44
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "Options. see documentation body for details",
                            "finish": [
                                83,
                                53
                            ],
                            "name": "opts",
                            "rawdesc": "Options. see documentation body for details",
                            "start": [
                                83,
                                49
                            ],
                            "type": "local",
                            "view": "{ path_template: string, number_sections: boolean, chunk_level: integer, base_heading_level: integer|nil }?"
                        }
                    ],
                    "desc": "Converts a [Pandoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-pandoc) document into a\n[ChunkedDoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-chunkeddoc).\n\nThe following option fields are supported:\n\n    `path_template`\n    :   template used to generate the chunks' filepaths\n        `%n` will be replaced with the chunk number (padded with\n        leading 0s to 3 digits), `%s` with the section number of\n        the heading, `%h` with the (stringified) heading text,\n        `%i` with the section identifier. For example,\n        `\"section-%s-%i.html\"` might be resolved to\n        `\"section-1.2-introduction.html\"`.\n\n        Default is `\"chunk-%n\"` (string)\n\n    `number_sections`\n    :   whether sections should be numbered; default is `false`\n        (boolean)\n\n    `chunk_level`\n    :   The heading level the document should be split into\n        chunks. The default is to split at the top-level, i.e.,\n        `1`. (integer)\n\n    `base_heading_level`\n    :   The base level to be used for numbering. Default is `nil`\n        (integer|nil)\n\n\n@*param* `doc` — document to split\n\n@*param* `opts` — Options. see documentation body for details",
                    "finish": [
                        83,
                        58
                    ],
                    "rawdesc": "Converts a [Pandoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-pandoc) document into a\n[ChunkedDoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-chunkeddoc).\n\nThe following option fields are supported:\n\n    `path_template`\n    :   template used to generate the chunks' filepaths\n        `%n` will be replaced with the chunk number (padded with\n        leading 0s to 3 digits), `%s` with the section number of\n        the heading, `%h` with the (stringified) heading text,\n        `%i` with the section identifier. For example,\n        `\"section-%s-%i.html\"` might be resolved to\n        `\"section-1.2-introduction.html\"`.\n\n        Default is `\"chunk-%n\"` (string)\n\n    `number_sections`\n    :   whether sections should be numbered; default is `false`\n        (boolean)\n\n    `chunk_level`\n    :   The heading level the document should be split into\n        chunks. The default is to split at the top-level, i.e.,\n        `1`. (integer)\n\n    `base_heading_level`\n    :   The base level to be used for numbering. Default is `nil`\n        (integer|nil)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.ChunkedDoc"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.structure.split_into_chunks(doc: pandoc.Pandoc, opts?: { path_template: string, number_sections: boolean, chunk_level: integer, base_heading_level: integer|nil })\n  -> pandoc.ChunkedDoc"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    83,
                    43
                ],
                "name": "split_into_chunks",
                "rawdesc": "Converts a [Pandoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-pandoc) document into a\n[ChunkedDoc](file:///Users/cscheid/repos/github/quarto-dev/quarto-cli/src/resources/lua-types/pandoc/%23type-chunkeddoc).\n\nThe following option fields are supported:\n\n    `path_template`\n    :   template used to generate the chunks' filepaths\n        `%n` will be replaced with the chunk number (padded with\n        leading 0s to 3 digits), `%s` with the section number of\n        the heading, `%h` with the (stringified) heading text,\n        `%i` with the section identifier. For example,\n        `\"section-%s-%i.html\"` might be resolved to\n        `\"section-1.2-introduction.html\"`.\n\n        Default is `\"chunk-%n\"` (string)\n\n    `number_sections`\n    :   whether sections should be numbered; default is `false`\n        (boolean)\n\n    `chunk_level`\n    :   The heading level the document should be split into\n        chunks. The default is to split at the top-level, i.e.,\n        `1`. (integer)\n\n    `base_heading_level`\n    :   The base level to be used for numbering. Default is `nil`\n        (integer|nil)\n",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.structure.split_into_chunks",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Generates a table of contents for the given object.\n\n\n@*param* `toc_source` — list of command line arguments\n\n@*param* `opts` — options\n\n@*return* — Table of contents as a BulletList object",
                "extends": {
                    "args": [
                        {
                            "desc": "list of command line arguments",
                            "finish": [
                                91,
                                54
                            ],
                            "name": "toc_source",
                            "rawdesc": "list of command line arguments",
                            "start": [
                                91,
                                44
                            ],
                            "type": "local",
                            "view": "pandoc.Blocks|pandoc.ChunkedDoc|pandoc.Pandoc"
                        },
                        {
                            "desc": "options",
                            "finish": [
                                91,
                                60
                            ],
                            "name": "opts",
                            "rawdesc": "options",
                            "start": [
                                91,
                                56
                            ],
                            "type": "local",
                            "view": "(pandoc.WriterOptions)?"
                        }
                    ],
                    "desc": "Generates a table of contents for the given object.\n\n\n@*param* `toc_source` — list of command line arguments\n\n@*param* `opts` — options\n\n@*return* — Table of contents as a BulletList object",
                    "finish": [
                        91,
                        65
                    ],
                    "rawdesc": "Generates a table of contents for the given object.\n",
                    "returns": [
                        {
                            "desc": "Table of contents as a BulletList object",
                            "rawdesc": "Table of contents as a BulletList object",
                            "type": "function.return",
                            "view": "pandoc.Block"
                        }
                    ],
                    "start": [
                        91,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.structure.table_of_contents(toc_source: pandoc.Blocks|pandoc.ChunkedDoc|pandoc.Pandoc, opts?: pandoc.WriterOptions)\n  -> pandoc.Block"
                },
                "file": "pandoc/structure.lua",
                "finish": [
                    91,
                    43
                ],
                "name": "table_of_contents",
                "rawdesc": "Generates a table of contents for the given object.\n",
                "start": [
                    91,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.structure.table_of_contents",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        18
                    ],
                    "start": [
                        4,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    4,
                    13
                ],
                "name": "system",
                "start": [
                    4,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.system",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The machine architecture on which the program is running.\n",
                "extends": {
                    "finish": [
                        9,
                        29
                    ],
                    "start": [
                        9,
                        21
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    9,
                    18
                ],
                "name": "arch",
                "rawdesc": "The machine architecture on which the program is running.\n",
                "start": [
                    9,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.arch",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Retrieve the entire environment as a string-indexed table. \n\nReturns:\n\n-   A table mapping environment variables names to their string value \n",
                "extends": {
                    "args": [],
                    "desc": "Retrieve the entire environment as a string-indexed table. \n\nReturns:\n\n-   A table mapping environment variables names to their string value \n",
                    "finish": [
                        25,
                        40
                    ],
                    "rawdesc": "Retrieve the entire environment as a string-indexed table. \n\nReturns:\n\n-   A table mapping environment variables names to their string value \n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<string, string>"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.environment()\n  -> table<string, string>"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    25,
                    34
                ],
                "name": "environment",
                "rawdesc": "Retrieve the entire environment as a string-indexed table. \n\nReturns:\n\n-   A table mapping environment variables names to their string value \n",
                "start": [
                    25,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.environment",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Obtain the current working directory as an absolute path.\n\nReturns:\n\n-   The current working directory\n",
                "extends": {
                    "args": [],
                    "desc": "Obtain the current working directory as an absolute path.\n\nReturns:\n\n-   The current working directory\n",
                    "finish": [
                        35,
                        50
                    ],
                    "rawdesc": "Obtain the current working directory as an absolute path.\n\nReturns:\n\n-   The current working directory\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        35,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.get_working_directory()\n  -> string"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    35,
                    44
                ],
                "name": "get_working_directory",
                "rawdesc": "Obtain the current working directory as an absolute path.\n\nReturns:\n\n-   The current working directory\n",
                "start": [
                    35,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.get_working_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List the contents of a directory. \n\n\n@*param* `directory` — Path of the directory whose contents should be listed. Defaults to `.`\n\n@*return* — A table of all entries in `directory` without the special entries `.` and `..`.",
                "extends": {
                    "args": [
                        {
                            "desc": "Path of the directory whose contents should be listed. Defaults to `.`",
                            "finish": [
                                42,
                                47
                            ],
                            "name": "directory",
                            "rawdesc": "Path of the directory whose contents should be listed. Defaults to `.`",
                            "start": [
                                42,
                                38
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "List the contents of a directory. \n\n\n@*param* `directory` — Path of the directory whose contents should be listed. Defaults to `.`\n\n@*return* — A table of all entries in `directory` without the special entries `.` and `..`.",
                    "finish": [
                        42,
                        52
                    ],
                    "rawdesc": "List the contents of a directory. \n",
                    "returns": [
                        {
                            "desc": "A table of all entries in `directory` without the special entries `.` and `..`.",
                            "rawdesc": "A table of all entries in `directory` without the special entries `.` and `..`.",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.list_directory(directory?: string)\n  -> table"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    42,
                    37
                ],
                "name": "list_directory",
                "rawdesc": "List the contents of a directory. \n",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.list_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a new directory which is initially empty, or as near to\nempty as the operating system allows. The function throws an\nerror if the directory cannot be created, e.g., if the parent\ndirectory does not exist or if a directory of the same name is\nalready present.\n\nIf the optional second parameter is provided and truthy, then all\ndirectories, including parent directories, are created as\nnecessary.\n\n\n@*param* `dirname` — Name of the new directory\n\n@*param* `create_parent` — Create parent directories if necessary",
                "extends": {
                    "args": [
                        {
                            "desc": "Name of the new directory",
                            "finish": [
                                57,
                                45
                            ],
                            "name": "dirname",
                            "rawdesc": "Name of the new directory",
                            "start": [
                                57,
                                38
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Create parent directories if necessary",
                            "finish": [
                                57,
                                60
                            ],
                            "name": "create_parent",
                            "rawdesc": "Create parent directories if necessary",
                            "start": [
                                57,
                                47
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Create a new directory which is initially empty, or as near to\nempty as the operating system allows. The function throws an\nerror if the directory cannot be created, e.g., if the parent\ndirectory does not exist or if a directory of the same name is\nalready present.\n\nIf the optional second parameter is provided and truthy, then all\ndirectories, including parent directories, are created as\nnecessary.\n\n\n@*param* `dirname` — Name of the new directory\n\n@*param* `create_parent` — Create parent directories if necessary",
                    "finish": [
                        57,
                        65
                    ],
                    "rawdesc": "Create a new directory which is initially empty, or as near to\nempty as the operating system allows. The function throws an\nerror if the directory cannot be created, e.g., if the parent\ndirectory does not exist or if a directory of the same name is\nalready present.\n\nIf the optional second parameter is provided and truthy, then all\ndirectories, including parent directories, are created as\nnecessary.\n",
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.make_directory(dirname: string, create_parent?: boolean)"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    57,
                    37
                ],
                "name": "make_directory",
                "rawdesc": "Create a new directory which is initially empty, or as near to\nempty as the operating system allows. The function throws an\nerror if the directory cannot be created, e.g., if the parent\ndirectory does not exist or if a directory of the same name is\nalready present.\n\nIf the optional second parameter is provided and truthy, then all\ndirectories, including parent directories, are created as\nnecessary.\n",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.make_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "The operating system on which the program is running.\n",
                "extends": {
                    "finish": [
                        14,
                        27
                    ],
                    "start": [
                        14,
                        19
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    14,
                    16
                ],
                "name": "os",
                "rawdesc": "The operating system on which the program is running.\n",
                "start": [
                    14,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.os",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Remove an existing, empty directory. If `recursive` is given,\nthen delete the directory and its contents recursively.\n\n\n@*param* `dirname` — Name of the directory to delete\n\n@*param* `recursive` — Delete content recursively",
                "extends": {
                    "args": [
                        {
                            "desc": "Name of the directory to delete",
                            "finish": [
                                65,
                                47
                            ],
                            "name": "dirname",
                            "rawdesc": "Name of the directory to delete",
                            "start": [
                                65,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Delete content recursively",
                            "finish": [
                                65,
                                58
                            ],
                            "name": "recursive",
                            "rawdesc": "Delete content recursively",
                            "start": [
                                65,
                                49
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Remove an existing, empty directory. If `recursive` is given,\nthen delete the directory and its contents recursively.\n\n\n@*param* `dirname` — Name of the directory to delete\n\n@*param* `recursive` — Delete content recursively",
                    "finish": [
                        65,
                        63
                    ],
                    "rawdesc": "Remove an existing, empty directory. If `recursive` is given,\nthen delete the directory and its contents recursively.\n",
                    "start": [
                        65,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.remove_directory(dirname: string, recursive?: boolean)"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    65,
                    39
                ],
                "name": "remove_directory",
                "rawdesc": "Remove an existing, empty directory. If `recursive` is given,\nthen delete the directory and its contents recursively.\n",
                "start": [
                    65,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.remove_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "- Run an action within a custom environment. Only the environment\n-- variables given by `environment` will be set, when `callback` is\n-- called. The original environment is restored after this function\n-- finishes, even if an error occurs while running the callback\n-- action.\n\n\n@*param* `environment` — Environment variables and their values to be set beforerunning `callback`\n\n@*param* `callback` — Action to execute in the custom environment\n\n@*return* — The result(s) of the call to `callback`",
                "extends": {
                    "args": [
                        {
                            "desc": "Environment variables and their values to be set beforerunning `callback`",
                            "finish": [
                                77,
                                51
                            ],
                            "name": "environment",
                            "rawdesc": "Environment variables and their values to be set beforerunning `callback`",
                            "start": [
                                77,
                                40
                            ],
                            "type": "local",
                            "view": "table<string, string>"
                        },
                        {
                            "desc": "Action to execute in the custom environment",
                            "finish": [
                                77,
                                61
                            ],
                            "name": "callback",
                            "rawdesc": "Action to execute in the custom environment",
                            "start": [
                                77,
                                53
                            ],
                            "type": "local",
                            "view": "fun():unknown"
                        }
                    ],
                    "desc": "- Run an action within a custom environment. Only the environment\n-- variables given by `environment` will be set, when `callback` is\n-- called. The original environment is restored after this function\n-- finishes, even if an error occurs while running the callback\n-- action.\n\n\n@*param* `environment` — Environment variables and their values to be set beforerunning `callback`\n\n@*param* `callback` — Action to execute in the custom environment\n\n@*return* — The result(s) of the call to `callback`",
                    "finish": [
                        77,
                        66
                    ],
                    "rawdesc": "- Run an action within a custom environment. Only the environment\n-- variables given by `environment` will be set, when `callback` is\n-- called. The original environment is restored after this function\n-- finishes, even if an error occurs while running the callback\n-- action.\n",
                    "returns": [
                        {
                            "desc": "The result(s) of the call to `callback`",
                            "rawdesc": "The result(s) of the call to `callback`",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        77,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.with_environment(environment: table<string, string>, callback: fun():unknown)\n  -> unknown"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    77,
                    39
                ],
                "name": "with_environment",
                "rawdesc": "- Run an action within a custom environment. Only the environment\n-- variables given by `environment` will be set, when `callback` is\n-- called. The original environment is restored after this function\n-- finishes, even if an error occurs while running the callback\n-- action.\n",
                "start": [
                    77,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.with_environment",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create and use a temporary directory inside the the system's canonical temporary directory.\nThe directory is deleted after the callback returns.\n\n\n@*param* `templ` — Directory name template\n\n@*param* `callback` — Function which takes the name of the temporary directory as ts first argument.\n\n@*return* — The result(s) of the call to `callback`",
                "extends": {
                    "args": [
                        {
                            "desc": "Directory name template",
                            "finish": [
                                86,
                                53
                            ],
                            "name": "templ",
                            "rawdesc": "Directory name template",
                            "start": [
                                86,
                                48
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Function which takes the name of the temporary directory as ts first argument.",
                            "finish": [
                                86,
                                63
                            ],
                            "name": "callback",
                            "rawdesc": "Function which takes the name of the temporary directory as ts first argument.",
                            "start": [
                                86,
                                55
                            ],
                            "type": "local",
                            "view": "fun(x: string):unknown"
                        }
                    ],
                    "desc": "Create and use a temporary directory inside the the system's canonical temporary directory.\nThe directory is deleted after the callback returns.\n\n\n@*param* `templ` — Directory name template\n\n@*param* `callback` — Function which takes the name of the temporary directory as ts first argument.\n\n@*return* — The result(s) of the call to `callback`",
                    "finish": [
                        86,
                        68
                    ],
                    "rawdesc": "Create and use a temporary directory inside the the system's canonical temporary directory.\nThe directory is deleted after the callback returns.\n",
                    "returns": [
                        {
                            "desc": "The result(s) of the call to `callback`",
                            "rawdesc": "The result(s) of the call to `callback`",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        86,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.with_temporary_directory(templ: string, callback: fun(x: string):unknown)\n  -> unknown"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    86,
                    47
                ],
                "name": "with_temporary_directory",
                "rawdesc": "Create and use a temporary directory inside the the system's canonical temporary directory.\nThe directory is deleted after the callback returns.\n",
                "start": [
                    86,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "Create and use a temporary directory inside the given directory.\nThe directory is deleted after the callback returns.\n\n\n@*param* `parent_dir` — Parent directory to create the directory in. If this parameter is omitted, the system's canonical temporary directory is used.\n\n@*param* `templ` — Directory name template\n\n@*param* `callback` — Function which takes the name of the temporary directory as ts first argument.\n\n@*return* — The result(s) of the call to `callback`",
                "extends": {
                    "args": [
                        {
                            "desc": "Parent directory to create the directory in. If this parameter is omitted, the system's canonical temporary directory is used.",
                            "finish": [
                                97,
                                58
                            ],
                            "name": "parent_dir",
                            "rawdesc": "Parent directory to create the directory in. If this parameter is omitted, the system's canonical temporary directory is used.",
                            "start": [
                                97,
                                48
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Directory name template",
                            "finish": [
                                97,
                                65
                            ],
                            "name": "templ",
                            "rawdesc": "Directory name template",
                            "start": [
                                97,
                                60
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Function which takes the name of the temporary directory as ts first argument.",
                            "finish": [
                                97,
                                75
                            ],
                            "name": "callback",
                            "rawdesc": "Function which takes the name of the temporary directory as ts first argument.",
                            "start": [
                                97,
                                67
                            ],
                            "type": "local",
                            "view": "fun(x: string):unknown"
                        }
                    ],
                    "desc": "Create and use a temporary directory inside the given directory.\nThe directory is deleted after the callback returns.\n\n\n@*param* `parent_dir` — Parent directory to create the directory in. If this parameter is omitted, the system's canonical temporary directory is used.\n\n@*param* `templ` — Directory name template\n\n@*param* `callback` — Function which takes the name of the temporary directory as ts first argument.\n\n@*return* — The result(s) of the call to `callback`",
                    "finish": [
                        97,
                        80
                    ],
                    "rawdesc": "Create and use a temporary directory inside the given directory.\nThe directory is deleted after the callback returns.\n",
                    "returns": [
                        {
                            "desc": "The result(s) of the call to `callback`",
                            "rawdesc": "The result(s) of the call to `callback`",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        97,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.with_temporary_directory(parent_dir: string, templ: string, callback: fun(x: string):unknown)\n  -> unknown"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    97,
                    47
                ],
                "name": "with_temporary_directory",
                "rawdesc": "Create and use a temporary directory inside the given directory.\nThe directory is deleted after the callback returns.\n",
                "start": [
                    97,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.with_temporary_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Run an action within a different directory. This function will\nchange the working directory to `directory`, execute `callback`,\nthen switch back to the original working directory, even if an\nerror occurs while running the callback action.\n\n\n@*param* `directory` — Directory in which the given `callback` should be executed\n\n@*param* `callback` — Action to execute in the given directory.\n\n@*return* — The result(s) of the call to `callback`",
                "extends": {
                    "args": [
                        {
                            "desc": "Directory in which the given `callback` should be executed",
                            "finish": [
                                108,
                                55
                            ],
                            "name": "directory",
                            "rawdesc": "Directory in which the given `callback` should be executed",
                            "start": [
                                108,
                                46
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Action to execute in the given directory.",
                            "finish": [
                                108,
                                65
                            ],
                            "name": "callback",
                            "rawdesc": "Action to execute in the given directory.",
                            "start": [
                                108,
                                57
                            ],
                            "type": "local",
                            "view": "fun():unknown"
                        }
                    ],
                    "desc": "Run an action within a different directory. This function will\nchange the working directory to `directory`, execute `callback`,\nthen switch back to the original working directory, even if an\nerror occurs while running the callback action.\n\n\n@*param* `directory` — Directory in which the given `callback` should be executed\n\n@*param* `callback` — Action to execute in the given directory.\n\n@*return* — The result(s) of the call to `callback`",
                    "finish": [
                        108,
                        70
                    ],
                    "rawdesc": "Run an action within a different directory. This function will\nchange the working directory to `directory`, execute `callback`,\nthen switch back to the original working directory, even if an\nerror occurs while running the callback action.\n",
                    "returns": [
                        {
                            "desc": "The result(s) of the call to `callback`",
                            "rawdesc": "The result(s) of the call to `callback`",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        108,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.system.with_working_directory(directory: string, callback: fun():unknown)\n  -> unknown"
                },
                "file": "pandoc/system.lua",
                "finish": [
                    108,
                    45
                ],
                "name": "with_working_directory",
                "rawdesc": "Run an action within a different directory. This function will\nchange the working directory to `directory`, execute `callback`,\nthen switch back to the original working directory, even if an\nerror occurs while running the callback action.\n",
                "start": [
                    108,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.system.with_working_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        20
                    ],
                    "start": [
                        3,
                        18
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    3,
                    15
                ],
                "name": "template",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.template",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Applies a context with variable assignments to a template,\nreturning the rendered template. The `context` parameter must be a\ntable with variable names as keys and [Doc], string, boolean, or\ntable as values, where the table can be either be a list of the\naforementioned types, or a nested context.\n\n\n@*param* `template` — Template to apply\n\n@*param* `context` — Variable values\n\n@*return* — Rendered template",
                "extends": {
                    "args": [
                        {
                            "desc": "Template to apply",
                            "finish": [
                                45,
                                39
                            ],
                            "name": "template",
                            "rawdesc": "Template to apply",
                            "start": [
                                45,
                                31
                            ],
                            "type": "local",
                            "view": "pandoc.Template"
                        },
                        {
                            "desc": "Variable values",
                            "finish": [
                                45,
                                48
                            ],
                            "name": "context",
                            "rawdesc": "Variable values",
                            "start": [
                                45,
                                41
                            ],
                            "type": "local",
                            "view": "table<string, any>"
                        }
                    ],
                    "desc": "Applies a context with variable assignments to a template,\nreturning the rendered template. The `context` parameter must be a\ntable with variable names as keys and [Doc], string, boolean, or\ntable as values, where the table can be either be a list of the\naforementioned types, or a nested context.\n\n\n@*param* `template` — Template to apply\n\n@*param* `context` — Variable values\n\n@*return* — Rendered template",
                    "finish": [
                        45,
                        53
                    ],
                    "rawdesc": "Applies a context with variable assignments to a template,\nreturning the rendered template. The `context` parameter must be a\ntable with variable names as keys and [Doc], string, boolean, or\ntable as values, where the table can be either be a list of the\naforementioned types, or a nested context.\n",
                    "returns": [
                        {
                            "desc": "Rendered template",
                            "rawdesc": "Rendered template",
                            "type": "function.return",
                            "view": "pandoc.Doc"
                        }
                    ],
                    "start": [
                        45,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.template.apply(template: pandoc.Template, context: table<string, any>)\n  -> pandoc.Doc"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    45,
                    30
                ],
                "name": "apply",
                "rawdesc": "Applies a context with variable assignments to a template,\nreturning the rendered template. The `context` parameter must be a\ntable with variable names as keys and [Doc], string, boolean, or\ntable as values, where the table can be either be a list of the\naforementioned types, or a nested context.\n",
                "start": [
                    45,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.template.apply",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Compiles a template string into a `Template` object usable by pandoc.\n\nIf the `templates_path` parameter is specified, should be the\nfile path associated with the template. It is used when checking\nfor partials. Partials will be taken only from the default data\nfiles if this parameter is omitted.\n\nAn error is raised if compilation fails.\n\n\n@*param* `template` — Template string\n\n@*param* `templates_path` — Parameter to determine a default path and extension for partials; uses the data files templates path by default\n\n@*return* — Compiled template",
                "extends": {
                    "args": [
                        {
                            "desc": "Template string",
                            "finish": [
                                24,
                                41
                            ],
                            "name": "template",
                            "rawdesc": "Template string",
                            "start": [
                                24,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Parameter to determine a default path and extension for partials; uses the data files templates path by default",
                            "finish": [
                                24,
                                57
                            ],
                            "name": "templates_path",
                            "rawdesc": "Parameter to determine a default path and extension for partials; uses the data files templates path by default",
                            "start": [
                                24,
                                43
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Compiles a template string into a `Template` object usable by pandoc.\n\nIf the `templates_path` parameter is specified, should be the\nfile path associated with the template. It is used when checking\nfor partials. Partials will be taken only from the default data\nfiles if this parameter is omitted.\n\nAn error is raised if compilation fails.\n\n\n@*param* `template` — Template string\n\n@*param* `templates_path` — Parameter to determine a default path and extension for partials; uses the data files templates path by default\n\n@*return* — Compiled template",
                    "finish": [
                        24,
                        62
                    ],
                    "rawdesc": "Compiles a template string into a `Template` object usable by pandoc.\n\nIf the `templates_path` parameter is specified, should be the\nfile path associated with the template. It is used when checking\nfor partials. Partials will be taken only from the default data\nfiles if this parameter is omitted.\n\nAn error is raised if compilation fails.\n",
                    "returns": [
                        {
                            "desc": "Compiled template",
                            "rawdesc": "Compiled template",
                            "type": "function.return",
                            "view": "pandoc.Template"
                        }
                    ],
                    "start": [
                        24,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.template.compile(template: string, templates_path?: string)\n  -> pandoc.Template"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    24,
                    32
                ],
                "name": "compile",
                "rawdesc": "Compiles a template string into a `Template` object usable by pandoc.\n\nIf the `templates_path` parameter is specified, should be the\nfile path associated with the template. It is used when checking\nfor partials. Partials will be taken only from the default data\nfiles if this parameter is omitted.\n\nAn error is raised if compilation fails.\n",
                "start": [
                    24,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.template.compile",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the default template for a given writer as a string. An\nerror if no such template can be found.\n\n\n@*param* `writer` — Name of the writer for which the template should be retrieved; defaults to the global `FORMAT`.\n\n@*return* — Raw template",
                "extends": {
                    "args": [
                        {
                            "desc": "Name of the writer for which the template should be retrieved; defaults to the global `FORMAT`.",
                            "finish": [
                                32,
                                39
                            ],
                            "name": "writer",
                            "rawdesc": "Name of the writer for which the template should be retrieved; defaults to the global `FORMAT`.",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Returns the default template for a given writer as a string. An\nerror if no such template can be found.\n\n\n@*param* `writer` — Name of the writer for which the template should be retrieved; defaults to the global `FORMAT`.\n\n@*return* — Raw template",
                    "finish": [
                        32,
                        44
                    ],
                    "rawdesc": "Returns the default template for a given writer as a string. An\nerror if no such template can be found.\n",
                    "returns": [
                        {
                            "desc": "Raw template",
                            "rawdesc": "Raw template",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.template.default(writer?: string)\n  -> string"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    32,
                    32
                ],
                "name": "default",
                "rawdesc": "Returns the default template for a given writer as a string. An\nerror if no such template can be found.\n",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.template.default",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Retrieve text for a template.\n\nThis function first checks the resource paths for a file of this\nname; if none is found, the `templates` directory in the user data\ndirectory is checked. Returns the content of the file, or throws\nan error if no file is found.\n\n\n@*param* `filename` — name of the template\n\n@*return* — content of the template",
                "extends": {
                    "args": [
                        {
                            "desc": "name of the template",
                            "finish": [
                                69,
                                37
                            ],
                            "name": "filename",
                            "rawdesc": "name of the template",
                            "start": [
                                69,
                                29
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Retrieve text for a template.\n\nThis function first checks the resource paths for a file of this\nname; if none is found, the `templates` directory in the user data\ndirectory is checked. Returns the content of the file, or throws\nan error if no file is found.\n\n\n@*param* `filename` — name of the template\n\n@*return* — content of the template",
                    "finish": [
                        69,
                        42
                    ],
                    "rawdesc": "Retrieve text for a template.\n\nThis function first checks the resource paths for a file of this\nname; if none is found, the `templates` directory in the user data\ndirectory is checked. Returns the content of the file, or throws\nan error if no file is found.\n",
                    "returns": [
                        {
                            "desc": "content of the template",
                            "rawdesc": "content of the template",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        69,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.template.get(filename: string)\n  -> string"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    69,
                    28
                ],
                "name": "get",
                "rawdesc": "Retrieve text for a template.\n\nThis function first checks the resource paths for a file of this\nname; if none is found, the `templates` directory in the user data\ndirectory is checked. Returns the content of the file, or throws\nan error if no file is found.\n",
                "start": [
                    69,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.template.get",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates template context from the document's [Meta]{#type-meta}\ndata, using the given functions to convert [Blocks] and [Inlines]\nto [Doc] values.\n\n\n@*param* `meta` — Document metadata\n\n@*param* `blocks_writer` — Converter from [Blocks] to [Doc] values\n\n@*param* `inlines_writer` — Converter from [Inlines] to [Doc] values\n\n@*return* — Template context",
                "extends": {
                    "args": [
                        {
                            "desc": "Document metadata",
                            "finish": [
                                57,
                                45
                            ],
                            "name": "meta",
                            "rawdesc": "Document metadata",
                            "start": [
                                57,
                                41
                            ],
                            "type": "local",
                            "view": "table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>"
                        },
                        {
                            "desc": "Converter from [Blocks] to [Doc] values",
                            "finish": [
                                57,
                                60
                            ],
                            "name": "blocks_writer",
                            "rawdesc": "Converter from [Blocks] to [Doc] values",
                            "start": [
                                57,
                                47
                            ],
                            "type": "local",
                            "view": "fun(blocks: pandoc.Blocks):pandoc.Doc"
                        },
                        {
                            "desc": "Converter from [Inlines] to [Doc] values",
                            "finish": [
                                57,
                                76
                            ],
                            "name": "inlines_writer",
                            "rawdesc": "Converter from [Inlines] to [Doc] values",
                            "start": [
                                57,
                                62
                            ],
                            "type": "local",
                            "view": "fun(inlines: pandoc.Inlines):pandoc.Doc"
                        }
                    ],
                    "desc": "Creates template context from the document's [Meta]{#type-meta}\ndata, using the given functions to convert [Blocks] and [Inlines]\nto [Doc] values.\n\n\n@*param* `meta` — Document metadata\n\n@*param* `blocks_writer` — Converter from [Blocks] to [Doc] values\n\n@*param* `inlines_writer` — Converter from [Inlines] to [Doc] values\n\n@*return* — Template context",
                    "finish": [
                        57,
                        81
                    ],
                    "rawdesc": "Creates template context from the document's [Meta]{#type-meta}\ndata, using the given functions to convert [Blocks] and [Inlines]\nto [Doc] values.\n",
                    "returns": [
                        {
                            "desc": "Template context",
                            "rawdesc": "Template context",
                            "type": "function.return",
                            "view": "table<string, any>"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.template.meta_to_context(meta: table<string, boolean|string|number|pandoc.List|table<number, pandoc.MetaValue>...(+1)>, blocks_writer: fun(blocks: pandoc.Blocks):pandoc.Doc, inlines_writer: fun(inlines: pandoc.Inlines):pandoc.Doc)\n  -> table<string, any>"
                },
                "file": "pandoc/template.lua",
                "finish": [
                    57,
                    40
                ],
                "name": "meta_to_context",
                "rawdesc": "Creates template context from the document's [Meta]{#type-meta}\ndata, using the given functions to convert [Blocks] and [Inlines]\nto [Doc] values.\n",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.template.meta_to_context",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "UTF-8 aware text manipulation functions, implemented in Haskell.\nThe module is made available as part of the `pandoc` module via\n`pandoc.text`. The text module can also be loaded explicitly:\n\n``` lua\n-- uppercase all regular text in a document:\ntext = require 'text'\nfunction Str (s)\n  s.text = text.upper(s.text)\n  return s\nend\n```\n",
                "extends": {
                    "finish": [
                        17,
                        16
                    ],
                    "start": [
                        17,
                        14
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    17,
                    11
                ],
                "name": "text",
                "rawdesc": "UTF-8 aware text manipulation functions, implemented in Haskell.\nThe module is made available as part of the `pandoc` module via\n`pandoc.text`. The text module can also be loaded explicitly:\n\n``` lua\n-- uppercase all regular text in a document:\ntext = require 'text'\nfunction Str (s)\n  s.text = text.upper(s.text)\n  return s\nend\n```\n",
                "start": [
                    17,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.text",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts a string to UTF-8. The `encoding` parameter specifies the\nencoding of the input string. On Windows, that parameter defaults\nto the current ANSI code page; on other platforms the function\nwill try to use the file system's encoding.\n\nSee `toencoding` for more info on supported\nencodings.\n\n\n@*param* `s` — string to convert\n\n@*param* `encoding` — Encoding of the input string",
                "extends": {
                    "args": [
                        {
                            "desc": "string to convert",
                            "finish": [
                                69,
                                35
                            ],
                            "name": "s",
                            "rawdesc": "string to convert",
                            "start": [
                                69,
                                34
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Encoding of the input string",
                            "finish": [
                                69,
                                45
                            ],
                            "name": "encoding",
                            "rawdesc": "Encoding of the input string",
                            "start": [
                                69,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Converts a string to UTF-8. The `encoding` parameter specifies the\nencoding of the input string. On Windows, that parameter defaults\nto the current ANSI code page; on other platforms the function\nwill try to use the file system's encoding.\n\nSee `toencoding` for more info on supported\nencodings.\n\n\n@*param* `s` — string to convert\n\n@*param* `encoding` — Encoding of the input string",
                    "finish": [
                        69,
                        50
                    ],
                    "rawdesc": "Converts a string to UTF-8. The `encoding` parameter specifies the\nencoding of the input string. On Windows, that parameter defaults\nto the current ANSI code page; on other platforms the function\nwill try to use the file system's encoding.\n\nSee `toencoding` for more info on supported\nencodings.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        69,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.fromencoding(s: string, encoding: string)\n  -> string"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    69,
                    33
                ],
                "name": "fromencoding",
                "rawdesc": "Converts a string to UTF-8. The `encoding` parameter specifies the\nencoding of the input string. On Windows, that parameter defaults\nto the current ANSI code page; on other platforms the function\nwill try to use the file system's encoding.\n\nSee `toencoding` for more info on supported\nencodings.\n",
                "start": [
                    69,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.fromencoding",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the length of a UTF-8 string\n\n\n@*param* `s` — String to calculate the length of",
                "extends": {
                    "args": [
                        {
                            "desc": "String to calculate the length of",
                            "finish": [
                                46,
                                26
                            ],
                            "name": "s",
                            "rawdesc": "String to calculate the length of",
                            "start": [
                                46,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns the length of a UTF-8 string\n\n\n@*param* `s` — String to calculate the length of",
                    "finish": [
                        46,
                        31
                    ],
                    "rawdesc": "Returns the length of a UTF-8 string\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        46,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.len(s: string)\n  -> integer"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    46,
                    24
                ],
                "name": "len",
                "rawdesc": "Returns the length of a UTF-8 string\n",
                "start": [
                    46,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.len",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of a UTF-8 string, converted to lowercase.\n\n\n@*param* `s` — String to transform",
                "extends": {
                    "args": [
                        {
                            "desc": "String to transform",
                            "finish": [
                                24,
                                28
                            ],
                            "name": "s",
                            "rawdesc": "String to transform",
                            "start": [
                                24,
                                27
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns a copy of a UTF-8 string, converted to lowercase.\n\n\n@*param* `s` — String to transform",
                    "finish": [
                        24,
                        33
                    ],
                    "rawdesc": "Returns a copy of a UTF-8 string, converted to lowercase.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        24,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.lower(s: string)\n  -> string"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    24,
                    26
                ],
                "name": "lower",
                "rawdesc": "Returns a copy of a UTF-8 string, converted to lowercase.\n",
                "start": [
                    24,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.lower",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of a UTF-8 string, with characters reversed.\n\n\n@*param* `s` — String to reverse",
                "extends": {
                    "args": [
                        {
                            "desc": "String to reverse",
                            "finish": [
                                39,
                                30
                            ],
                            "name": "s",
                            "rawdesc": "String to reverse",
                            "start": [
                                39,
                                29
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns a copy of a UTF-8 string, with characters reversed.\n\n\n@*param* `s` — String to reverse",
                    "finish": [
                        39,
                        35
                    ],
                    "rawdesc": "Returns a copy of a UTF-8 string, with characters reversed.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        39,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.reverse(s: string)\n  -> string"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    39,
                    28
                ],
                "name": "reverse",
                "rawdesc": "Returns a copy of a UTF-8 string, with characters reversed.\n",
                "start": [
                    39,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.reverse",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a substring of a UTF-8 string, using Lua's string indexing rules.\n\n\n@*param* `s` — Original string\n\n@*param* `first` — Index to begin at\n\n@*param* `last` — Index to end at (use negative index to count from the back)",
                "extends": {
                    "args": [
                        {
                            "desc": "Original string",
                            "finish": [
                                55,
                                26
                            ],
                            "name": "s",
                            "rawdesc": "Original string",
                            "start": [
                                55,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Index to begin at",
                            "finish": [
                                55,
                                33
                            ],
                            "name": "first",
                            "rawdesc": "Index to begin at",
                            "start": [
                                55,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Index to end at (use negative index to count from the back)",
                            "finish": [
                                55,
                                39
                            ],
                            "name": "last",
                            "rawdesc": "Index to end at (use negative index to count from the back)",
                            "start": [
                                55,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns a substring of a UTF-8 string, using Lua's string indexing rules.\n\n\n@*param* `s` — Original string\n\n@*param* `first` — Index to begin at\n\n@*param* `last` — Index to end at (use negative index to count from the back)",
                    "finish": [
                        55,
                        44
                    ],
                    "rawdesc": "Returns a substring of a UTF-8 string, using Lua's string indexing rules.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        55,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.sub(s: string, first: integer, last?: integer)\n  -> string"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    55,
                    24
                ],
                "name": "sub",
                "rawdesc": "Returns a substring of a UTF-8 string, using Lua's string indexing rules.\n",
                "start": [
                    55,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.sub",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts a UTF-8 string to a different encoding. The `encoding`\nparameter defaults to the current ANSI code page on Windows; on\nother platforms it will try to guess the file system's encoding.\n\nThe set of known encodings is system dependent, but includes at\nleast `UTF-8`, `UTF-16BE`, `UTF-16LE`, `UTF-32BE`, and `UTF-32LE`.\nNote that the default code page on Windows is available through\n`CP0`.  \n\n\n@*param* `s` — string to convert\n\n@*param* `encoding` — Encoding of the input string",
                "extends": {
                    "args": [
                        {
                            "desc": "string to convert",
                            "finish": [
                                84,
                                33
                            ],
                            "name": "s",
                            "rawdesc": "string to convert",
                            "start": [
                                84,
                                32
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Encoding of the input string",
                            "finish": [
                                84,
                                43
                            ],
                            "name": "encoding",
                            "rawdesc": "Encoding of the input string",
                            "start": [
                                84,
                                35
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Converts a UTF-8 string to a different encoding. The `encoding`\nparameter defaults to the current ANSI code page on Windows; on\nother platforms it will try to guess the file system's encoding.\n\nThe set of known encodings is system dependent, but includes at\nleast `UTF-8`, `UTF-16BE`, `UTF-16LE`, `UTF-32BE`, and `UTF-32LE`.\nNote that the default code page on Windows is available through\n`CP0`.  \n\n\n@*param* `s` — string to convert\n\n@*param* `encoding` — Encoding of the input string",
                    "finish": [
                        84,
                        48
                    ],
                    "rawdesc": "Converts a UTF-8 string to a different encoding. The `encoding`\nparameter defaults to the current ANSI code page on Windows; on\nother platforms it will try to guess the file system's encoding.\n\nThe set of known encodings is system dependent, but includes at\nleast `UTF-8`, `UTF-16BE`, `UTF-16LE`, `UTF-32BE`, and `UTF-32LE`.\nNote that the default code page on Windows is available through\n`CP0`.  \n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        84,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.toencoding(s: string, encoding: string)\n  -> string"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    84,
                    31
                ],
                "name": "toencoding",
                "rawdesc": "Converts a UTF-8 string to a different encoding. The `encoding`\nparameter defaults to the current ANSI code page on Windows; on\nother platforms it will try to guess the file system's encoding.\n\nThe set of known encodings is system dependent, but includes at\nleast `UTF-8`, `UTF-16BE`, `UTF-16LE`, `UTF-32BE`, and `UTF-32LE`.\nNote that the default code page on Windows is available through\n`CP0`.  \n",
                "start": [
                    84,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.toencoding",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a copy of a UTF-8 string, converted to uppercase.\n\n\n@*param* `s` — String to transform",
                "extends": {
                    "args": [
                        {
                            "desc": "String to transform",
                            "finish": [
                                32,
                                28
                            ],
                            "name": "s",
                            "rawdesc": "String to transform",
                            "start": [
                                32,
                                27
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns a copy of a UTF-8 string, converted to uppercase.\n\n\n@*param* `s` — String to transform",
                    "finish": [
                        32,
                        33
                    ],
                    "rawdesc": "Returns a copy of a UTF-8 string, converted to uppercase.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.text.upper(s: string)\n  -> string"
                },
                "file": "pandoc/text.lua",
                "finish": [
                    32,
                    26
                ],
                "name": "upper",
                "rawdesc": "Returns a copy of a UTF-8 string, converted to uppercase.\n",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.text.upper",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        17
                    ],
                    "start": [
                        3,
                        15
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/version.lua",
                "finish": [
                    3,
                    12
                ],
                "name": "types",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.types",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "args": [
                        {
                            "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                            "finish": [
                                26,
                                47
                            ],
                            "name": "version_specifier",
                            "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                            "start": [
                                26,
                                30
                            ],
                            "type": "local",
                            "view": "string|integer|integer[]|pandoc.Version"
                        }
                    ],
                    "finish": [
                        26,
                        52
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Version"
                        }
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.types.Version(version_specifier: string|integer|integer[]|pandoc.Version)\n  -> pandoc.Version"
                },
                "file": "pandoc/version.lua",
                "finish": [
                    26,
                    29
                ],
                "name": "Version",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.types.Version",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        17
                    ],
                    "start": [
                        3,
                        15
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    3,
                    12
                ],
                "name": "utils",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Squash a list of blocks into a list of inlines.\n\nUsage:\n\n    local blocks = {\n      pandoc.Para{ pandoc.Str 'Paragraph1' },\n      pandoc.Para{ pandoc.Emph 'Paragraph2' }\n    }\n    local inlines = pandoc.utils.blocks_to_inlines(blocks)\n    -- inlines = {\n    --   pandoc.Str 'Paragraph1',\n    --   pandoc.Space(), pandoc.Str'¶', pandoc.Space(),\n    --   pandoc.Emph{ pandoc.Str 'Paragraph2' }\n    -- }\n\n\n@*param* `blocks` — List of `Block` elements to be flattened.\n\n@*param* `sep` — List of `Inline` elements inserted as separator between two consecutive blocks; defaults to `{pandoc.LineBreak()}`.",
                "extends": {
                    "args": [
                        {
                            "desc": "List of `Block` elements to be flattened.",
                            "finish": [
                                24,
                                46
                            ],
                            "name": "blocks",
                            "rawdesc": "List of `Block` elements to be flattened.",
                            "start": [
                                24,
                                40
                            ],
                            "type": "local",
                            "view": "pandoc.List"
                        },
                        {
                            "desc": "List of `Inline` elements inserted as separator between two consecutive blocks; defaults to `{pandoc.LineBreak()}`.",
                            "finish": [
                                24,
                                51
                            ],
                            "name": "sep",
                            "rawdesc": "List of `Inline` elements inserted as separator between two consecutive blocks; defaults to `{pandoc.LineBreak()}`.",
                            "start": [
                                24,
                                48
                            ],
                            "type": "local",
                            "view": "(pandoc.Inlines)?"
                        }
                    ],
                    "desc": "Squash a list of blocks into a list of inlines.\n\nUsage:\n\n    local blocks = {\n      pandoc.Para{ pandoc.Str 'Paragraph1' },\n      pandoc.Para{ pandoc.Emph 'Paragraph2' }\n    }\n    local inlines = pandoc.utils.blocks_to_inlines(blocks)\n    -- inlines = {\n    --   pandoc.Str 'Paragraph1',\n    --   pandoc.Space(), pandoc.Str'¶', pandoc.Space(),\n    --   pandoc.Emph{ pandoc.Str 'Paragraph2' }\n    -- }\n\n\n@*param* `blocks` — List of `Block` elements to be flattened.\n\n@*param* `sep` — List of `Inline` elements inserted as separator between two consecutive blocks; defaults to `{pandoc.LineBreak()}`.",
                    "finish": [
                        24,
                        56
                    ],
                    "rawdesc": "Squash a list of blocks into a list of inlines.\n\nUsage:\n\n    local blocks = {\n      pandoc.Para{ pandoc.Str 'Paragraph1' },\n      pandoc.Para{ pandoc.Emph 'Paragraph2' }\n    }\n    local inlines = pandoc.utils.blocks_to_inlines(blocks)\n    -- inlines = {\n    --   pandoc.Str 'Paragraph1',\n    --   pandoc.Space(), pandoc.Str'¶', pandoc.Space(),\n    --   pandoc.Emph{ pandoc.Str 'Paragraph2' }\n    -- }\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "start": [
                        24,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.blocks_to_inlines(blocks: pandoc.List, sep?: pandoc.Inlines)\n  -> pandoc.Inlines"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    24,
                    39
                ],
                "name": "blocks_to_inlines",
                "rawdesc": "Squash a list of blocks into a list of inlines.\n\nUsage:\n\n    local blocks = {\n      pandoc.Para{ pandoc.Str 'Paragraph1' },\n      pandoc.Para{ pandoc.Emph 'Paragraph2' }\n    }\n    local inlines = pandoc.utils.blocks_to_inlines(blocks)\n    -- inlines = {\n    --   pandoc.Str 'Paragraph1',\n    --   pandoc.Space(), pandoc.Str'¶', pandoc.Space(),\n    --   pandoc.Emph{ pandoc.Str 'Paragraph2' }\n    -- }\n",
                "start": [
                    24,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.blocks_to_inlines",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Process the citations in the file, replacing them with rendered\ncitations and adding a bibliography. See the manual section on\ncitation rendering for details.\n\nUsage:\n\n    -- Lua filter that behaves like `--citeproc`\n    function Pandoc (doc)\n      return pandoc.utils.citeproc(doc)\n    end\n\n\n@*param* `doc` — Document to process\n\n@*return* — Processed document",
                "extends": {
                    "args": [
                        {
                            "desc": "Document to process",
                            "finish": [
                                40,
                                34
                            ],
                            "name": "doc",
                            "rawdesc": "Document to process",
                            "start": [
                                40,
                                31
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "desc": "Process the citations in the file, replacing them with rendered\ncitations and adding a bibliography. See the manual section on\ncitation rendering for details.\n\nUsage:\n\n    -- Lua filter that behaves like `--citeproc`\n    function Pandoc (doc)\n      return pandoc.utils.citeproc(doc)\n    end\n\n\n@*param* `doc` — Document to process\n\n@*return* — Processed document",
                    "finish": [
                        40,
                        39
                    ],
                    "rawdesc": "Process the citations in the file, replacing them with rendered\ncitations and adding a bibliography. See the manual section on\ncitation rendering for details.\n\nUsage:\n\n    -- Lua filter that behaves like `--citeproc`\n    function Pandoc (doc)\n      return pandoc.utils.citeproc(doc)\n    end\n",
                    "returns": [
                        {
                            "desc": "Processed document",
                            "rawdesc": "Processed document",
                            "type": "function.return",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "start": [
                        40,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.citeproc(doc: pandoc.Pandoc)\n  -> pandoc.Pandoc"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    40,
                    30
                ],
                "name": "citeproc",
                "rawdesc": "Process the citations in the file, replacing them with rendered\ncitations and adding a bibliography. See the manual section on\ncitation rendering for details.\n\nUsage:\n\n    -- Lua filter that behaves like `--citeproc`\n    function Pandoc (doc)\n      return pandoc.utils.citeproc(doc)\n    end\n",
                "start": [
                    40,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.citeproc",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Test equality of AST elements. Elements in Lua are considered\nequal if and only if the objects obtained by unmarshaling are\nequal.\n\n**This function is deprecated.** Use the normal Lua `==` equality\noperator instead.\n\n\n@*param* `element1` — Object to be compared\n\n@*param* `element2` — Object to be compared\n\n@*return* — Whether the two objects represent the same element",
                "extends": {
                    "args": [
                        {
                            "desc": "Object to be compared",
                            "finish": [
                                53,
                                37
                            ],
                            "name": "element1",
                            "rawdesc": "Object to be compared",
                            "start": [
                                53,
                                29
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "Object to be compared",
                            "finish": [
                                53,
                                47
                            ],
                            "name": "element2",
                            "rawdesc": "Object to be compared",
                            "start": [
                                53,
                                39
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Test equality of AST elements. Elements in Lua are considered\nequal if and only if the objects obtained by unmarshaling are\nequal.\n\n**This function is deprecated.** Use the normal Lua `==` equality\noperator instead.\n\n\n@*param* `element1` — Object to be compared\n\n@*param* `element2` — Object to be compared\n\n@*return* — Whether the two objects represent the same element",
                    "finish": [
                        53,
                        52
                    ],
                    "rawdesc": "Test equality of AST elements. Elements in Lua are considered\nequal if and only if the objects obtained by unmarshaling are\nequal.\n\n**This function is deprecated.** Use the normal Lua `==` equality\noperator instead.\n",
                    "returns": [
                        {
                            "desc": "Whether the two objects represent the same element",
                            "rawdesc": "Whether the two objects represent the same element",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        53,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.equals(element1: any, element2: any)\n  -> boolean"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    53,
                    28
                ],
                "name": "equals",
                "rawdesc": "Test equality of AST elements. Elements in Lua are considered\nequal if and only if the objects obtained by unmarshaling are\nequal.\n\n**This function is deprecated.** Use the normal Lua `==` equality\noperator instead.\n",
                "start": [
                    53,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.equals",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a `Table` block element from a `SimpleTable`. This is\nuseful for dealing with legacy code which was written for pandoc\nversions older than 2.10.\n\n-- Usage:\n\n    local simple = pandoc.SimpleTable(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                            "finish": [
                                70,
                                45
                            ],
                            "name": "table",
                            "rawdesc": "A simple table is a table structure which resembles the old (pre\npandoc 2.10) Table type. Bi-directional conversion from and to\nTables is possible with the `pandoc.utils.to_simple_table`\nand `pandoc.utils.from_simple_table` functions, respectively. \nInstances of this type can also be created directly with the \n`pandoc.SimpleTable`constructor.\n",
                            "start": [
                                70,
                                40
                            ],
                            "type": "local",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "desc": "Creates a `Table` block element from a `SimpleTable`. This is\nuseful for dealing with legacy code which was written for pandoc\nversions older than 2.10.\n\n-- Usage:\n\n    local simple = pandoc.SimpleTable(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n",
                    "finish": [
                        70,
                        50
                    ],
                    "rawdesc": "Creates a `Table` block element from a `SimpleTable`. This is\nuseful for dealing with legacy code which was written for pandoc\nversions older than 2.10.\n\n-- Usage:\n\n    local simple = pandoc.SimpleTable(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Table"
                        }
                    ],
                    "start": [
                        70,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.from_simple_table(table: pandoc.SimpleTable)\n  -> pandoc.Table"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    70,
                    39
                ],
                "name": "from_simple_table",
                "rawdesc": "Creates a `Table` block element from a `SimpleTable`. This is\nuseful for dealing with legacy code which was written for pandoc\nversions older than 2.10.\n\n-- Usage:\n\n    local simple = pandoc.SimpleTable(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n",
                "start": [
                    70,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.from_simple_table",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts list of `Block` elements into sections.\n`Div`s will be created beginning at each `Header`\nand containing following content until the next `Header`\nof comparable level.  If `number_sections` is true,\na `number` attribute will be added to each `Header`\ncontaining the section number. If `base_level` is\nnon-null, `Header` levels will be reorganized so\nthat there are no gaps, and so that the base level\nis the level specified.\n\n**Deprecated** Use `pandoc.structure.make_sections` instead.\n\n\n@*param* `number_sections` — Whether section divs should get an additional `number` attribute containing the section number.\n\n@*param* `base_level` — Shift top-level headings to this level.",
                "extends": {
                    "args": [
                        {
                            "desc": "Whether section divs should get an additional `number` attribute containing the section number.",
                            "finish": [
                                88,
                                51
                            ],
                            "name": "number_sections",
                            "rawdesc": "Whether section divs should get an additional `number` attribute containing the section number.",
                            "start": [
                                88,
                                36
                            ],
                            "type": "local",
                            "view": "boolean"
                        },
                        {
                            "desc": "Shift top-level headings to this level.",
                            "finish": [
                                88,
                                63
                            ],
                            "name": "base_level",
                            "rawdesc": "Shift top-level headings to this level.",
                            "start": [
                                88,
                                53
                            ],
                            "type": "local",
                            "view": "integer|nil"
                        },
                        {
                            "finish": [
                                88,
                                71
                            ],
                            "name": "blocks",
                            "start": [
                                88,
                                65
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Converts list of `Block` elements into sections.\n`Div`s will be created beginning at each `Header`\nand containing following content until the next `Header`\nof comparable level.  If `number_sections` is true,\na `number` attribute will be added to each `Header`\ncontaining the section number. If `base_level` is\nnon-null, `Header` levels will be reorganized so\nthat there are no gaps, and so that the base level\nis the level specified.\n\n**Deprecated** Use `pandoc.structure.make_sections` instead.\n\n\n@*param* `number_sections` — Whether section divs should get an additional `number` attribute containing the section number.\n\n@*param* `base_level` — Shift top-level headings to this level.",
                    "finish": [
                        88,
                        76
                    ],
                    "rawdesc": "Converts list of `Block` elements into sections.\n`Div`s will be created beginning at each `Header`\nand containing following content until the next `Header`\nof comparable level.  If `number_sections` is true,\na `number` attribute will be added to each `Header`\ncontaining the section number. If `base_level` is\nnon-null, `Header` levels will be reorganized so\nthat there are no gaps, and so that the base level\nis the level specified.\n\n**Deprecated** Use `pandoc.structure.make_sections` instead.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "start": [
                        88,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.make_sections(number_sections: boolean, base_level: integer|nil, blocks: any)\n  -> pandoc.Blocks"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    88,
                    35
                ],
                "name": "make_sections",
                "rawdesc": "Converts list of `Block` elements into sections.\n`Div`s will be created beginning at each `Header`\nand containing following content until the next `Header`\nof comparable level.  If `number_sections` is true,\na `number` attribute will be added to each `Header`\ncontaining the section number. If `base_level` is\nnon-null, `Header` levels will be reorganized so\nthat there are no gaps, and so that the base level\nis the level specified.\n\n**Deprecated** Use `pandoc.structure.make_sections` instead.\n",
                "start": [
                    88,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.make_sections",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Parse a date and convert (if possible) to \"YYYY-MM-DD\" format.\nWe limit years to the range 1601-9999 (ISO 8601 accepts greater\nthan or equal to 1583, but MS Word only accepts dates starting\n1601).\n\n\n@*param* `date_string` — Date to be normalized\n\n@*return* — A data string, nor `nil` when the converstion failed",
                "extends": {
                    "args": [
                        {
                            "desc": "Date to be normalized",
                            "finish": [
                                142,
                                48
                            ],
                            "name": "date_string",
                            "rawdesc": "Date to be normalized",
                            "start": [
                                142,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Parse a date and convert (if possible) to \"YYYY-MM-DD\" format.\nWe limit years to the range 1601-9999 (ISO 8601 accepts greater\nthan or equal to 1583, but MS Word only accepts dates starting\n1601).\n\n\n@*param* `date_string` — Date to be normalized\n\n@*return* — A data string, nor `nil` when the converstion failed",
                    "finish": [
                        142,
                        53
                    ],
                    "rawdesc": "Parse a date and convert (if possible) to \"YYYY-MM-DD\" format.\nWe limit years to the range 1601-9999 (ISO 8601 accepts greater\nthan or equal to 1583, but MS Word only accepts dates starting\n1601).\n",
                    "returns": [
                        {
                            "desc": "A data string, nor `nil` when the converstion failed",
                            "rawdesc": "A data string, nor `nil` when the converstion failed",
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        142,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.normalize_date(date_string: string)\n  -> string|nil"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    142,
                    36
                ],
                "name": "normalize_date",
                "rawdesc": "Parse a date and convert (if possible) to \"YYYY-MM-DD\" format.\nWe limit years to the range 1601-9999 (ISO 8601 accepts greater\nthan or equal to 1583, but MS Word only accepts dates starting\n1601).\n",
                "start": [
                    142,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.normalize_date",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get references defined inline in the metadata and via an external\nbibliography. Only references that are actually cited in the\ndocument (either with a genuine citation or with `nocite`) are\nreturned. URL variables are converted to links.\n\nThe structure used represent reference values corresponds to that\nused in CSL JSON; the return value can be use as `references`\nmetadata, which is one of the values used by pandoc and citeproc\nwhen generating bibliographies.\n\nUsage:\n\n    -- Include all cited references in document\n    function Pandoc (doc)\n      doc.meta.references = pandoc.utils.references(doc)\n      doc.meta.bibliography = nil\n      return doc\n    end\n\n\n@*param* `doc` — Document\n\n@*return* — List of references",
                "extends": {
                    "args": [
                        {
                            "desc": "Document",
                            "finish": [
                                112,
                                36
                            ],
                            "name": "doc",
                            "rawdesc": "Document",
                            "start": [
                                112,
                                33
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        }
                    ],
                    "desc": "Get references defined inline in the metadata and via an external\nbibliography. Only references that are actually cited in the\ndocument (either with a genuine citation or with `nocite`) are\nreturned. URL variables are converted to links.\n\nThe structure used represent reference values corresponds to that\nused in CSL JSON; the return value can be use as `references`\nmetadata, which is one of the values used by pandoc and citeproc\nwhen generating bibliographies.\n\nUsage:\n\n    -- Include all cited references in document\n    function Pandoc (doc)\n      doc.meta.references = pandoc.utils.references(doc)\n      doc.meta.bibliography = nil\n      return doc\n    end\n\n\n@*param* `doc` — Document\n\n@*return* — List of references",
                    "finish": [
                        112,
                        41
                    ],
                    "rawdesc": "Get references defined inline in the metadata and via an external\nbibliography. Only references that are actually cited in the\ndocument (either with a genuine citation or with `nocite`) are\nreturned. URL variables are converted to links.\n\nThe structure used represent reference values corresponds to that\nused in CSL JSON; the return value can be use as `references`\nmetadata, which is one of the values used by pandoc and citeproc\nwhen generating bibliographies.\n\nUsage:\n\n    -- Include all cited references in document\n    function Pandoc (doc)\n      doc.meta.references = pandoc.utils.references(doc)\n      doc.meta.bibliography = nil\n      return doc\n    end\n",
                    "returns": [
                        {
                            "desc": "List of references",
                            "rawdesc": "List of references",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.references(doc: pandoc.Pandoc)\n  -> table"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    112,
                    32
                ],
                "name": "references",
                "rawdesc": "Get references defined inline in the metadata and via an external\nbibliography. Only references that are actually cited in the\ndocument (either with a genuine citation or with `nocite`) are\nreturned. URL variables are converted to links.\n\nThe structure used represent reference values corresponds to that\nused in CSL JSON; the return value can be use as `references`\nmetadata, which is one of the values used by pandoc and citeproc\nwhen generating bibliographies.\n\nUsage:\n\n    -- Include all cited references in document\n    function Pandoc (doc)\n      doc.meta.references = pandoc.utils.references(doc)\n      doc.meta.bibliography = nil\n      return doc\n    end\n",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.references",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Filter the given doc by passing it through the a JSON filter.\n\nUsage:\n\n    -- Assumes `some_blocks` contains blocks for which a\n    -- separate literature section is required.\n    local sub_doc = pandoc.Pandoc(some_blocks, metadata)\n    sub_doc_with_bib = pandoc.utils.run_json_filter(\n      sub_doc,\n      'pandoc-citeproc'\n    )\n    some_blocks = sub_doc.blocks -- some blocks with bib\n\n\n@*param* `doc` — The document to filter\n\n@*param* `filter` — Path of filter to run\n\n@*param* `args` — List of arguments to pass to filter. Defaults to `{FORMAT}`",
                "extends": {
                    "args": [
                        {
                            "desc": "The document to filter",
                            "finish": [
                                132,
                                41
                            ],
                            "name": "doc",
                            "rawdesc": "The document to filter",
                            "start": [
                                132,
                                38
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "Path of filter to run",
                            "finish": [
                                132,
                                49
                            ],
                            "name": "filter",
                            "rawdesc": "Path of filter to run",
                            "start": [
                                132,
                                43
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "List of arguments to pass to filter. Defaults to `{FORMAT}`",
                            "finish": [
                                132,
                                55
                            ],
                            "name": "args",
                            "rawdesc": "List of arguments to pass to filter. Defaults to `{FORMAT}`",
                            "start": [
                                132,
                                51
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "Filter the given doc by passing it through the a JSON filter.\n\nUsage:\n\n    -- Assumes `some_blocks` contains blocks for which a\n    -- separate literature section is required.\n    local sub_doc = pandoc.Pandoc(some_blocks, metadata)\n    sub_doc_with_bib = pandoc.utils.run_json_filter(\n      sub_doc,\n      'pandoc-citeproc'\n    )\n    some_blocks = sub_doc.blocks -- some blocks with bib\n\n\n@*param* `doc` — The document to filter\n\n@*param* `filter` — Path of filter to run\n\n@*param* `args` — List of arguments to pass to filter. Defaults to `{FORMAT}`",
                    "finish": [
                        132,
                        60
                    ],
                    "rawdesc": "Filter the given doc by passing it through the a JSON filter.\n\nUsage:\n\n    -- Assumes `some_blocks` contains blocks for which a\n    -- separate literature section is required.\n    local sub_doc = pandoc.Pandoc(some_blocks, metadata)\n    sub_doc_with_bib = pandoc.utils.run_json_filter(\n      sub_doc,\n      'pandoc-citeproc'\n    )\n    some_blocks = sub_doc.blocks -- some blocks with bib\n",
                    "start": [
                        132,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.run_json_filter(doc: pandoc.Pandoc, filter: string, args?: table)"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    132,
                    37
                ],
                "name": "run_json_filter",
                "rawdesc": "Filter the given doc by passing it through the a JSON filter.\n\nUsage:\n\n    -- Assumes `some_blocks` contains blocks for which a\n    -- separate literature section is required.\n    local sub_doc = pandoc.Pandoc(some_blocks, metadata)\n    sub_doc_with_bib = pandoc.utils.run_json_filter(\n      sub_doc,\n      'pandoc-citeproc'\n    )\n    some_blocks = sub_doc.blocks -- some blocks with bib\n",
                "start": [
                    132,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.run_json_filter",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Filter the given doc by passing it through a Lua filter.\n\n\n@*param* `doc` — Document to filter\n\n@*param* `filter` — Filter to use",
                "extends": {
                    "args": [
                        {
                            "desc": "Document to filter",
                            "finish": [
                                222,
                                40
                            ],
                            "name": "doc",
                            "rawdesc": "Document to filter",
                            "start": [
                                222,
                                37
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "Filter to use",
                            "finish": [
                                222,
                                48
                            ],
                            "name": "filter",
                            "rawdesc": "Filter to use",
                            "start": [
                                222,
                                42
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Filter the given doc by passing it through a Lua filter.\n\n\n@*param* `doc` — Document to filter\n\n@*param* `filter` — Filter to use",
                    "finish": [
                        222,
                        53
                    ],
                    "rawdesc": "Filter the given doc by passing it through a Lua filter.\n",
                    "start": [
                        222,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.run_lua_filter(doc: pandoc.Pandoc, filter: table)"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    222,
                    36
                ],
                "name": "run_lua_filter",
                "rawdesc": "Filter the given doc by passing it through a Lua filter.\n",
                "start": [
                    222,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.run_lua_filter",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the SHA1 has of the contents.\n\nUsage:\n\n    local fp = pandoc.utils.sha1(\"foobar\")\n\n\n@*param* `contents` — Contents to be hashed\n\n@*return* — SHA1 hash of the contents",
                "extends": {
                    "args": [
                        {
                            "desc": "Contents to be hashed",
                            "finish": [
                                154,
                                35
                            ],
                            "name": "contents",
                            "rawdesc": "Contents to be hashed",
                            "start": [
                                154,
                                27
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns the SHA1 has of the contents.\n\nUsage:\n\n    local fp = pandoc.utils.sha1(\"foobar\")\n\n\n@*param* `contents` — Contents to be hashed\n\n@*return* — SHA1 hash of the contents",
                    "finish": [
                        154,
                        40
                    ],
                    "rawdesc": "Returns the SHA1 has of the contents.\n\nUsage:\n\n    local fp = pandoc.utils.sha1(\"foobar\")\n",
                    "returns": [
                        {
                            "desc": "SHA1 hash of the contents",
                            "rawdesc": "SHA1 hash of the contents",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        154,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.sha1(contents: string)\n  -> string"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    154,
                    26
                ],
                "name": "sha1",
                "rawdesc": "Returns the SHA1 has of the contents.\n\nUsage:\n\n    local fp = pandoc.utils.sha1(\"foobar\")\n",
                "start": [
                    154,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.sha1",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts the given element (Pandoc, Meta, Block, or Inline) into\na string with all formatting removed.\n\nUsage:\n\n    local inline = pandoc.Emph{pandoc.Str 'Moin'}\n    -- outputs \"Moin\"\n    print(pandoc.utils.stringify(inline))\n\n\n@*return* — A plain string representation of the given element",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                168,
                                39
                            ],
                            "name": "element",
                            "start": [
                                168,
                                32
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Converts the given element (Pandoc, Meta, Block, or Inline) into\na string with all formatting removed.\n\nUsage:\n\n    local inline = pandoc.Emph{pandoc.Str 'Moin'}\n    -- outputs \"Moin\"\n    print(pandoc.utils.stringify(inline))\n\n\n@*return* — A plain string representation of the given element",
                    "finish": [
                        168,
                        44
                    ],
                    "rawdesc": "Converts the given element (Pandoc, Meta, Block, or Inline) into\na string with all formatting removed.\n\nUsage:\n\n    local inline = pandoc.Emph{pandoc.Str 'Moin'}\n    -- outputs \"Moin\"\n    print(pandoc.utils.stringify(inline))\n",
                    "returns": [
                        {
                            "desc": "A plain string representation of the given element",
                            "rawdesc": "A plain string representation of the given element",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        168,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.stringify(element: any)\n  -> string"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    168,
                    31
                ],
                "name": "stringify",
                "rawdesc": "Converts the given element (Pandoc, Meta, Block, or Inline) into\na string with all formatting removed.\n\nUsage:\n\n    local inline = pandoc.Emph{pandoc.Str 'Moin'}\n    -- outputs \"Moin\"\n    print(pandoc.utils.stringify(inline))\n",
                "start": [
                    168,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.stringify",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts an integer < 4000 to uppercase roman numeral.\n\n\n@*param* `value` — Value to convert\n\n@*return* — A roman numeral string",
                "extends": {
                    "args": [
                        {
                            "desc": "Value to convert",
                            "finish": [
                                175,
                                44
                            ],
                            "name": "value",
                            "rawdesc": "Value to convert",
                            "start": [
                                175,
                                39
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Converts an integer < 4000 to uppercase roman numeral.\n\n\n@*param* `value` — Value to convert\n\n@*return* — A roman numeral string",
                    "finish": [
                        175,
                        49
                    ],
                    "rawdesc": "Converts an integer < 4000 to uppercase roman numeral.\n",
                    "returns": [
                        {
                            "desc": "A roman numeral string",
                            "rawdesc": "A roman numeral string",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        175,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.to_roman_numeral(value: integer)\n  -> string"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    175,
                    38
                ],
                "name": "to_roman_numeral",
                "rawdesc": "Converts an integer < 4000 to uppercase roman numeral.\n",
                "start": [
                    175,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.to_roman_numeral",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Creates a `SimpleTable` out of a `Table` block.\n\nUsage:\n\n    local simple = pandoc.utils.to_simple_table(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n\n\n@*param* `table` — Table to convert",
                "extends": {
                    "args": [
                        {
                            "desc": "Table to convert",
                            "finish": [
                                190,
                                43
                            ],
                            "name": "table",
                            "rawdesc": "Table to convert",
                            "start": [
                                190,
                                38
                            ],
                            "type": "local",
                            "view": "pandoc.Table"
                        }
                    ],
                    "desc": "Creates a `SimpleTable` out of a `Table` block.\n\nUsage:\n\n    local simple = pandoc.utils.to_simple_table(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n\n\n@*param* `table` — Table to convert",
                    "finish": [
                        190,
                        48
                    ],
                    "rawdesc": "Creates a `SimpleTable` out of a `Table` block.\n\nUsage:\n\n    local simple = pandoc.utils.to_simple_table(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.SimpleTable"
                        }
                    ],
                    "start": [
                        190,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.to_simple_table(table: pandoc.Table)\n  -> pandoc.SimpleTable"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    190,
                    37
                ],
                "name": "to_simple_table",
                "rawdesc": "Creates a `SimpleTable` out of a `Table` block.\n\nUsage:\n\n    local simple = pandoc.utils.to_simple_table(table)\n    -- modify, using pre pandoc 2.10 methods\n    simple.caption = pandoc.SmallCaps(simple.caption)\n    -- create normal table block again\n    table = pandoc.utils.from_simple_table(simple)\n",
                "start": [
                    190,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.to_simple_table",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pandoc-friendly version of Lua's default `type` function,\nreturning the type of a value. This function works with all types\nlisted in section [Lua type reference][], except if noted\notherwise.\n\nThe function works by checking the metafield `__name`. If the\nargument has a string-valued metafield `__name`, then it returns\nthat string. Otherwise it behaves just like the normal `type`\nfunction.\n\nUsage:\n\n    -- Prints one of 'string', 'boolean', 'Inlines', 'Blocks',\n    -- 'table', and 'nil', corresponding to the Haskell constructors\n    -- MetaString, MetaBool, MetaInlines, MetaBlocks, MetaMap,\n    -- and an unset value, respectively.\n    function Meta (meta)\n      print('type of metavalue `author`:', pandoc.utils.type(meta.author))\n    end\n\n\n@*param* `value` — Any Lua value\n\n@*return* — Type of the given value",
                "extends": {
                    "args": [
                        {
                            "desc": "Any Lua value",
                            "finish": [
                                215,
                                32
                            ],
                            "name": "value",
                            "rawdesc": "Any Lua value",
                            "start": [
                                215,
                                27
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Pandoc-friendly version of Lua's default `type` function,\nreturning the type of a value. This function works with all types\nlisted in section [Lua type reference][], except if noted\notherwise.\n\nThe function works by checking the metafield `__name`. If the\nargument has a string-valued metafield `__name`, then it returns\nthat string. Otherwise it behaves just like the normal `type`\nfunction.\n\nUsage:\n\n    -- Prints one of 'string', 'boolean', 'Inlines', 'Blocks',\n    -- 'table', and 'nil', corresponding to the Haskell constructors\n    -- MetaString, MetaBool, MetaInlines, MetaBlocks, MetaMap,\n    -- and an unset value, respectively.\n    function Meta (meta)\n      print('type of metavalue `author`:', pandoc.utils.type(meta.author))\n    end\n\n\n@*param* `value` — Any Lua value\n\n@*return* — Type of the given value",
                    "finish": [
                        215,
                        37
                    ],
                    "rawdesc": "Pandoc-friendly version of Lua's default `type` function,\nreturning the type of a value. This function works with all types\nlisted in section [Lua type reference][], except if noted\notherwise.\n\nThe function works by checking the metafield `__name`. If the\nargument has a string-valued metafield `__name`, then it returns\nthat string. Otherwise it behaves just like the normal `type`\nfunction.\n\nUsage:\n\n    -- Prints one of 'string', 'boolean', 'Inlines', 'Blocks',\n    -- 'table', and 'nil', corresponding to the Haskell constructors\n    -- MetaString, MetaBool, MetaInlines, MetaBlocks, MetaMap,\n    -- and an unset value, respectively.\n    function Meta (meta)\n      print('type of metavalue `author`:', pandoc.utils.type(meta.author))\n    end\n",
                    "returns": [
                        {
                            "desc": "Type of the given value",
                            "rawdesc": "Type of the given value",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        215,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.utils.type(value: any)\n  -> string"
                },
                "file": "pandoc/utils.lua",
                "finish": [
                    215,
                    26
                ],
                "name": "type",
                "rawdesc": "Pandoc-friendly version of Lua's default `type` function,\nreturning the type of a value. This function works with all types\nlisted in section [Lua type reference][], except if noted\notherwise.\n\nThe function works by checking the metafield `__name`. If the\nargument has a string-valued metafield `__name`, then it returns\nthat string. Otherwise it behaves just like the normal `type`\nfunction.\n\nUsage:\n\n    -- Prints one of 'string', 'boolean', 'Inlines', 'Blocks',\n    -- 'table', and 'nil', corresponding to the Haskell constructors\n    -- MetaString, MetaBool, MetaInlines, MetaBlocks, MetaMap,\n    -- and an unset value, respectively.\n    function Meta (meta)\n      print('type of metavalue `author`:', pandoc.utils.type(meta.author))\n    end\n",
                "start": [
                    215,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.utils.type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Apply a filter inside a block element, walking its contents.\nReturns a (deep) copy on which the filter has been applied:\nthe original element is left untouched.\n\n\n@*param* `element` — The block element\n\n@*param* `filter` — A Lua filter (table of functions) to be applied within the block element\n\n@*return* — The transformed block element",
                "extends": {
                    "args": [
                        {
                            "desc": "The block element",
                            "finish": [
                                74,
                                34
                            ],
                            "name": "element",
                            "rawdesc": "The block element",
                            "start": [
                                74,
                                27
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "desc": "A Lua filter (table of functions) to be applied within the block element",
                            "finish": [
                                74,
                                42
                            ],
                            "name": "filter",
                            "rawdesc": "A Lua filter (table of functions) to be applied within the block element",
                            "start": [
                                74,
                                36
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Apply a filter inside a block element, walking its contents.\nReturns a (deep) copy on which the filter has been applied:\nthe original element is left untouched.\n\n\n@*param* `element` — The block element\n\n@*param* `filter` — A Lua filter (table of functions) to be applied within the block element\n\n@*return* — The transformed block element",
                    "finish": [
                        74,
                        47
                    ],
                    "rawdesc": "Apply a filter inside a block element, walking its contents.\nReturns a (deep) copy on which the filter has been applied:\nthe original element is left untouched.\n",
                    "returns": [
                        {
                            "desc": "The transformed block element",
                            "rawdesc": "The transformed block element",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        74,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.walk_block(element: <T>, filter: table)\n  -> <T>"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    74,
                    26
                ],
                "name": "walk_block",
                "rawdesc": "Apply a filter inside a block element, walking its contents.\nReturns a (deep) copy on which the filter has been applied:\nthe original element is left untouched.\n",
                "start": [
                    74,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.walk_block",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "- Apply a filter inside an inline element, walking its contents.\n-- Returns a (deep) copy on which the filter has been applied:\n-- the original element is left untouched.\n\n\n@*param* `element` — The inline element\n\n@*param* `filter` — A Lua filter (table of functions) to be applied within the inline element\n\n@*return* — The transformed inline element",
                "extends": {
                    "args": [
                        {
                            "desc": "The inline element",
                            "finish": [
                                85,
                                35
                            ],
                            "name": "element",
                            "rawdesc": "The inline element",
                            "start": [
                                85,
                                28
                            ],
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "desc": "A Lua filter (table of functions) to be applied within the inline element",
                            "finish": [
                                85,
                                43
                            ],
                            "name": "filter",
                            "rawdesc": "A Lua filter (table of functions) to be applied within the inline element",
                            "start": [
                                85,
                                37
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "- Apply a filter inside an inline element, walking its contents.\n-- Returns a (deep) copy on which the filter has been applied:\n-- the original element is left untouched.\n\n\n@*param* `element` — The inline element\n\n@*param* `filter` — A Lua filter (table of functions) to be applied within the inline element\n\n@*return* — The transformed inline element",
                    "finish": [
                        85,
                        48
                    ],
                    "rawdesc": "- Apply a filter inside an inline element, walking its contents.\n-- Returns a (deep) copy on which the filter has been applied:\n-- the original element is left untouched.\n",
                    "returns": [
                        {
                            "desc": "The transformed inline element",
                            "rawdesc": "The transformed inline element",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": [
                        85,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.walk_inline(element: <T>, filter: table)\n  -> <T>"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    85,
                    27
                ],
                "name": "walk_inline",
                "rawdesc": "- Apply a filter inside an inline element, walking its contents.\n-- Returns a (deep) copy on which the filter has been applied:\n-- the original element is left untouched.\n",
                "start": [
                    85,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.walk_inline",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts a document to the given target format.\n\nUsage:\n\n    local doc = pandoc.Pandoc(\n      {pandoc.Para {pandoc.Strong 'Tea'}}\n    )\n    local html = pandoc.write(doc, 'html')\n    assert(html == \"<p><strong>Tea</strong></p>\")\n\n\n@*param* `doc` — Document to convert\n\n@*param* `format` — Format specification, defaults to `html`\n\n@*param* `writer_options` — Options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object.\n\n@*return* — Converted document",
                "extends": {
                    "args": [
                        {
                            "desc": "Document to convert",
                            "finish": [
                                136,
                                25
                            ],
                            "name": "doc",
                            "rawdesc": "Document to convert",
                            "start": [
                                136,
                                22
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "Format specification, defaults to `html`",
                            "finish": [
                                136,
                                33
                            ],
                            "name": "format",
                            "rawdesc": "Format specification, defaults to `html`",
                            "start": [
                                136,
                                27
                            ],
                            "type": "local",
                            "view": "(string|string[]|{ format: string, extensions: string[]|table<string, boolean|\"disable\"|\"enable\"> })?"
                        },
                        {
                            "desc": "Options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object.",
                            "finish": [
                                136,
                                49
                            ],
                            "name": "writer_options",
                            "rawdesc": "Options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object.",
                            "start": [
                                136,
                                35
                            ],
                            "type": "local",
                            "view": "(pandoc.WriterOptions|table<string, any>)?"
                        }
                    ],
                    "desc": "Converts a document to the given target format.\n\nUsage:\n\n    local doc = pandoc.Pandoc(\n      {pandoc.Para {pandoc.Strong 'Tea'}}\n    )\n    local html = pandoc.write(doc, 'html')\n    assert(html == \"<p><strong>Tea</strong></p>\")\n\n\n@*param* `doc` — Document to convert\n\n@*param* `format` — Format specification, defaults to `html`\n\n@*param* `writer_options` — Options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object.\n\n@*return* — Converted document",
                    "finish": [
                        136,
                        54
                    ],
                    "rawdesc": "Converts a document to the given target format.\n\nUsage:\n\n    local doc = pandoc.Pandoc(\n      {pandoc.Para {pandoc.Strong 'Tea'}}\n    )\n    local html = pandoc.write(doc, 'html')\n    assert(html == \"<p><strong>Tea</strong></p>\")\n",
                    "returns": [
                        {
                            "desc": "Converted document",
                            "rawdesc": "Converted document",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        136,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.write(doc: pandoc.Pandoc, format?: string|string[]|{ format: string, extensions: string[]|table<string, boolean|\"disable\"|\"enable\"> }, writer_options?: pandoc.WriterOptions|table<string, any>)\n  -> string"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    136,
                    21
                ],
                "name": "write",
                "rawdesc": "Converts a document to the given target format.\n\nUsage:\n\n    local doc = pandoc.Pandoc(\n      {pandoc.Para {pandoc.Strong 'Tea'}}\n    )\n    local html = pandoc.write(doc, 'html')\n    assert(html == \"<p><strong>Tea</strong></p>\")\n",
                "start": [
                    136,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.write",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Runs a classic custom Lua writer, using the functions defined\nin the current environment.\n\nUsage:\n\n    -- Adding this function converts a classic writer into a\n    -- new-style custom writer.\n    function Writer (doc, opts)\n      PANDOC_DOCUMENT = doc\n      PANDOC_WRITER_OPTIONS = opts\n      loadfile(PANDOC_SCRIPT_FILE)()\n      return pandoc.write_classic(doc, opts)\n    end\n\n\n@*param* `doc` — document to convert\n\n@*param* `writer_options` — options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object; defaults to the default values documented in the manual.\n\n@*return* — converted document",
                "extends": {
                    "args": [
                        {
                            "desc": "document to convert",
                            "finish": [
                                156,
                                33
                            ],
                            "name": "doc",
                            "rawdesc": "document to convert",
                            "start": [
                                156,
                                30
                            ],
                            "type": "local",
                            "view": "pandoc.Pandoc"
                        },
                        {
                            "desc": "options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object; defaults to the default values documented in the manual.",
                            "finish": [
                                156,
                                49
                            ],
                            "name": "writer_options",
                            "rawdesc": "options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object; defaults to the default values documented in the manual.",
                            "start": [
                                156,
                                35
                            ],
                            "type": "local",
                            "view": "(pandoc.WriterOptions|table<string, any>)?"
                        }
                    ],
                    "desc": "Runs a classic custom Lua writer, using the functions defined\nin the current environment.\n\nUsage:\n\n    -- Adding this function converts a classic writer into a\n    -- new-style custom writer.\n    function Writer (doc, opts)\n      PANDOC_DOCUMENT = doc\n      PANDOC_WRITER_OPTIONS = opts\n      loadfile(PANDOC_SCRIPT_FILE)()\n      return pandoc.write_classic(doc, opts)\n    end\n\n\n@*param* `doc` — document to convert\n\n@*param* `writer_options` — options passed to the writer; may be a WriterOptions object or a table with a subset of the keys and values of a WriterOptions object; defaults to the default values documented in the manual.\n\n@*return* — converted document",
                    "finish": [
                        156,
                        54
                    ],
                    "rawdesc": "Runs a classic custom Lua writer, using the functions defined\nin the current environment.\n\nUsage:\n\n    -- Adding this function converts a classic writer into a\n    -- new-style custom writer.\n    function Writer (doc, opts)\n      PANDOC_DOCUMENT = doc\n      PANDOC_WRITER_OPTIONS = opts\n      loadfile(PANDOC_SCRIPT_FILE)()\n      return pandoc.write_classic(doc, opts)\n    end\n",
                    "returns": [
                        {
                            "desc": "converted document",
                            "rawdesc": "converted document",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        156,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.write_classic(doc: pandoc.Pandoc, writer_options?: pandoc.WriterOptions|table<string, any>)\n  -> string"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    156,
                    29
                ],
                "name": "write_classic",
                "rawdesc": "Runs a classic custom Lua writer, using the functions defined\nin the current environment.\n\nUsage:\n\n    -- Adding this function converts a classic writer into a\n    -- new-style custom writer.\n    function Writer (doc, opts)\n      PANDOC_DOCUMENT = doc\n      PANDOC_WRITER_OPTIONS = opts\n      loadfile(PANDOC_SCRIPT_FILE)()\n      return pandoc.write_classic(doc, opts)\n    end\n",
                "start": [
                    156,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.write_classic",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        9,
                        19
                    ],
                    "start": [
                        9,
                        17
                    ],
                    "type": "table",
                    "view": "{ [string]: boolean }"
                },
                "file": "pandoc/pandoc.lua",
                "finish": [
                    9,
                    14
                ],
                "name": "writers",
                "start": [
                    9,
                    0
                ],
                "type": "setfield",
                "view": "table<string, boolean>",
                "visible": "public"
            }
        ],
        "name": "pandoc.writers",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        15
                    ],
                    "start": [
                        3,
                        13
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    3,
                    10
                ],
                "name": "zip",
                "start": [
                    3,
                    0
                ],
                "type": "setfield",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "pandoc/zip.lua",
                "finish": [
                    32,
                    28
                ],
                "start": [
                    32,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.zip.Archive",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "files in this zip archive",
                "extends": {
                    "finish": [
                        33,
                        36
                    ],
                    "start": [
                        33,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                33,
                                36
                            ],
                            "start": [
                                33,
                                18
                            ],
                            "type": "doc.type.array",
                            "view": "pandoc.zip.Entry[]"
                        }
                    ],
                    "view": "pandoc.zip.Entry[]"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    33,
                    36
                ],
                "name": "entries",
                "rawdesc": "files in this zip archive",
                "start": [
                    33,
                    10
                ],
                "type": "doc.field",
                "view": "pandoc.zip.Entry[]",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Archive",
        "type": "type",
        "view": "pandoc.zip.Archive"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Reads an *Archive* structure from a raw zip archive or a list of\nEntry items; throws an error if the given string cannot be decoded\ninto an archive.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                12,
                                49
                            ],
                            "name": "bytestring_or_entries",
                            "start": [
                                12,
                                28
                            ],
                            "type": "local",
                            "view": "string|pandoc.zip.Entry[]"
                        }
                    ],
                    "desc": "Reads an *Archive* structure from a raw zip archive or a list of\nEntry items; throws an error if the given string cannot be decoded\ninto an archive.\n",
                    "finish": [
                        12,
                        54
                    ],
                    "rawdesc": "Reads an *Archive* structure from a raw zip archive or a list of\nEntry items; throws an error if the given string cannot be decoded\ninto an archive.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.zip.Archive"
                        }
                    ],
                    "start": [
                        12,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.zip.Archive(bytestring_or_entries: string|pandoc.zip.Entry[])\n  -> pandoc.zip.Archive"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    12,
                    27
                ],
                "name": "Archive",
                "rawdesc": "Reads an *Archive* structure from a raw zip archive or a list of\nEntry items; throws an error if the given string cannot be decoded\ninto an archive.\n",
                "start": [
                    12,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Archive",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the raw binary string representation of the archive.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                50,
                                8
                            ],
                            "name": "self",
                            "start": [
                                50,
                                8
                            ],
                            "type": "self",
                            "view": "unknown"
                        }
                    ],
                    "desc": "Returns the raw binary string representation of the archive.\n",
                    "finish": [
                        50,
                        44
                    ],
                    "rawdesc": "Returns the raw binary string representation of the archive.\n",
                    "start": [
                        50,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.zip.Archive:bytestring()"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    50,
                    38
                ],
                "name": "bytestring",
                "rawdesc": "Returns the raw binary string representation of the archive.\n",
                "start": [
                    50,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Archive.bytestring",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Extract all files from this archive, creating directories as\nneeded. Note that the last-modified time is set correctly only\nin POSIX, not in Windows. This function fails if encrypted\nentries are present.\n\nUse `archive:extract{destination = 'dir'}` to extract to\nsubdirectory `dir`.\n\n\n@*param* `options` — zip options",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                45,
                                8
                            ],
                            "name": "self",
                            "start": [
                                45,
                                8
                            ],
                            "type": "self",
                            "view": "unknown"
                        },
                        {
                            "desc": "zip options",
                            "finish": [
                                45,
                                43
                            ],
                            "name": "options",
                            "rawdesc": "zip options",
                            "start": [
                                45,
                                36
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "Extract all files from this archive, creating directories as\nneeded. Note that the last-modified time is set correctly only\nin POSIX, not in Windows. This function fails if encrypted\nentries are present.\n\nUse `archive:extract{destination = 'dir'}` to extract to\nsubdirectory `dir`.\n\n\n@*param* `options` — zip options",
                    "finish": [
                        45,
                        48
                    ],
                    "rawdesc": "Extract all files from this archive, creating directories as\nneeded. Note that the last-modified time is set correctly only\nin POSIX, not in Windows. This function fails if encrypted\nentries are present.\n\nUse `archive:extract{destination = 'dir'}` to extract to\nsubdirectory `dir`.\n",
                    "start": [
                        45,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.zip.Archive:extract(options?: table)"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    45,
                    35
                ],
                "name": "extract",
                "rawdesc": "Extract all files from this archive, creating directories as\nneeded. Note that the last-modified time is set correctly only\nin POSIX, not in Windows. This function fails if encrypted\nentries are present.\n\nUse `archive:extract{destination = 'dir'}` to extract to\nsubdirectory `dir`.\n",
                "start": [
                    45,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Archive.extract",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Generates a zip Entry from a filepath, the file's uncompressed\ncontent, and the file's modification time.\n\n\n@*param* `path` — file path in archive\n\n@*param* `contents` — uncompressed contents\n\n@*param* `modtime` — modification time",
                "extends": {
                    "args": [
                        {
                            "desc": "file path in archive",
                            "finish": [
                                22,
                                30
                            ],
                            "name": "path",
                            "rawdesc": "file path in archive",
                            "start": [
                                22,
                                26
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "uncompressed contents",
                            "finish": [
                                22,
                                40
                            ],
                            "name": "contents",
                            "rawdesc": "uncompressed contents",
                            "start": [
                                22,
                                32
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "modification time",
                            "finish": [
                                22,
                                49
                            ],
                            "name": "modtime",
                            "rawdesc": "modification time",
                            "start": [
                                22,
                                42
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Generates a zip Entry from a filepath, the file's uncompressed\ncontent, and the file's modification time.\n\n\n@*param* `path` — file path in archive\n\n@*param* `contents` — uncompressed contents\n\n@*param* `modtime` — modification time",
                    "finish": [
                        22,
                        54
                    ],
                    "rawdesc": "Generates a zip Entry from a filepath, the file's uncompressed\ncontent, and the file's modification time.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.zip.Entry"
                        }
                    ],
                    "start": [
                        22,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.zip.Entry(path: string, contents: string, modtime?: integer)\n  -> pandoc.zip.Entry"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    22,
                    25
                ],
                "name": "Entry",
                "rawdesc": "Generates a zip Entry from a filepath, the file's uncompressed\ncontent, and the file's modification time.\n",
                "start": [
                    22,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Entry",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "pandoc/zip.lua",
                "finish": [
                    52,
                    26
                ],
                "start": [
                    52,
                    10
                ],
                "type": "doc.class",
                "view": "pandoc.zip.Entry",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "modification time (seconds since unix epoch)",
                "extends": {
                    "finish": [
                        54,
                        24
                    ],
                    "start": [
                        54,
                        18
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                54,
                                24
                            ],
                            "start": [
                                54,
                                18
                            ],
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    54,
                    24
                ],
                "name": "modtime",
                "rawdesc": "modification time (seconds since unix epoch)",
                "start": [
                    54,
                    10
                ],
                "type": "doc.field",
                "view": "number",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "relative path, using `/` as separator",
                "extends": {
                    "finish": [
                        53,
                        21
                    ],
                    "start": [
                        53,
                        15
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                53,
                                21
                            ],
                            "start": [
                                53,
                                15
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    53,
                    21
                ],
                "name": "path",
                "rawdesc": "relative path, using `/` as separator",
                "start": [
                    53,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Entry",
        "type": "type",
        "view": "pandoc.zip.Entry"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get the uncompressed contents of a zip entry. If `password` is\ngiven, then that password is used to decrypt the contents. An\nerror is throws if decrypting fails.\n\n\n@*param* `password` — password to decrypt the contents",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                8
                            ],
                            "name": "self",
                            "start": [
                                63,
                                8
                            ],
                            "type": "self",
                            "view": "unknown"
                        },
                        {
                            "desc": "password to decrypt the contents",
                            "finish": [
                                63,
                                43
                            ],
                            "name": "password",
                            "rawdesc": "password to decrypt the contents",
                            "start": [
                                63,
                                35
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Get the uncompressed contents of a zip entry. If `password` is\ngiven, then that password is used to decrypt the contents. An\nerror is throws if decrypting fails.\n\n\n@*param* `password` — password to decrypt the contents",
                    "finish": [
                        63,
                        48
                    ],
                    "rawdesc": "Get the uncompressed contents of a zip entry. If `password` is\ngiven, then that password is used to decrypt the contents. An\nerror is throws if decrypting fails.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "(method) pandoc.zip.Entry:contents(password?: string)\n  -> string"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    63,
                    34
                ],
                "name": "contents",
                "rawdesc": "Get the uncompressed contents of a zip entry. If `password` is\ngiven, then that password is used to decrypt the contents. An\nerror is throws if decrypting fails.\n",
                "start": [
                    63,
                    9
                ],
                "type": "setmethod",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.Entry.contents",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Package and compress the given files into a new Archive.\n\n\n@*param* `filepaths` — list of files from which the archive is created.\n\n@*param* `options` — zip options",
                "extends": {
                    "args": [
                        {
                            "desc": "list of files from which the archive is created.",
                            "finish": [
                                30,
                                33
                            ],
                            "name": "filepaths",
                            "rawdesc": "list of files from which the archive is created.",
                            "start": [
                                30,
                                24
                            ],
                            "type": "local",
                            "view": "string[]"
                        },
                        {
                            "desc": "zip options",
                            "finish": [
                                30,
                                42
                            ],
                            "name": "options",
                            "rawdesc": "zip options",
                            "start": [
                                30,
                                35
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "Package and compress the given files into a new Archive.\n\n\n@*param* `filepaths` — list of files from which the archive is created.\n\n@*param* `options` — zip options",
                    "finish": [
                        30,
                        47
                    ],
                    "rawdesc": "Package and compress the given files into a new Archive.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.zip.Archive"
                        }
                    ],
                    "start": [
                        30,
                        0
                    ],
                    "type": "function",
                    "view": "function pandoc.zip.zip(filepaths: string[], options?: table)\n  -> pandoc.zip.Archive"
                },
                "file": "pandoc/zip.lua",
                "finish": [
                    30,
                    23
                ],
                "name": "zip",
                "rawdesc": "Package and compress the given files into a new Archive.\n",
                "start": [
                    30,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pandoc.zip.zip",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                224,
                                16
                            ],
                            "name": "f",
                            "start": [
                                224,
                                15
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                224,
                                22
                            ],
                            "name": "arg1",
                            "start": [
                                224,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                224,
                                27
                            ],
                            "start": [
                                224,
                                24
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "finish": [
                        224,
                        32
                    ],
                    "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        224,
                        0
                    ],
                    "type": "function",
                    "view": "function pcall(f: fun(...any):...unknown, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    224,
                    14
                ],
                "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                "start": [
                    224,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "pcall",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\npopenmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "finish": [
                    108,
                    8
                ],
                "rawdesc": "```lua\npopenmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                "start": [
                    106,
                    10
                ],
                "type": "doc.alias",
                "view": "\"r\"|\"w\""
            }
        ],
        "fields": [],
        "name": "popenmode",
        "type": "type",
        "view": "popenmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                234,
                                18
                            ],
                            "start": [
                                234,
                                15
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "finish": [
                        234,
                        23
                    ],
                    "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "start": [
                        234,
                        0
                    ],
                    "type": "function",
                    "view": "function print(...any)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    234,
                    14
                ],
                "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                "start": [
                    234,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "print",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        11
                    ],
                    "start": [
                        2,
                        9
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/callout.lua",
                "finish": [
                    2,
                    6
                ],
                "start": [
                    2,
                    0
                ],
                "type": "setglobal",
                "view": "table",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        3,
                        11
                    ],
                    "start": [
                        3,
                        9
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/quarto.lua",
                "finish": [
                    3,
                    6
                ],
                "start": [
                    3,
                    0
                ],
                "type": "setglobal",
                "view": "unknown",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        11
                    ],
                    "start": [
                        2,
                        9
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/tabset.lua",
                "finish": [
                    2,
                    6
                ],
                "start": [
                    2,
                    0
                ],
                "type": "setglobal",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a Callout AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n\n\n\n@*param* `tbl` — parameters",
                "extends": {
                    "args": [
                        {
                            "desc": "parameters",
                            "finish": [
                                10,
                                27
                            ],
                            "name": "tbl",
                            "rawdesc": "parameters",
                            "start": [
                                10,
                                24
                            ],
                            "type": "local",
                            "view": "{ appearance: 'minimal'|'simple'|nil, title: string|pandoc.Inlines|nil, collapse: boolean|nil, content: string|pandoc.Blocks|nil, icon: boolean|nil, type: 'caution'|'important'|'none'|'note'|'tip'...(+2) }"
                        }
                    ],
                    "desc": "Create a Callout AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n\n\n\n@*param* `tbl` — parameters",
                    "finish": [
                        10,
                        32
                    ],
                    "rawdesc": "Create a Callout AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawInline"
                        },
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.Callout(tbl: { appearance: 'minimal'|'simple'|nil, title: string|pandoc.Inlines|nil, collapse: boolean|nil, content: string|pandoc.Blocks|nil, icon: boolean|nil, type: 'caution'|'important'|'none'|'note'|'tip'...(+2) })\n  -> pandoc.RawInline\n  2. table"
                },
                "file": "quarto/callout.lua",
                "finish": [
                    10,
                    23
                ],
                "name": "Callout",
                "rawdesc": "Create a Callout AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n\n",
                "start": [
                    10,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.Callout",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a Tabset AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                10,
                                29
                            ],
                            "name": "params",
                            "start": [
                                10,
                                23
                            ],
                            "type": "local",
                            "view": "{ level: number|nil, tabs: quarto.Tab[]|nil, attr: pandoc.Attr|nil }"
                        }
                    ],
                    "desc": "Create a Tabset AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n",
                    "finish": [
                        10,
                        34
                    ],
                    "rawdesc": "Create a Tabset AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.RawInline"
                        },
                        {
                            "type": "function.return",
                            "view": "{ level: number, tabs: quarto.Tab[], attr: pandoc.Attr }"
                        }
                    ],
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.Tabset(params: { level: number|nil, tabs: quarto.Tab[]|nil, attr: pandoc.Attr|nil })\n  -> pandoc.RawInline\n  2. { level: number, tabs: quarto.Tab[], attr: pandoc.Attr }"
                },
                "file": "quarto/tabset.lua",
                "finish": [
                    10,
                    22
                ],
                "name": "Tabset",
                "rawdesc": "Create a Tabset AST node, represented as an \"opaque pointer\" in a RawInline. Also returns the resolved table object\n",
                "start": [
                    10,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.Tabset",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "finish": [
                    4,
                    80
                ],
                "start": [
                    4,
                    10
                ],
                "type": "doc.alias",
                "view": "{ level: number, tabs: quarto.Tab[], attr: pandoc.Attr }"
            }
        ],
        "fields": [],
        "name": "quarto.Tabset",
        "type": "type",
        "view": "quarto.Tabset"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        18
                    ],
                    "start": [
                        2,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/base64.lua",
                "finish": [
                    2,
                    13
                ],
                "name": "base64",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.base64",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Decode `b64str` into a string\n\n\n@*param* `b64str` — Base64 encoded string",
                "extends": {
                    "args": [
                        {
                            "desc": "Base64 encoded string",
                            "finish": [
                                16,
                                36
                            ],
                            "name": "b64str",
                            "rawdesc": "Base64 encoded string",
                            "start": [
                                16,
                                30
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Decode `b64str` into a string\n\n\n@*param* `b64str` — Base64 encoded string",
                    "finish": [
                        16,
                        41
                    ],
                    "rawdesc": "Decode `b64str` into a string\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        16,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.base64.decode(b64str: string)\n  -> string"
                },
                "file": "quarto/base64.lua",
                "finish": [
                    16,
                    29
                ],
                "name": "decode",
                "rawdesc": "Decode `b64str` into a string\n",
                "start": [
                    16,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.base64.decode",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Encode `str` into a base64 representation\n\n\n@*param* `str` — String to encode",
                "extends": {
                    "args": [
                        {
                            "desc": "String to encode",
                            "finish": [
                                9,
                                33
                            ],
                            "name": "str",
                            "rawdesc": "String to encode",
                            "start": [
                                9,
                                30
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Encode `str` into a base64 representation\n\n\n@*param* `str` — String to encode",
                    "finish": [
                        9,
                        38
                    ],
                    "rawdesc": "Encode `str` into a base64 representation\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.base64.encode(str: string)\n  -> string"
                },
                "file": "quarto/base64.lua",
                "finish": [
                    9,
                    29
                ],
                "name": "encode",
                "rawdesc": "Encode `str` into a base64 representation\n",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.base64.encode",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        17
                    ],
                    "start": [
                        2,
                        15
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/brand.lua",
                "finish": [
                    2,
                    12
                ],
                "name": "brand",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.brand",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get a brand color in the output format, for the brand of the specified `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — Brand color name",
                "extends": {
                    "args": [
                        {
                            "desc": "Mode string, `light` or `dark`",
                            "finish": [
                                25,
                                36
                            ],
                            "name": "mode",
                            "rawdesc": "Mode string, `light` or `dark`",
                            "start": [
                                25,
                                32
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Brand color name",
                            "finish": [
                                25,
                                42
                            ],
                            "name": "name",
                            "rawdesc": "Brand color name",
                            "start": [
                                25,
                                38
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Get a brand color in the output format, for the brand of the specified `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — Brand color name",
                    "finish": [
                        25,
                        47
                    ],
                    "rawdesc": "Get a brand color in the output format, for the brand of the specified `mode`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        25,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.brand.get_color(mode: string, name: string)\n  -> string"
                },
                "file": "quarto/brand.lua",
                "finish": [
                    25,
                    31
                ],
                "name": "get_color",
                "rawdesc": "Get a brand color in the output format, for the brand of the specified `mode`.\n",
                "start": [
                    25,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.brand.get_color",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get a brand color in CSS format, for the brand of the specified `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — Brand color name",
                "extends": {
                    "args": [
                        {
                            "desc": "Mode string, `light` or `dark`",
                            "finish": [
                                17,
                                40
                            ],
                            "name": "mode",
                            "rawdesc": "Mode string, `light` or `dark`",
                            "start": [
                                17,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Brand color name",
                            "finish": [
                                17,
                                46
                            ],
                            "name": "name",
                            "rawdesc": "Brand color name",
                            "start": [
                                17,
                                42
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Get a brand color in CSS format, for the brand of the specified `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — Brand color name",
                    "finish": [
                        17,
                        51
                    ],
                    "rawdesc": "Get a brand color in CSS format, for the brand of the specified `mode`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        17,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.brand.get_color_css(mode: string, name: string)\n  -> string"
                },
                "file": "quarto/brand.lua",
                "finish": [
                    17,
                    35
                ],
                "name": "get_color_css",
                "rawdesc": "Get a brand color in CSS format, for the brand of the specified `mode`.\n",
                "start": [
                    17,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.brand.get_color_css",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get a logo resource, for the brand of the specified `mode` and element `name`.\n\nCurrently the resulting table contains `light` and/or `dark` entries,\neach a table with `path` and `alt`.\n\nIn the future, we could resolve fully based on `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — String to be converted",
                "extends": {
                    "args": [
                        {
                            "desc": "Mode string, `light` or `dark`",
                            "finish": [
                                49,
                                35
                            ],
                            "name": "mode",
                            "rawdesc": "Mode string, `light` or `dark`",
                            "start": [
                                49,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "String to be converted",
                            "finish": [
                                49,
                                41
                            ],
                            "name": "name",
                            "rawdesc": "String to be converted",
                            "start": [
                                49,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Get a logo resource, for the brand of the specified `mode` and element `name`.\n\nCurrently the resulting table contains `light` and/or `dark` entries,\neach a table with `path` and `alt`.\n\nIn the future, we could resolve fully based on `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — String to be converted",
                    "finish": [
                        49,
                        46
                    ],
                    "rawdesc": "Get a logo resource, for the brand of the specified `mode` and element `name`.\n\nCurrently the resulting table contains `light` and/or `dark` entries,\neach a table with `path` and `alt`.\n\nIn the future, we could resolve fully based on `mode`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.brand.get_logo(mode: string, name: string)\n  -> table"
                },
                "file": "quarto/brand.lua",
                "finish": [
                    49,
                    30
                ],
                "name": "get_logo",
                "rawdesc": "Get a logo resource, for the brand of the specified `mode` and element `name`.\n\nCurrently the resulting table contains `light` and/or `dark` entries,\neach a table with `path` and `alt`.\n\nIn the future, we could resolve fully based on `mode`.\n",
                "start": [
                    49,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.brand.get_logo",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Get typography brand options, for the brand of the specified `mode` and element `name`.\n\nThe options table may have `family`, `size`, `weight`, `style`, `line-height`, `color`, \n`background-color`, `decoration` entries, depending on the element.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — Typography element name",
                "extends": {
                    "args": [
                        {
                            "desc": "Mode string, `light` or `dark`",
                            "finish": [
                                36,
                                41
                            ],
                            "name": "mode",
                            "rawdesc": "Mode string, `light` or `dark`",
                            "start": [
                                36,
                                37
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Typography element name",
                            "finish": [
                                36,
                                47
                            ],
                            "name": "name",
                            "rawdesc": "Typography element name",
                            "start": [
                                36,
                                43
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Get typography brand options, for the brand of the specified `mode` and element `name`.\n\nThe options table may have `family`, `size`, `weight`, `style`, `line-height`, `color`, \n`background-color`, `decoration` entries, depending on the element.\n\n\n@*param* `mode` — Mode string, `light` or `dark`\n\n@*param* `name` — Typography element name",
                    "finish": [
                        36,
                        52
                    ],
                    "rawdesc": "Get typography brand options, for the brand of the specified `mode` and element `name`.\n\nThe options table may have `family`, `size`, `weight`, `style`, `line-height`, `color`, \n`background-color`, `decoration` entries, depending on the element.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        36,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.brand.get_typography(mode: string, name: string)\n  -> table"
                },
                "file": "quarto/brand.lua",
                "finish": [
                    36,
                    36
                ],
                "name": "get_typography",
                "rawdesc": "Get typography brand options, for the brand of the specified `mode` and element `name`.\n\nThe options table may have `family`, `size`, `weight`, `style`, `line-height`, `color`, \n`background-color`, `decoration` entries, depending on the element.\n",
                "start": [
                    36,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.brand.get_typography",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Determine whether the current document has a brand of the specified `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`",
                "extends": {
                    "args": [
                        {
                            "desc": "Mode string, `light` or `dark`",
                            "finish": [
                                9,
                                35
                            ],
                            "name": "mode",
                            "rawdesc": "Mode string, `light` or `dark`",
                            "start": [
                                9,
                                31
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Determine whether the current document has a brand of the specified `mode`.\n\n\n@*param* `mode` — Mode string, `light` or `dark`",
                    "finish": [
                        9,
                        40
                    ],
                    "rawdesc": "Determine whether the current document has a brand of the specified `mode`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.brand.has_mode(mode: string)\n  -> boolean"
                },
                "file": "quarto/brand.lua",
                "finish": [
                    9,
                    30
                ],
                "name": "has_mode",
                "rawdesc": "Determine whether the current document has a brand of the specified `mode`.\n",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.brand.has_mode",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        18
                    ],
                    "start": [
                        2,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/config.lua",
                "finish": [
                    2,
                    13
                ],
                "name": "config",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.config",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return the full path to quarto binary being used to run the Lua filter.\n",
                "extends": {
                    "args": [],
                    "desc": "Return the full path to quarto binary being used to run the Lua filter.\n",
                    "finish": [
                        15,
                        37
                    ],
                    "rawdesc": "Return the full path to quarto binary being used to run the Lua filter.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        15,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.config.cli_path()\n  -> string"
                },
                "file": "quarto/config.lua",
                "finish": [
                    15,
                    31
                ],
                "name": "cli_path",
                "rawdesc": "Return the full path to quarto binary being used to run the Lua filter.\n",
                "start": [
                    15,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.config.cli_path",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return the current Quarto version as a `pandoc.Version` object.\n\n",
                "extends": {
                    "args": [],
                    "desc": "Return the current Quarto version as a `pandoc.Version` object.\n\n",
                    "finish": [
                        9,
                        36
                    ],
                    "rawdesc": "Return the current Quarto version as a `pandoc.Version` object.\n\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Version"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.config.version()\n  -> pandoc.Version"
                },
                "file": "quarto/config.lua",
                "finish": [
                    9,
                    30
                ],
                "name": "version",
                "rawdesc": "Return the current Quarto version as a `pandoc.Version` object.\n\n",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.config.version",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        15
                    ],
                    "start": [
                        2,
                        13
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    2,
                    10
                ],
                "name": "doc",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.doc",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Add a format resource to the document. The path to the file should relative to the Lua script calling this function.\n\nFormat resources will be copied into the directory next \nto the rendered file. This is useful, for example, if your format references a bst or cls file \nwhich must be copied into the LaTeX output directory.\n\n\n@*param* `file` — Format resource file (relative path from Lua script)",
                "extends": {
                    "args": [
                        {
                            "desc": "Format resource file (relative path from Lua script)",
                            "finish": [
                                47,
                                44
                            ],
                            "name": "file",
                            "rawdesc": "Format resource file (relative path from Lua script)",
                            "start": [
                                47,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Add a format resource to the document. The path to the file should relative to the Lua script calling this function.\n\nFormat resources will be copied into the directory next \nto the rendered file. This is useful, for example, if your format references a bst or cls file \nwhich must be copied into the LaTeX output directory.\n\n\n@*param* `file` — Format resource file (relative path from Lua script)",
                    "finish": [
                        47,
                        49
                    ],
                    "rawdesc": "Add a format resource to the document. The path to the file should relative to the Lua script calling this function.\n\nFormat resources will be copied into the directory next \nto the rendered file. This is useful, for example, if your format references a bst or cls file \nwhich must be copied into the LaTeX output directory.\n",
                    "start": [
                        47,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.add_format_resource(file: string)"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    47,
                    39
                ],
                "name": "add_format_resource",
                "rawdesc": "Add a format resource to the document. The path to the file should relative to the Lua script calling this function.\n\nFormat resources will be copied into the directory next \nto the rendered file. This is useful, for example, if your format references a bst or cls file \nwhich must be copied into the LaTeX output directory.\n",
                "start": [
                    47,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.add_format_resource",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Add an HTML dependency (additional resources and content) to a document. \n\nHTML Dependencies can bundle together JavaScript, CSS, and even arbitrary content\nto inject into the `<head>` of the document. These dependencies have a `name` and\na `version`, which is used to ensure that the same dependency isn’t bundled into \nthe document more than once.\n\nSee the documentation on [HTML Dependencies](https://quarto.org/docs/extensions/lua.html#html-dependencies) in Quarto Extensions for additional details.\n\n\n@*param* `dependency` — Dependency object (see [HTML Dependency](https://quarto.org/docs/extensions/lua.html#html-dependencies))",
                "extends": {
                    "args": [
                        {
                            "desc": "Dependency object (see [HTML Dependency](https://quarto.org/docs/extensions/lua.html#html-dependencies))",
                            "finish": [
                                21,
                                50
                            ],
                            "name": "dependency",
                            "rawdesc": "Dependency object (see [HTML Dependency](https://quarto.org/docs/extensions/lua.html#html-dependencies))",
                            "start": [
                                21,
                                40
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Add an HTML dependency (additional resources and content) to a document. \n\nHTML Dependencies can bundle together JavaScript, CSS, and even arbitrary content\nto inject into the `<head>` of the document. These dependencies have a `name` and\na `version`, which is used to ensure that the same dependency isn’t bundled into \nthe document more than once.\n\nSee the documentation on [HTML Dependencies](https://quarto.org/docs/extensions/lua.html#html-dependencies) in Quarto Extensions for additional details.\n\n\n@*param* `dependency` — Dependency object (see [HTML Dependency](https://quarto.org/docs/extensions/lua.html#html-dependencies))",
                    "finish": [
                        21,
                        55
                    ],
                    "rawdesc": "Add an HTML dependency (additional resources and content) to a document. \n\nHTML Dependencies can bundle together JavaScript, CSS, and even arbitrary content\nto inject into the `<head>` of the document. These dependencies have a `name` and\na `version`, which is used to ensure that the same dependency isn’t bundled into \nthe document more than once.\n\nSee the documentation on [HTML Dependencies](https://quarto.org/docs/extensions/lua.html#html-dependencies) in Quarto Extensions for additional details.\n",
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.add_html_dependency(dependency: table)"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    21,
                    39
                ],
                "name": "add_html_dependency",
                "rawdesc": "Add an HTML dependency (additional resources and content) to a document. \n\nHTML Dependencies can bundle together JavaScript, CSS, and even arbitrary content\nto inject into the `<head>` of the document. These dependencies have a `name` and\na `version`, which is used to ensure that the same dependency isn’t bundled into \nthe document more than once.\n\nSee the documentation on [HTML Dependencies](https://quarto.org/docs/extensions/lua.html#html-dependencies) in Quarto Extensions for additional details.\n",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.add_html_dependency",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Include a file within the output directory for an HTML dependency\n\n\n@*param* `name` — HTML dependency name\n\n@*param* `file` — File path relative to Lua filter or table with `path` and `name` for renaming the file as its copied.",
                "extends": {
                    "args": [
                        {
                            "desc": "HTML dependency name",
                            "finish": [
                                28,
                                45
                            ],
                            "name": "name",
                            "rawdesc": "HTML dependency name",
                            "start": [
                                28,
                                41
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "File path relative to Lua filter or table with `path` and `name` for renaming the file as its copied.",
                            "finish": [
                                28,
                                51
                            ],
                            "name": "file",
                            "rawdesc": "File path relative to Lua filter or table with `path` and `name` for renaming the file as its copied.",
                            "start": [
                                28,
                                47
                            ],
                            "type": "local",
                            "view": "string|{ path: string, name: string }"
                        }
                    ],
                    "desc": "Include a file within the output directory for an HTML dependency\n\n\n@*param* `name` — HTML dependency name\n\n@*param* `file` — File path relative to Lua filter or table with `path` and `name` for renaming the file as its copied.",
                    "finish": [
                        28,
                        56
                    ],
                    "rawdesc": "Include a file within the output directory for an HTML dependency\n",
                    "start": [
                        28,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.attach_to_dependency(name: string, file: string|{ path: string, name: string })"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    28,
                    40
                ],
                "name": "attach_to_dependency",
                "rawdesc": "Include a file within the output directory for an HTML dependency\n",
                "start": [
                    28,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.attach_to_dependency",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Cite method (`citeproc`, `natbib`, or `biblatex`) for the current render\n\n\n```lua\nreturn #1:\n    | 'citeproc'\n    | 'natbib'\n    | 'biblatex'\n```",
                "extends": {
                    "args": [],
                    "desc": "Cite method (`citeproc`, `natbib`, or `biblatex`) for the current render\n\n\n```lua\nreturn #1:\n    | 'citeproc'\n    | 'natbib'\n    | 'biblatex'\n```",
                    "finish": [
                        89,
                        37
                    ],
                    "rawdesc": "Cite method (`citeproc`, `natbib`, or `biblatex`) for the current render\n\n\n```lua\nreturn #1:\n    | 'citeproc'\n    | 'natbib'\n    | 'biblatex'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "'biblatex'|'citeproc'|'natbib'"
                        }
                    ],
                    "start": [
                        89,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.cite_method()\n  -> 'biblatex'|'citeproc'|'natbib'"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    89,
                    31
                ],
                "name": "cite_method",
                "rawdesc": "Cite method (`citeproc`, `natbib`, or `biblatex`) for the current render\n\n\n```lua\nreturn #1:\n    | 'citeproc'\n    | 'natbib'\n    | 'biblatex'\n```",
                "start": [
                    89,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.cite_method",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Does the current output format include Bootstrap themed HTML\n",
                "extends": {
                    "args": [],
                    "desc": "Does the current output format include Bootstrap themed HTML\n",
                    "finish": [
                        101,
                        39
                    ],
                    "rawdesc": "Does the current output format include Bootstrap themed HTML\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        101,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.has_bootstrap()\n  -> boolean"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    101,
                    33
                ],
                "name": "has_bootstrap",
                "rawdesc": "Does the current output format include Bootstrap themed HTML\n",
                "start": [
                    101,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.has_bootstrap",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Include file at the specified location (`in-header`, `before-body`, or `after-body`). \n\nThe path to the file should relative to the Lua script calling this function.\n\n\n@*param* `location` — Location for include\n\n@*param* `file` — File to include (relative path from Lua script)\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Location for include",
                            "finish": [
                                63,
                                41
                            ],
                            "name": "location",
                            "rawdesc": "Location for include",
                            "start": [
                                63,
                                33
                            ],
                            "type": "local",
                            "view": "'after-body'|'before-body'|'in-header'"
                        },
                        {
                            "desc": "File to include (relative path from Lua script)",
                            "finish": [
                                63,
                                47
                            ],
                            "name": "file",
                            "rawdesc": "File to include (relative path from Lua script)",
                            "start": [
                                63,
                                43
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Include file at the specified location (`in-header`, `before-body`, or `after-body`). \n\nThe path to the file should relative to the Lua script calling this function.\n\n\n@*param* `location` — Location for include\n\n@*param* `file` — File to include (relative path from Lua script)\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                    "finish": [
                        63,
                        52
                    ],
                    "rawdesc": "Include file at the specified location (`in-header`, `before-body`, or `after-body`). \n\nThe path to the file should relative to the Lua script calling this function.\n\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.include_file(location: 'after-body'|'before-body'|'in-header', file: string)"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    63,
                    32
                ],
                "name": "include_file",
                "rawdesc": "Include file at the specified location (`in-header`, `before-body`, or `after-body`). \n\nThe path to the file should relative to the Lua script calling this function.\n\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.include_file",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Include text at the specified location (`in-header`, `before-body`, or `after-body`). \n\n\n@*param* `location` — Location for include\n\n@*param* `text` — Text to include\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Location for include",
                            "finish": [
                                54,
                                41
                            ],
                            "name": "location",
                            "rawdesc": "Location for include",
                            "start": [
                                54,
                                33
                            ],
                            "type": "local",
                            "view": "'after-body'|'before-body'|'in-header'"
                        },
                        {
                            "desc": "Text to include",
                            "finish": [
                                54,
                                47
                            ],
                            "name": "text",
                            "rawdesc": "Text to include",
                            "start": [
                                54,
                                43
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Include text at the specified location (`in-header`, `before-body`, or `after-body`). \n\n\n@*param* `location` — Location for include\n\n@*param* `text` — Text to include\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                    "finish": [
                        54,
                        52
                    ],
                    "rawdesc": "Include text at the specified location (`in-header`, `before-body`, or `after-body`). \n\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                    "start": [
                        54,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.include_text(location: 'after-body'|'before-body'|'in-header', text: string)"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    54,
                    32
                ],
                "name": "include_text",
                "rawdesc": "Include text at the specified location (`in-header`, `before-body`, or `after-body`). \n\n\n```lua\nlocation:\n    | 'in-header'\n    | 'before-body'\n    | 'after-body'\n```",
                "start": [
                    54,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.include_text",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Full path to input file for the current render",
                "extends": {
                    "finish": [
                        5,
                        26
                    ],
                    "start": [
                        5,
                        24
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    5,
                    21
                ],
                "name": "input_file",
                "rawdesc": "Full path to input file for the current render",
                "start": [
                    5,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.input_file",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n\n\n@*param* `name` — Format name or alias",
                "extends": {
                    "args": [
                        {
                            "desc": "Format name or alias",
                            "finish": [
                                83,
                                34
                            ],
                            "name": "name",
                            "rawdesc": "Format name or alias",
                            "start": [
                                83,
                                30
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n\n\n@*param* `name` — Format name or alias",
                    "finish": [
                        83,
                        39
                    ],
                    "rawdesc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.is_format(name: string)\n  -> boolean"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    83,
                    29
                ],
                "name": "is_format",
                "rawdesc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.is_format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Full path to output file for the current render",
                "extends": {
                    "finish": [
                        8,
                        27
                    ],
                    "start": [
                        8,
                        25
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    8,
                    22
                ],
                "name": "output_file",
                "rawdesc": "Full path to output file for the current render",
                "start": [
                    8,
                    0
                ],
                "type": "setfield",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.output_file",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "PDF engine (e.g. `pdflatex`) for the current render\n",
                "extends": {
                    "args": [],
                    "desc": "PDF engine (e.g. `pdflatex`) for the current render\n",
                    "finish": [
                        95,
                        36
                    ],
                    "rawdesc": "PDF engine (e.g. `pdflatex`) for the current render\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        95,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.pdf_engine()\n  -> string"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    95,
                    30
                ],
                "name": "pdf_engine",
                "rawdesc": "PDF engine (e.g. `pdflatex`) for the current render\n",
                "start": [
                    95,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.pdf_engine",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Provides the project relative path to the current input\nif this render is in the context of a project (otherwise `nil`)\n",
                "extends": {
                    "args": [],
                    "desc": "Provides the project relative path to the current input\nif this render is in the context of a project (otherwise `nil`)\n",
                    "finish": [
                        108,
                        45
                    ],
                    "rawdesc": "Provides the project relative path to the current input\nif this render is in the context of a project (otherwise `nil`)\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        108,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.project_output_file()\n  -> string|nil"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    108,
                    39
                ],
                "name": "project_output_file",
                "rawdesc": "Provides the project relative path to the current input\nif this render is in the context of a project (otherwise `nil`)\n",
                "start": [
                    108,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.project_output_file",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Adds a `\\usepackage` statement to the LaTeX output\n\nIf appropriate, include package options using the `options` parameter.\n\n\n@*param* `package` — LaTeX package name\n\n@*param* `options` — (Optional) LaTeX package options",
                "extends": {
                    "args": [
                        {
                            "desc": "LaTeX package name",
                            "finish": [
                                37,
                                45
                            ],
                            "name": "package",
                            "rawdesc": "LaTeX package name",
                            "start": [
                                37,
                                38
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "(Optional) LaTeX package options",
                            "finish": [
                                37,
                                54
                            ],
                            "name": "options",
                            "rawdesc": "(Optional) LaTeX package options",
                            "start": [
                                37,
                                47
                            ],
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Adds a `\\usepackage` statement to the LaTeX output\n\nIf appropriate, include package options using the `options` parameter.\n\n\n@*param* `package` — LaTeX package name\n\n@*param* `options` — (Optional) LaTeX package options",
                    "finish": [
                        37,
                        59
                    ],
                    "rawdesc": "Adds a `\\usepackage` statement to the LaTeX output\n\nIf appropriate, include package options using the `options` parameter.\n",
                    "start": [
                        37,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.doc.use_latex_package(package: string, options?: string)"
                },
                "file": "quarto/doc.lua",
                "finish": [
                    37,
                    37
                ],
                "name": "use_latex_package",
                "rawdesc": "Adds a `\\usepackage` statement to the LaTeX output\n\nIf appropriate, include package options using the `options` parameter.\n",
                "start": [
                    37,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.doc.use_latex_package",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        18
                    ],
                    "start": [
                        2,
                        16
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/format.lua",
                "finish": [
                    2,
                    13
                ],
                "name": "format",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "quarto/format.lua",
                "finish": [
                    232,
                    41
                ],
                "start": [
                    232,
                    10
                ],
                "type": "doc.class",
                "view": "quarto.format.ParseFormatResult",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "A table describing which extensions have been disabled (`-`) or enabled (`+`)",
                "extends": {
                    "finish": [
                        234,
                        43
                    ],
                    "start": [
                        234,
                        21
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                234,
                                43
                            ],
                            "start": [
                                234,
                                21
                            ],
                            "type": "doc.type.sign",
                            "view": "table<string, \"+\"|\"-\">"
                        }
                    ],
                    "view": "table<string, \"+\"|\"-\">"
                },
                "file": "quarto/format.lua",
                "finish": [
                    234,
                    43
                ],
                "name": "extensions",
                "rawdesc": "A table describing which extensions have been disabled (`-`) or enabled (`+`)",
                "start": [
                    234,
                    10
                ],
                "type": "doc.field",
                "view": "table<string, \"+\"|\"-\">",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "The base string of the formst",
                "extends": {
                    "finish": [
                        233,
                        23
                    ],
                    "start": [
                        233,
                        17
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                233,
                                23
                            ],
                            "start": [
                                233,
                                17
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    233,
                    23
                ],
                "name": "format",
                "rawdesc": "The base string of the formst",
                "start": [
                    233,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            }
        ],
        "name": "quarto.format.ParseFormatResult",
        "type": "type",
        "view": "quarto.format.ParseFormatResult"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `asciidoc` or `asciidoctor`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `asciidoc` or `asciidoctor`.\n",
                    "finish": [
                        41,
                        47
                    ],
                    "rawdesc": "Return `true` if format is `asciidoc` or `asciidoctor`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        41,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_asciidoc_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    41,
                    41
                ],
                "name": "is_asciidoc_output",
                "rawdesc": "Return `true` if format is `asciidoc` or `asciidoctor`.\n",
                "start": [
                    41,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_asciidoc_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `json` or `native`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `json` or `native`.\n",
                    "finish": [
                        188,
                        42
                    ],
                    "rawdesc": "Return `true` if format is `json` or `native`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        188,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_ast_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    188,
                    36
                ],
                "name": "is_ast_output",
                "rawdesc": "Return `true` if format is `json` or `native`.\n",
                "start": [
                    188,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_ast_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `beamer`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `beamer`.\n",
                    "finish": [
                        55,
                        45
                    ],
                    "rawdesc": "Return `true` if format is `beamer`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        55,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_beamer_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    55,
                    39
                ],
                "name": "is_beamer_output",
                "rawdesc": "Return `true` if format is `beamer`.\n",
                "start": [
                    55,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_beamer_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `bib`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `bib`.\n",
                    "finish": [
                        167,
                        51
                    ],
                    "rawdesc": "Return `true` if format is `bib`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        167,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_bibliography_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    167,
                    45
                ],
                "name": "is_bibliography_output",
                "rawdesc": "Return `true` if format is `bib`.\n",
                "start": [
                    167,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_bibliography_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `confluence-xml`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `confluence-xml`.\n",
                    "finish": [
                        209,
                        49
                    ],
                    "rawdesc": "Return `true` if format is `confluence-xml`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        209,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_confluence_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    209,
                    43
                ],
                "name": "is_confluence_output",
                "rawdesc": "Return `true` if format is `confluence-xml`.\n",
                "start": [
                    209,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_confluence_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `dashboard`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `dashboard`.\n",
                    "finish": [
                        223,
                        48
                    ],
                    "rawdesc": "Return `true` if format is `dashboard`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        223,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_dashboard_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    223,
                    42
                ],
                "name": "is_dashboard_output",
                "rawdesc": "Return `true` if format is `dashboard`.\n",
                "start": [
                    223,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_dashboard_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `docusaurus-md`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `docusaurus-md`.\n",
                    "finish": [
                        216,
                        49
                    ],
                    "rawdesc": "Return `true` if format is `docusaurus-md`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        216,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_docusaurus_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    216,
                    43
                ],
                "name": "is_docusaurus_output",
                "rawdesc": "Return `true` if format is `docusaurus-md`.\n",
                "start": [
                    216,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_docusaurus_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `docx`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `docx`.\n",
                    "finish": [
                        62,
                        43
                    ],
                    "rawdesc": "Return `true` if format is `docx`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        62,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_docx_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    62,
                    37
                ],
                "name": "is_docx_output",
                "rawdesc": "Return `true` if format is `docx`.\n",
                "start": [
                    62,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_docx_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `email`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `email`.\n",
                    "finish": [
                        230,
                        44
                    ],
                    "rawdesc": "Return `true` if format is `email`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        230,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_email_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    230,
                    38
                ],
                "name": "is_email_output",
                "rawdesc": "Return `true` if format is `email`.\n",
                "start": [
                    230,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_email_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `epub`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `epub`.\n",
                    "finish": [
                        111,
                        43
                    ],
                    "rawdesc": "Return `true` if format is `epub`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        111,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_epub_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    111,
                    37
                ],
                "name": "is_epub_output",
                "rawdesc": "Return `true` if format is `epub`.\n",
                "start": [
                    111,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_epub_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n\n\n@*param* `name` — Format name or alias",
                "extends": {
                    "args": [
                        {
                            "desc": "Format name or alias",
                            "finish": [
                                35,
                                37
                            ],
                            "name": "name",
                            "rawdesc": "Format name or alias",
                            "start": [
                                35,
                                33
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n\n\n@*param* `name` — Format name or alias",
                    "finish": [
                        35,
                        42
                    ],
                    "rawdesc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        35,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_format(name: string)\n  -> boolean"
                },
                "file": "quarto/format.lua",
                "finish": [
                    35,
                    32
                ],
                "name": "is_format",
                "rawdesc": "Detect if the current format matches `name`\n\nThe name parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match\nbased on an alias that groups commonly targeted formats together. Aliases include:\n\n- **latex**: `latex`, `pdf`\n- **pdf**: `latex`, `pdf`\n- **epub**: `epub*`\n- **html**: `html*`, `epub*`, `revealjs`\n- **html:js**: `html*`, `revealjs`\n- **markdown**: `markdown*`, `commonmark*`, `gfm`, `markua`\n\nNote that the `html:js` alias indicates that the target format is capable of executing JavaScript (this maps to all HTML formats save for ePub).\n",
                "start": [
                    35,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `gfm`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `gfm`.\n",
                    "finish": [
                        118,
                        54
                    ],
                    "rawdesc": "Return `true` if format is `gfm`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        118,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_github_markdown_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    118,
                    48
                ],
                "name": "is_github_markdown_output",
                "rawdesc": "Return `true` if format is `gfm`.\n",
                "start": [
                    118,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_github_markdown_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is an html-derived output format.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is an html-derived output format.\n",
                    "finish": [
                        153,
                        43
                    ],
                    "rawdesc": "Return `true` if format is an html-derived output format.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        153,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_html_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    153,
                    37
                ],
                "name": "is_html_output",
                "rawdesc": "Return `true` if format is an html-derived output format.\n",
                "start": [
                    153,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_html_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, or `revealjs`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, or `revealjs`.\n",
                    "finish": [
                        160,
                        49
                    ],
                    "rawdesc": "Return `true` if format is `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, or `revealjs`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        160,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_html_slide_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    160,
                    43
                ],
                "name": "is_html_slide_output",
                "rawdesc": "Return `true` if format is `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, or `revealjs`.\n",
                "start": [
                    160,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_html_slide_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `hugo-md`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `hugo-md`.\n",
                    "finish": [
                        125,
                        52
                    ],
                    "rawdesc": "Return `true` if format is `hugo-md`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        125,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_hugo_markdown_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    125,
                    46
                ],
                "name": "is_hugo_markdown_output",
                "rawdesc": "Return `true` if format is `hugo-md`.\n",
                "start": [
                    125,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_hugo_markdown_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `ipynb`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `ipynb`.\n",
                    "finish": [
                        146,
                        44
                    ],
                    "rawdesc": "Return `true` if format is `ipynb`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        146,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_ipynb_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    146,
                    38
                ],
                "name": "is_ipynb_output",
                "rawdesc": "Return `true` if format is `ipynb`.\n",
                "start": [
                    146,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_ipynb_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `jats`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `jats`.\n",
                    "finish": [
                        195,
                        43
                    ],
                    "rawdesc": "Return `true` if format is `jats`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        195,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_jats_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    195,
                    37
                ],
                "name": "is_jats_output",
                "rawdesc": "Return `true` if format is `jats`.\n",
                "start": [
                    195,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_jats_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `json`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `json`.\n",
                    "finish": [
                        181,
                        43
                    ],
                    "rawdesc": "Return `true` if format is `json`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        181,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_json_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    181,
                    37
                ],
                "name": "is_json_output",
                "rawdesc": "Return `true` if format is `json`.\n",
                "start": [
                    181,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_json_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is a `latex`-derived output format.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is a `latex`-derived output format.\n",
                    "finish": [
                        48,
                        44
                    ],
                    "rawdesc": "Return `true` if format is a `latex`-derived output format.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        48,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_latex_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    48,
                    38
                ],
                "name": "is_latex_output",
                "rawdesc": "Return `true` if format is a `latex`-derived output format.\n",
                "start": [
                    48,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_latex_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is a markdown-derived output format.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is a markdown-derived output format.\n",
                    "finish": [
                        132,
                        47
                    ],
                    "rawdesc": "Return `true` if format is a markdown-derived output format.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        132,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_markdown_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    132,
                    41
                ],
                "name": "is_markdown_output",
                "rawdesc": "Return `true` if format is a markdown-derived output format.\n",
                "start": [
                    132,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_markdown_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is a markdown-derived output format that supports HTML code.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is a markdown-derived output format that supports HTML code.\n",
                    "finish": [
                        139,
                        57
                    ],
                    "rawdesc": "Return `true` if format is a markdown-derived output format that supports HTML code.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        139,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_markdown_with_html_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    139,
                    51
                ],
                "name": "is_markdown_with_html_output",
                "rawdesc": "Return `true` if format is a markdown-derived output format that supports HTML code.\n",
                "start": [
                    139,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_markdown_with_html_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `native`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `native`.\n",
                    "finish": [
                        174,
                        45
                    ],
                    "rawdesc": "Return `true` if format is `native`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        174,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_native_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    174,
                    39
                ],
                "name": "is_native_output",
                "rawdesc": "Return `true` if format is `native`.\n",
                "start": [
                    174,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_native_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `odt`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `odt`.\n",
                    "finish": [
                        76,
                        42
                    ],
                    "rawdesc": "Return `true` if format is `odt`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        76,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_odt_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    76,
                    36
                ],
                "name": "is_odt_output",
                "rawdesc": "Return `true` if format is `odt`.\n",
                "start": [
                    76,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_odt_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `pptx`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `pptx`.\n",
                    "finish": [
                        90,
                        49
                    ],
                    "rawdesc": "Return `true` if format is `pptx`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        90,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_powerpoint_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    90,
                    43
                ],
                "name": "is_powerpoint_output",
                "rawdesc": "Return `true` if format is `pptx`.\n",
                "start": [
                    90,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_powerpoint_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if `el` is a RawInline or RawBlock Pandoc node.\n\n\n@*param* `el` — Pandoc node",
                "extends": {
                    "args": [
                        {
                            "desc": "Pandoc node",
                            "finish": [
                                9,
                                32
                            ],
                            "name": "el",
                            "rawdesc": "Pandoc node",
                            "start": [
                                9,
                                30
                            ],
                            "type": "local",
                            "view": "boolean|pandoc.Block|pandoc.BlockQuote|pandoc.Blocks|pandoc.BulletList...(+39)"
                        }
                    ],
                    "desc": "Return `true` if `el` is a RawInline or RawBlock Pandoc node.\n\n\n@*param* `el` — Pandoc node",
                    "finish": [
                        9,
                        37
                    ],
                    "rawdesc": "Return `true` if `el` is a RawInline or RawBlock Pandoc node.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_raw(el: boolean|pandoc.Block|pandoc.BlockQuote|pandoc.Blocks|pandoc.BulletList...(+39))\n  -> boolean"
                },
                "file": "quarto/format.lua",
                "finish": [
                    9,
                    29
                ],
                "name": "is_raw",
                "rawdesc": "Return `true` if `el` is a RawInline or RawBlock Pandoc node.\n",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_raw",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if `rawEl` is a RawInline or RawBlock of format `html`\n\n\n@*param* `rawEl` — Pandoc node",
                "extends": {
                    "args": [
                        {
                            "desc": "Pandoc node",
                            "finish": [
                                16,
                                40
                            ],
                            "name": "rawEl",
                            "rawdesc": "Pandoc node",
                            "start": [
                                16,
                                35
                            ],
                            "type": "local",
                            "view": "boolean|pandoc.Block|pandoc.BlockQuote|pandoc.Blocks|pandoc.BulletList...(+39)"
                        }
                    ],
                    "desc": "Return `true` if `rawEl` is a RawInline or RawBlock of format `html`\n\n\n@*param* `rawEl` — Pandoc node",
                    "finish": [
                        16,
                        45
                    ],
                    "rawdesc": "Return `true` if `rawEl` is a RawInline or RawBlock of format `html`\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        16,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_raw_html(rawEl: boolean|pandoc.Block|pandoc.BlockQuote|pandoc.Blocks|pandoc.BulletList...(+39))\n  -> boolean"
                },
                "file": "quarto/format.lua",
                "finish": [
                    16,
                    34
                ],
                "name": "is_raw_html",
                "rawdesc": "Return `true` if `rawEl` is a RawInline or RawBlock of format `html`\n",
                "start": [
                    16,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_raw_html",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `revealjs`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `revealjs`.\n",
                    "finish": [
                        97,
                        47
                    ],
                    "rawdesc": "Return `true` if format is `revealjs`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        97,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_revealjs_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    97,
                    41
                ],
                "name": "is_revealjs_output",
                "rawdesc": "Return `true` if format is `revealjs`.\n",
                "start": [
                    97,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_revealjs_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `rtf`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `rtf`.\n",
                    "finish": [
                        69,
                        42
                    ],
                    "rawdesc": "Return `true` if format is `rtf`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        69,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_rtf_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    69,
                    36
                ],
                "name": "is_rtf_output",
                "rawdesc": "Return `true` if format is `rtf`.\n",
                "start": [
                    69,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_rtf_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `beamer`, `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, `revealjs` or `pptx`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `beamer`, `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, `revealjs` or `pptx`.\n",
                    "finish": [
                        104,
                        44
                    ],
                    "rawdesc": "Return `true` if format is `beamer`, `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, `revealjs` or `pptx`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        104,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_slide_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    104,
                    38
                ],
                "name": "is_slide_output",
                "rawdesc": "Return `true` if format is `beamer`, `revealjs`, `s5`, `dzslides`, `slidy`, `slideous`, `revealjs` or `pptx`.\n",
                "start": [
                    104,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_slide_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `typst`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `typst`.\n",
                    "finish": [
                        202,
                        44
                    ],
                    "rawdesc": "Return `true` if format is `typst`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        202,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_typst_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    202,
                    38
                ],
                "name": "is_typst_output",
                "rawdesc": "Return `true` if format is `typst`.\n",
                "start": [
                    202,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_typst_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Return `true` if format is `docx` or `odt`.\n",
                "extends": {
                    "args": [],
                    "desc": "Return `true` if format is `docx` or `odt`.\n",
                    "finish": [
                        83,
                        53
                    ],
                    "rawdesc": "Return `true` if format is `docx` or `odt`.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.is_word_processor_output()\n  -> string"
                },
                "file": "quarto/format.lua",
                "finish": [
                    83,
                    47
                ],
                "name": "is_word_processor_output",
                "rawdesc": "Return `true` if format is `docx` or `odt`.\n",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.is_word_processor_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns an object with the format name and variants as would be interpreted by Pandoc\n\n\n@*param* `raw_format` — The format's string",
                "extends": {
                    "args": [
                        {
                            "desc": "The format's string",
                            "finish": [
                                241,
                                46
                            ],
                            "name": "raw_format",
                            "rawdesc": "The format's string",
                            "start": [
                                241,
                                36
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Returns an object with the format name and variants as would be interpreted by Pandoc\n\n\n@*param* `raw_format` — The format's string",
                    "finish": [
                        241,
                        51
                    ],
                    "rawdesc": "Returns an object with the format name and variants as would be interpreted by Pandoc\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "quarto.format.ParseFormatResult"
                        }
                    ],
                    "start": [
                        241,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.parse_format(raw_format: string)\n  -> quarto.format.ParseFormatResult"
                },
                "file": "quarto/format.lua",
                "finish": [
                    241,
                    35
                ],
                "name": "parse_format",
                "rawdesc": "Returns an object with the format name and variants as would be interpreted by Pandoc\n",
                "start": [
                    241,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.parse_format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        24
                    ],
                    "start": [
                        2,
                        22
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/format/typst.lua",
                "finish": [
                    2,
                    19
                ],
                "name": "typst",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.format.typst",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a node that represents typst content (`[Hello, world]`). Use\nthis to ensure your output isn't interpreted as typst computations.\n\n\n@*param* `content` — content",
                "extends": {
                    "args": [
                        {
                            "desc": "content",
                            "finish": [
                                19,
                                53
                            ],
                            "name": "content",
                            "rawdesc": "content",
                            "start": [
                                19,
                                46
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Create a node that represents typst content (`[Hello, world]`). Use\nthis to ensure your output isn't interpreted as typst computations.\n\n\n@*param* `content` — content",
                    "finish": [
                        19,
                        58
                    ],
                    "rawdesc": "Create a node that represents typst content (`[Hello, world]`). Use\nthis to ensure your output isn't interpreted as typst computations.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "start": [
                        19,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.typst.as_typst_content(content: any)\n  -> pandoc.Blocks"
                },
                "file": "quarto/format/typst.lua",
                "finish": [
                    19,
                    45
                ],
                "name": "as_typst_content",
                "rawdesc": "Create a node that represents typst content (`[Hello, world]`). Use\nthis to ensure your output isn't interpreted as typst computations.\n",
                "start": [
                    19,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.typst.as_typst_content",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Create a node that represents a typst function call.\n\n\n@*param* `name` — Name of function\n\n@*param* `params` — Array of {param, value} pairs\n\n@*param* `keep_scaffold` — If true, the result will be wrapped in a typst block.",
                "extends": {
                    "args": [
                        {
                            "desc": "Name of function",
                            "finish": [
                                11,
                                47
                            ],
                            "name": "name",
                            "rawdesc": "Name of function",
                            "start": [
                                11,
                                43
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "Array of {param, value} pairs",
                            "finish": [
                                11,
                                55
                            ],
                            "name": "params",
                            "rawdesc": "Array of {param, value} pairs",
                            "start": [
                                11,
                                49
                            ],
                            "type": "local",
                            "view": "table<string, any>"
                        },
                        {
                            "desc": "If true, the result will be wrapped in a typst block.",
                            "finish": [
                                11,
                                70
                            ],
                            "name": "keep_scaffold",
                            "rawdesc": "If true, the result will be wrapped in a typst block.",
                            "start": [
                                11,
                                57
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Create a node that represents a typst function call.\n\n\n@*param* `name` — Name of function\n\n@*param* `params` — Array of {param, value} pairs\n\n@*param* `keep_scaffold` — If true, the result will be wrapped in a typst block.",
                    "finish": [
                        11,
                        75
                    ],
                    "rawdesc": "Create a node that represents a typst function call.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Div"
                        }
                    ],
                    "start": [
                        11,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.format.typst.function_call(name: string, params: table<string, any>, keep_scaffold?: boolean)\n  -> pandoc.Div"
                },
                "file": "quarto/format/typst.lua",
                "finish": [
                    11,
                    42
                ],
                "name": "function_call",
                "rawdesc": "Create a node that represents a typst function call.\n",
                "start": [
                    11,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.format.typst.function_call",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        16
                    ],
                    "start": [
                        2,
                        14
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/json.lua",
                "finish": [
                    2,
                    11
                ],
                "name": "json",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.json",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Parse the JSON `str` into a Lua value\n\n\n@*param* `str` — JSON string",
                "extends": {
                    "args": [
                        {
                            "desc": "JSON string",
                            "finish": [
                                9,
                                31
                            ],
                            "name": "str",
                            "rawdesc": "JSON string",
                            "start": [
                                9,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Parse the JSON `str` into a Lua value\n\n\n@*param* `str` — JSON string",
                    "finish": [
                        9,
                        36
                    ],
                    "rawdesc": "Parse the JSON `str` into a Lua value\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        9,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.json.decode(str: string)\n  -> any"
                },
                "file": "quarto/json.lua",
                "finish": [
                    9,
                    27
                ],
                "name": "decode",
                "rawdesc": "Parse the JSON `str` into a Lua value\n",
                "start": [
                    9,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.json.decode",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Encode a Lua value into a JSON string\n\n\n@*param* `value` — Lua value",
                "extends": {
                    "args": [
                        {
                            "desc": "Lua value",
                            "finish": [
                                16,
                                33
                            ],
                            "name": "value",
                            "rawdesc": "Lua value",
                            "start": [
                                16,
                                28
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Encode a Lua value into a JSON string\n\n\n@*param* `value` — Lua value",
                    "finish": [
                        16,
                        38
                    ],
                    "rawdesc": "Encode a Lua value into a JSON string\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        16,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.json.encode(value: any)\n  -> string"
                },
                "file": "quarto/json.lua",
                "finish": [
                    16,
                    27
                ],
                "name": "encode",
                "rawdesc": "Encode a Lua value into a JSON string\n",
                "start": [
                    16,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.json.encode",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        15
                    ],
                    "start": [
                        2,
                        13
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/log.lua",
                "finish": [
                    2,
                    10
                ],
                "name": "log",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.log",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "If the log level is >= `2`, calls `quarto.log.output()` with `(D)` and the supplied arguments.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                29
                            ],
                            "start": [
                                92,
                                26
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "If the log level is >= `2`, calls `quarto.log.output()` with `(D)` and the supplied arguments.\n",
                    "finish": [
                        92,
                        34
                    ],
                    "rawdesc": "If the log level is >= `2`, calls `quarto.log.output()` with `(D)` and the supplied arguments.\n",
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.debug(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    92,
                    25
                ],
                "name": "debug",
                "rawdesc": "If the log level is >= `2`, calls `quarto.log.output()` with `(D)` and the supplied arguments.\n",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.debug",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns a pandoc-aware string representation of `value`, which can be an arbitrary lua object.\n\nThe returned string is a single line if not longer than `maxlen` (default `70`), and is otherwise multiple lines (with two character indentation). The string is not terminated with a newline.\n\nMap keys are sorted alphabetically in order to ensure that output is repeatable.\n\n\n@*param* `value` — Value to dump\n\n@*param* `maxlen` — Maximum length of lines\n\n@*return* — Dumped contents of `value`",
                "extends": {
                    "args": [
                        {
                            "desc": "Value to dump",
                            "finish": [
                                61,
                                30
                            ],
                            "name": "value",
                            "rawdesc": "Value to dump",
                            "start": [
                                61,
                                25
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "Maximum length of lines",
                            "finish": [
                                61,
                                38
                            ],
                            "name": "maxlen",
                            "rawdesc": "Maximum length of lines",
                            "start": [
                                61,
                                32
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Returns a pandoc-aware string representation of `value`, which can be an arbitrary lua object.\n\nThe returned string is a single line if not longer than `maxlen` (default `70`), and is otherwise multiple lines (with two character indentation). The string is not terminated with a newline.\n\nMap keys are sorted alphabetically in order to ensure that output is repeatable.\n\n\n@*param* `value` — Value to dump\n\n@*param* `maxlen` — Maximum length of lines\n\n@*return* — Dumped contents of `value`",
                    "finish": [
                        61,
                        43
                    ],
                    "rawdesc": "Returns a pandoc-aware string representation of `value`, which can be an arbitrary lua object.\n\nThe returned string is a single line if not longer than `maxlen` (default `70`), and is otherwise multiple lines (with two character indentation). The string is not terminated with a newline.\n\nMap keys are sorted alphabetically in order to ensure that output is repeatable.\n",
                    "returns": [
                        {
                            "desc": "Dumped contents of `value`",
                            "rawdesc": "Dumped contents of `value`",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        61,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.dump(value: any, maxlen?: integer)\n  -> string"
                },
                "file": "quarto/log.lua",
                "finish": [
                    61,
                    24
                ],
                "name": "dump",
                "rawdesc": "Returns a pandoc-aware string representation of `value`, which can be an arbitrary lua object.\n\nThe returned string is a single line if not longer than `maxlen` (default `70`), and is otherwise multiple lines (with two character indentation). The string is not terminated with a newline.\n\nMap keys are sorted alphabetically in order to ensure that output is repeatable.\n",
                "start": [
                    61,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.dump",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "If the log level is >= `-1`, calls `quarto.log.output()` with `(E)` and the supplied arguments.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                77,
                                29
                            ],
                            "start": [
                                77,
                                26
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "If the log level is >= `-1`, calls `quarto.log.output()` with `(E)` and the supplied arguments.\n",
                    "finish": [
                        77,
                        34
                    ],
                    "rawdesc": "If the log level is >= `-1`, calls `quarto.log.output()` with `(E)` and the supplied arguments.\n",
                    "start": [
                        77,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.error(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    77,
                    25
                ],
                "name": "error",
                "rawdesc": "If the log level is >= `-1`, calls `quarto.log.output()` with `(E)` and the supplied arguments.\n",
                "start": [
                    77,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.error",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "If the log level is >= `1`, calls `quarto.log.output()` with `(I)` and the supplied arguments.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                87,
                                28
                            ],
                            "start": [
                                87,
                                25
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "If the log level is >= `1`, calls `quarto.log.output()` with `(I)` and the supplied arguments.\n",
                    "finish": [
                        87,
                        33
                    ],
                    "rawdesc": "If the log level is >= `1`, calls `quarto.log.output()` with `(I)` and the supplied arguments.\n",
                    "start": [
                        87,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.info(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    87,
                    24
                ],
                "name": "info",
                "rawdesc": "If the log level is >= `1`, calls `quarto.log.output()` with `(I)` and the supplied arguments.\n",
                "start": [
                    87,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.info",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Current log level (call `quarto.log.setloglevel()` to change the level)\n",
                "extends": {
                    "finish": [
                        26,
                        23
                    ],
                    "start": [
                        26,
                        22
                    ],
                    "type": "integer",
                    "view": "integer"
                },
                "file": "quarto/log.lua",
                "finish": [
                    26,
                    19
                ],
                "name": "loglevel",
                "rawdesc": "Current log level (call `quarto.log.setloglevel()` to change the level)\n",
                "start": [
                    26,
                    0
                ],
                "type": "setfield",
                "view": "integer",
                "visible": "public"
            }
        ],
        "name": "quarto.log.loglevel",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Pass each argument to `logging.dump()` and output the results to `stderr`, separated by single spaces and terminated (if necessary) with a newline.\n\nNote: Only `table` and `userdata` arguments are passed to\n`logging.dump()`. Other arguments are passed to the built-in `tostring()`\nfunction. This is partly an optimization and partly to prevent string arguments\nfrom being quoted.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                30
                            ],
                            "start": [
                                71,
                                27
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "Pass each argument to `logging.dump()` and output the results to `stderr`, separated by single spaces and terminated (if necessary) with a newline.\n\nNote: Only `table` and `userdata` arguments are passed to\n`logging.dump()`. Other arguments are passed to the built-in `tostring()`\nfunction. This is partly an optimization and partly to prevent string arguments\nfrom being quoted.\n",
                    "finish": [
                        71,
                        35
                    ],
                    "rawdesc": "Pass each argument to `logging.dump()` and output the results to `stderr`, separated by single spaces and terminated (if necessary) with a newline.\n\nNote: Only `table` and `userdata` arguments are passed to\n`logging.dump()`. Other arguments are passed to the built-in `tostring()`\nfunction. This is partly an optimization and partly to prevent string arguments\nfrom being quoted.\n",
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.output(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    71,
                    26
                ],
                "name": "output",
                "rawdesc": "Pass each argument to `logging.dump()` and output the results to `stderr`, separated by single spaces and terminated (if necessary) with a newline.\n\nNote: Only `table` and `userdata` arguments are passed to\n`logging.dump()`. Other arguments are passed to the built-in `tostring()`\nfunction. This is partly an optimization and partly to prevent string arguments\nfrom being quoted.\n",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Set the log level, which controls which of `quarto.log.error()`, `quarto.log.warning()`, `quarto.log.info()` will generate output when called.\n\n* `-2` : (or less) suppress all logging (apart from `quarto.log.temp()`)\n* `-1` : output only error messages\n* `0` : output error and warning messages\n* `1` : output error, warning and info messages\n* `2` : output error, warning, info and debug messages\n* `3` : (or more) output error, warning, info, debug and trace messages\n\nThe initial log level is `0`, unless the following pandoc command-line options are specified:\n\n* `--trace` : `3` if `--verbose` is also specified; otherwise `2`\n* `--verbose` : `1`\n* `--quiet` : `-1`\n\n\n@*param* `level` — Log level",
                "extends": {
                    "args": [
                        {
                            "desc": "Log level",
                            "finish": [
                                21,
                                37
                            ],
                            "name": "level",
                            "rawdesc": "Log level",
                            "start": [
                                21,
                                32
                            ],
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Set the log level, which controls which of `quarto.log.error()`, `quarto.log.warning()`, `quarto.log.info()` will generate output when called.\n\n* `-2` : (or less) suppress all logging (apart from `quarto.log.temp()`)\n* `-1` : output only error messages\n* `0` : output error and warning messages\n* `1` : output error, warning and info messages\n* `2` : output error, warning, info and debug messages\n* `3` : (or more) output error, warning, info, debug and trace messages\n\nThe initial log level is `0`, unless the following pandoc command-line options are specified:\n\n* `--trace` : `3` if `--verbose` is also specified; otherwise `2`\n* `--verbose` : `1`\n* `--quiet` : `-1`\n\n\n@*param* `level` — Log level",
                    "finish": [
                        21,
                        42
                    ],
                    "rawdesc": "Set the log level, which controls which of `quarto.log.error()`, `quarto.log.warning()`, `quarto.log.info()` will generate output when called.\n\n* `-2` : (or less) suppress all logging (apart from `quarto.log.temp()`)\n* `-1` : output only error messages\n* `0` : output error and warning messages\n* `1` : output error, warning and info messages\n* `2` : output error, warning, info and debug messages\n* `3` : (or more) output error, warning, info, debug and trace messages\n\nThe initial log level is `0`, unless the following pandoc command-line options are specified:\n\n* `--trace` : `3` if `--verbose` is also specified; otherwise `2`\n* `--verbose` : `1`\n* `--quiet` : `-1`\n",
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.setloglevel(level: integer)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    21,
                    31
                ],
                "name": "setloglevel",
                "rawdesc": "Set the log level, which controls which of `quarto.log.error()`, `quarto.log.warning()`, `quarto.log.info()` will generate output when called.\n\n* `-2` : (or less) suppress all logging (apart from `quarto.log.temp()`)\n* `-1` : output only error messages\n* `0` : output error and warning messages\n* `1` : output error, warning and info messages\n* `2` : output error, warning, info and debug messages\n* `3` : (or more) output error, warning, info, debug and trace messages\n\nThe initial log level is `0`, unless the following pandoc command-line options are specified:\n\n* `--trace` : `3` if `--verbose` is also specified; otherwise `2`\n* `--verbose` : `1`\n* `--quiet` : `-1`\n",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.setloglevel",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Like `pairs()` but with sorted keys. Keys are converted to strings and sorted\nusing `table.sort(keys, comp)` so by default they're visited in alphabetical\norder.\n\n\n@*param* `list` — List to enumerate\n\n@*param* `comp` — Optional comparison function\n\n@*return* — Iterator function",
                "extends": {
                    "args": [
                        {
                            "desc": "List to enumerate",
                            "finish": [
                                49,
                                31
                            ],
                            "name": "list",
                            "rawdesc": "List to enumerate",
                            "start": [
                                49,
                                27
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "Optional comparison function",
                            "finish": [
                                49,
                                37
                            ],
                            "name": "comp",
                            "rawdesc": "Optional comparison function",
                            "start": [
                                49,
                                33
                            ],
                            "type": "local",
                            "view": "function?"
                        }
                    ],
                    "desc": "Like `pairs()` but with sorted keys. Keys are converted to strings and sorted\nusing `table.sort(keys, comp)` so by default they're visited in alphabetical\norder.\n\n\n@*param* `list` — List to enumerate\n\n@*param* `comp` — Optional comparison function\n\n@*return* — Iterator function",
                    "finish": [
                        49,
                        42
                    ],
                    "rawdesc": "Like `pairs()` but with sorted keys. Keys are converted to strings and sorted\nusing `table.sort(keys, comp)` so by default they're visited in alphabetical\norder.\n",
                    "returns": [
                        {
                            "desc": "Iterator function",
                            "rawdesc": "Iterator function",
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        49,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.spairs(list: table, comp?: function)\n  -> function"
                },
                "file": "quarto/log.lua",
                "finish": [
                    49,
                    26
                ],
                "name": "spairs",
                "rawdesc": "Like `pairs()` but with sorted keys. Keys are converted to strings and sorted\nusing `table.sort(keys, comp)` so by default they're visited in alphabetical\norder.\n",
                "start": [
                    49,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.spairs",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Unconditionally calls `quarto.log.output()` with `(#)` and the supplied arguments.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                28
                            ],
                            "start": [
                                102,
                                25
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "Unconditionally calls `quarto.log.output()` with `(#)` and the supplied arguments.\n",
                    "finish": [
                        102,
                        33
                    ],
                    "rawdesc": "Unconditionally calls `quarto.log.output()` with `(#)` and the supplied arguments.\n",
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.temp(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    102,
                    24
                ],
                "name": "temp",
                "rawdesc": "Unconditionally calls `quarto.log.output()` with `(#)` and the supplied arguments.\n",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.temp",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "If the log level is >= `3`, calls `quarto.log.output()` with `(T)` and the supplied arguments.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                97,
                                29
                            ],
                            "start": [
                                97,
                                26
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "If the log level is >= `3`, calls `quarto.log.output()` with `(T)` and the supplied arguments.\n",
                    "finish": [
                        97,
                        34
                    ],
                    "rawdesc": "If the log level is >= `3`, calls `quarto.log.output()` with `(T)` and the supplied arguments.\n",
                    "start": [
                        97,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.trace(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    97,
                    25
                ],
                "name": "trace",
                "rawdesc": "If the log level is >= `3`, calls `quarto.log.output()` with `(T)` and the supplied arguments.\n",
                "start": [
                    97,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.trace",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns whatever [`pandoc.utils.type()`](https://pandoc.org/lua-filters.html#pandoc.utils.type) returns, modified as follows:\n\n* Spaces are replaced with periods, e.g., `pandoc Row` becomes `pandoc.Row`\n* `Inline` and `Block` are replaced with the corresponding `tag` value, e.g. `Emph` or `Table`\n\n\n@*param* `value` — Value to examine",
                "extends": {
                    "args": [
                        {
                            "desc": "Value to examine",
                            "finish": [
                                38,
                                30
                            ],
                            "name": "value",
                            "rawdesc": "Value to examine",
                            "start": [
                                38,
                                25
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns whatever [`pandoc.utils.type()`](https://pandoc.org/lua-filters.html#pandoc.utils.type) returns, modified as follows:\n\n* Spaces are replaced with periods, e.g., `pandoc Row` becomes `pandoc.Row`\n* `Inline` and `Block` are replaced with the corresponding `tag` value, e.g. `Emph` or `Table`\n\n\n@*param* `value` — Value to examine",
                    "finish": [
                        38,
                        35
                    ],
                    "rawdesc": "Returns whatever [`pandoc.utils.type()`](https://pandoc.org/lua-filters.html#pandoc.utils.type) returns, modified as follows:\n\n* Spaces are replaced with periods, e.g., `pandoc Row` becomes `pandoc.Row`\n* `Inline` and `Block` are replaced with the corresponding `tag` value, e.g. `Emph` or `Table`\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.type(value: any)\n  -> string"
                },
                "file": "quarto/log.lua",
                "finish": [
                    38,
                    24
                ],
                "name": "type",
                "rawdesc": "Returns whatever [`pandoc.utils.type()`](https://pandoc.org/lua-filters.html#pandoc.utils.type) returns, modified as follows:\n\n* Spaces are replaced with periods, e.g., `pandoc Row` becomes `pandoc.Row`\n* `Inline` and `Block` are replaced with the corresponding `tag` value, e.g. `Emph` or `Table`\n",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "If the log level is >= `0`, calls `quarto.log.output()` with `(W)` and the supplied arguments.\n",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                82,
                                31
                            ],
                            "start": [
                                82,
                                28
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "If the log level is >= `0`, calls `quarto.log.output()` with `(W)` and the supplied arguments.\n",
                    "finish": [
                        82,
                        36
                    ],
                    "rawdesc": "If the log level is >= `0`, calls `quarto.log.output()` with `(W)` and the supplied arguments.\n",
                    "start": [
                        82,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.log.warning(...any)"
                },
                "file": "quarto/log.lua",
                "finish": [
                    82,
                    27
                ],
                "name": "warning",
                "rawdesc": "If the log level is >= `0`, calls `quarto.log.output()` with `(W)` and the supplied arguments.\n",
                "start": [
                    82,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.log.warning",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        17
                    ],
                    "start": [
                        2,
                        15
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/paths.lua",
                "finish": [
                    2,
                    12
                ],
                "name": "paths",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.paths",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the path to the `Rscript` file that Quarto itself would use in its knitr engine.\n\n\n@*return* — Path to `Rscript` file",
                "extends": {
                    "args": [],
                    "desc": "Returns the path to the `Rscript` file that Quarto itself would use in its knitr engine.\n\n\n@*return* — Path to `Rscript` file",
                    "finish": [
                        8,
                        35
                    ],
                    "rawdesc": "Returns the path to the `Rscript` file that Quarto itself would use in its knitr engine.\n",
                    "returns": [
                        {
                            "desc": "Path to `Rscript` file",
                            "rawdesc": "Path to `Rscript` file",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        8,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.paths.rscript()\n  -> string"
                },
                "file": "quarto/paths.lua",
                "finish": [
                    8,
                    29
                ],
                "name": "rscript",
                "rawdesc": "Returns the path to the `Rscript` file that Quarto itself would use in its knitr engine.\n",
                "start": [
                    8,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.paths.rscript",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Returns the path to the `TinyTeX` bin directory that `quarto install tinytex` installed to, or nil if not found.\n\n\n@*return* — Path to `TinyTeX` bin directory",
                "extends": {
                    "args": [],
                    "desc": "Returns the path to the `TinyTeX` bin directory that `quarto install tinytex` installed to, or nil if not found.\n\n\n@*return* — Path to `TinyTeX` bin directory",
                    "finish": [
                        14,
                        43
                    ],
                    "rawdesc": "Returns the path to the `TinyTeX` bin directory that `quarto install tinytex` installed to, or nil if not found.\n",
                    "returns": [
                        {
                            "desc": "Path to `TinyTeX` bin directory",
                            "rawdesc": "Path to `TinyTeX` bin directory",
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        14,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.paths.tinytex_bin_dir()\n  -> string|nil"
                },
                "file": "quarto/paths.lua",
                "finish": [
                    14,
                    37
                ],
                "name": "tinytex_bin_dir",
                "rawdesc": "Returns the path to the `TinyTeX` bin directory that `quarto install tinytex` installed to, or nil if not found.\n",
                "start": [
                    14,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.paths.tinytex_bin_dir",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        19
                    ],
                    "start": [
                        2,
                        17
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/project.lua",
                "finish": [
                    2,
                    14
                ],
                "name": "project",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.project",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Full path to current project directory (`nil` if no project)",
                "extends": {
                    "finish": [
                        5,
                        29
                    ],
                    "start": [
                        5,
                        27
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "quarto/project.lua",
                "finish": [
                    5,
                    24
                ],
                "name": "directory",
                "rawdesc": "Full path to current project directory (`nil` if no project)",
                "start": [
                    5,
                    0
                ],
                "type": "setfield",
                "view": "string|nil",
                "visible": "public"
            }
        ],
        "name": "quarto.project.directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Offset (relative path) from the directory of the current file to the root of the project (`nil` if no project)",
                "extends": {
                    "finish": [
                        11,
                        26
                    ],
                    "start": [
                        11,
                        24
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "quarto/project.lua",
                "finish": [
                    11,
                    21
                ],
                "name": "offset",
                "rawdesc": "Offset (relative path) from the directory of the current file to the root of the project (`nil` if no project)",
                "start": [
                    11,
                    0
                ],
                "type": "setfield",
                "view": "string|nil",
                "visible": "public"
            }
        ],
        "name": "quarto.project.offset",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Full path to current project output directory (`nil` if no project)",
                "extends": {
                    "finish": [
                        8,
                        36
                    ],
                    "start": [
                        8,
                        34
                    ],
                    "type": "string",
                    "view": "string"
                },
                "file": "quarto/project.lua",
                "finish": [
                    8,
                    31
                ],
                "name": "output_directory",
                "rawdesc": "Full path to current project output directory (`nil` if no project)",
                "start": [
                    8,
                    0
                ],
                "type": "setfield",
                "view": "string|nil",
                "visible": "public"
            }
        ],
        "name": "quarto.project.output_directory",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "List of currently active project profiles",
                "extends": {
                    "finish": [
                        14,
                        39
                    ],
                    "start": [
                        14,
                        26
                    ],
                    "type": "select",
                    "view": "pandoc.List"
                },
                "file": "quarto/project.lua",
                "finish": [
                    14,
                    23
                ],
                "name": "profiles",
                "rawdesc": "List of currently active project profiles",
                "start": [
                    14,
                    0
                ],
                "type": "setfield",
                "view": "pandoc.List",
                "visible": "public"
            }
        ],
        "name": "quarto.project.profiles",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        21
                    ],
                    "start": [
                        2,
                        19
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/shortcode.lua",
                "finish": [
                    2,
                    16
                ],
                "name": "shortcode",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.shortcode",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Produce output for a shortcode that failed to execute properly.\n\nThis is useful for shortcode developers to provide error output\nconsistent with how Quarto shortcodes provide error output.\n\n\n@*param* `name` — Name of the shortcode\n\n@*param* `message_or_args` — shortcode args or optional error message to display\n\n@*param* `context` — context of the shortcode\n\n```lua\ncontext:\n    | \"block\"\n    | \"inline\"\n    | \"text\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Name of the shortcode",
                            "finish": [
                                22,
                                43
                            ],
                            "name": "name",
                            "rawdesc": "Name of the shortcode",
                            "start": [
                                22,
                                39
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "shortcode args or optional error message to display",
                            "finish": [
                                22,
                                60
                            ],
                            "name": "message_or_args",
                            "rawdesc": "shortcode args or optional error message to display",
                            "start": [
                                22,
                                45
                            ],
                            "type": "local",
                            "view": "string|string[]"
                        },
                        {
                            "desc": "context of the shortcode",
                            "finish": [
                                22,
                                69
                            ],
                            "name": "context",
                            "rawdesc": "context of the shortcode",
                            "start": [
                                22,
                                62
                            ],
                            "type": "local",
                            "view": "\"block\"|\"inline\"|\"text\""
                        }
                    ],
                    "desc": "Produce output for a shortcode that failed to execute properly.\n\nThis is useful for shortcode developers to provide error output\nconsistent with how Quarto shortcodes provide error output.\n\n\n@*param* `name` — Name of the shortcode\n\n@*param* `message_or_args` — shortcode args or optional error message to display\n\n@*param* `context` — context of the shortcode\n\n```lua\ncontext:\n    | \"block\"\n    | \"inline\"\n    | \"text\"\n```",
                    "finish": [
                        22,
                        74
                    ],
                    "rawdesc": "Produce output for a shortcode that failed to execute properly.\n\nThis is useful for shortcode developers to provide error output\nconsistent with how Quarto shortcodes provide error output.\n\n\n```lua\ncontext:\n    | \"block\"\n    | \"inline\"\n    | \"text\"\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|pandoc.Blocks|pandoc.Inlines"
                        }
                    ],
                    "start": [
                        22,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.shortcode.error_output(name: string, message_or_args: string|string[], context: \"block\"|\"inline\"|\"text\")\n  -> string|pandoc.Blocks|pandoc.Inlines"
                },
                "file": "quarto/shortcode.lua",
                "finish": [
                    22,
                    38
                ],
                "name": "error_output",
                "rawdesc": "Produce output for a shortcode that failed to execute properly.\n\nThis is useful for shortcode developers to provide error output\nconsistent with how Quarto shortcodes provide error output.\n\n\n```lua\ncontext:\n    | \"block\"\n    | \"inline\"\n    | \"text\"\n```",
                "start": [
                    22,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.shortcode.error_output",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Read the `n`-th shortcode argument from the passed `args` table.\n\n\n@*param* `args` — arguments from the handler\n\n@*param* `n` — index of the argument to read (default: 1)",
                "extends": {
                    "args": [
                        {
                            "desc": "arguments from the handler",
                            "finish": [
                                10,
                                39
                            ],
                            "name": "args",
                            "rawdesc": "arguments from the handler",
                            "start": [
                                10,
                                35
                            ],
                            "type": "local",
                            "view": "string[]"
                        },
                        {
                            "desc": "index of the argument to read (default: 1)",
                            "finish": [
                                10,
                                42
                            ],
                            "name": "n",
                            "rawdesc": "index of the argument to read (default: 1)",
                            "start": [
                                10,
                                41
                            ],
                            "type": "local",
                            "view": "number|nil"
                        }
                    ],
                    "desc": "Read the `n`-th shortcode argument from the passed `args` table.\n\n\n@*param* `args` — arguments from the handler\n\n@*param* `n` — index of the argument to read (default: 1)",
                    "finish": [
                        10,
                        47
                    ],
                    "rawdesc": "Read the `n`-th shortcode argument from the passed `args` table.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|nil"
                        }
                    ],
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.shortcode.read_arg(args: string[], n: number|nil)\n  -> string|nil"
                },
                "file": "quarto/shortcode.lua",
                "finish": [
                    10,
                    34
                ],
                "name": "read_arg",
                "rawdesc": "Read the `n`-th shortcode argument from the passed `args` table.\n",
                "start": [
                    10,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.shortcode.read_arg",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        2,
                        17
                    ],
                    "start": [
                        2,
                        15
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "quarto/utils.lua",
                "finish": [
                    2,
                    12
                ],
                "name": "utils",
                "start": [
                    2,
                    0
                ],
                "type": "setfield",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "quarto.utils",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "Dump a text representation of the passed `value` to stdout.\n\nNote that you should use `quarto.log.output()` instead of this function.\n\n\n@*param* `value` — Value to dump",
                "extends": {
                    "args": [
                        {
                            "desc": "Value to dump",
                            "finish": [
                                11,
                                32
                            ],
                            "name": "value",
                            "rawdesc": "Value to dump",
                            "start": [
                                11,
                                27
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Dump a text representation of the passed `value` to stdout.\n\nNote that you should use `quarto.log.output()` instead of this function.\n\n\n@*param* `value` — Value to dump",
                    "finish": [
                        11,
                        37
                    ],
                    "rawdesc": "Dump a text representation of the passed `value` to stdout.\n\nNote that you should use `quarto.log.output()` instead of this function.\n",
                    "start": [
                        11,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.utils.dump(value: any)"
                },
                "file": "quarto/utils.lua",
                "finish": [
                    11,
                    26
                ],
                "name": "dump",
                "rawdesc": "Dump a text representation of the passed `value` to stdout.\n\nNote that you should use `quarto.log.output()` instead of this function.\n",
                "start": [
                    11,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.utils.dump",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Compute the absolute path to a file that is installed alongside the Lua script. \n\nThis is useful for internal resources that your filter needs but should \nnot be visible to the user.\n\n\n@*param* `path` — Path of file relative to the Lua script",
                "extends": {
                    "args": [
                        {
                            "desc": "Path of file relative to the Lua script",
                            "finish": [
                                21,
                                39
                            ],
                            "name": "path",
                            "rawdesc": "Path of file relative to the Lua script",
                            "start": [
                                21,
                                35
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Compute the absolute path to a file that is installed alongside the Lua script. \n\nThis is useful for internal resources that your filter needs but should \nnot be visible to the user.\n\n\n@*param* `path` — Path of file relative to the Lua script",
                    "finish": [
                        21,
                        44
                    ],
                    "rawdesc": "Compute the absolute path to a file that is installed alongside the Lua script. \n\nThis is useful for internal resources that your filter needs but should \nnot be visible to the user.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.utils.resolve_path(path: string)\n  -> string"
                },
                "file": "quarto/utils.lua",
                "finish": [
                    21,
                    34
                ],
                "name": "resolve_path",
                "rawdesc": "Compute the absolute path to a file that is installed alongside the Lua script. \n\nThis is useful for internal resources that your filter needs but should \nnot be visible to the user.\n",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.utils.resolve_path",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts a string to a list of Pandoc Blocks, processing any Quarto custom\nsyntax in the string.\n\n\n@*param* `path` — String to be converted",
                "extends": {
                    "args": [
                        {
                            "desc": "String to be converted",
                            "finish": [
                                38,
                                43
                            ],
                            "name": "path",
                            "rawdesc": "String to be converted",
                            "start": [
                                38,
                                39
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Converts a string to a list of Pandoc Blocks, processing any Quarto custom\nsyntax in the string.\n\n\n@*param* `path` — String to be converted",
                    "finish": [
                        38,
                        48
                    ],
                    "rawdesc": "Converts a string to a list of Pandoc Blocks, processing any Quarto custom\nsyntax in the string.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Blocks"
                        }
                    ],
                    "start": [
                        38,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.utils.string_to_blocks(path: string)\n  -> pandoc.Blocks"
                },
                "file": "quarto/utils.lua",
                "finish": [
                    38,
                    38
                ],
                "name": "string_to_blocks",
                "rawdesc": "Converts a string to a list of Pandoc Blocks, processing any Quarto custom\nsyntax in the string.\n",
                "start": [
                    38,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.utils.string_to_blocks",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "Converts a string to a list of Pandoc Inlines, processing any Quarto custom\nsyntax in the string.\n\n\n@*param* `path` — String to be converted\n\n@*param* `sep` — separator to be used between parsed blocks (default is pandoc.LineBreak)",
                "extends": {
                    "args": [
                        {
                            "desc": "String to be converted",
                            "finish": [
                                30,
                                44
                            ],
                            "name": "path",
                            "rawdesc": "String to be converted",
                            "start": [
                                30,
                                40
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "separator to be used between parsed blocks (default is pandoc.LineBreak)",
                            "finish": [
                                30,
                                49
                            ],
                            "name": "sep",
                            "rawdesc": "separator to be used between parsed blocks (default is pandoc.LineBreak)",
                            "start": [
                                30,
                                46
                            ],
                            "type": "local",
                            "view": "pandoc.Inline|nil"
                        }
                    ],
                    "desc": "Converts a string to a list of Pandoc Inlines, processing any Quarto custom\nsyntax in the string.\n\n\n@*param* `path` — String to be converted\n\n@*param* `sep` — separator to be used between parsed blocks (default is pandoc.LineBreak)",
                    "finish": [
                        30,
                        54
                    ],
                    "rawdesc": "Converts a string to a list of Pandoc Inlines, processing any Quarto custom\nsyntax in the string.\n",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "pandoc.Inlines"
                        }
                    ],
                    "start": [
                        30,
                        0
                    ],
                    "type": "function",
                    "view": "function quarto.utils.string_to_inlines(path: string, sep: pandoc.Inline|nil)\n  -> pandoc.Inlines"
                },
                "file": "quarto/utils.lua",
                "finish": [
                    30,
                    39
                ],
                "name": "string_to_inlines",
                "rawdesc": "Converts a string to a list of Pandoc Inlines, processing any Quarto custom\nsyntax in the string.\n",
                "start": [
                    30,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "quarto.utils.string_to_inlines",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nquote_type:\n    | 'SingleQuote'\n    | 'DoubleQuote'\n```",
                "finish": [
                    282,
                    48
                ],
                "rawdesc": "```lua\nquote_type:\n    | 'SingleQuote'\n    | 'DoubleQuote'\n```",
                "start": [
                    282,
                    10
                ],
                "type": "doc.alias",
                "view": "'DoubleQuote'|'SingleQuote'"
            }
        ],
        "fields": [],
        "name": "quote_type",
        "type": "type",
        "view": "quote_type"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                245,
                                20
                            ],
                            "name": "v1",
                            "start": [
                                245,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                245,
                                24
                            ],
                            "name": "v2",
                            "start": [
                                245,
                                22
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "finish": [
                        245,
                        29
                    ],
                    "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": [
                        245,
                        0
                    ],
                    "type": "function",
                    "view": "function rawequal(v1: any, v2: any)\n  -> boolean"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    245,
                    17
                ],
                "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                "start": [
                    245,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawequal",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                256,
                                21
                            ],
                            "name": "table",
                            "start": [
                                256,
                                16
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                256,
                                28
                            ],
                            "name": "index",
                            "start": [
                                256,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "finish": [
                        256,
                        33
                    ],
                    "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        256,
                        0
                    ],
                    "type": "function",
                    "view": "function rawget(table: table, index: any)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    256,
                    15
                ],
                "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                "start": [
                    256,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawget",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                266,
                                17
                            ],
                            "name": "v",
                            "start": [
                                266,
                                16
                            ],
                            "type": "local",
                            "view": "string|table"
                        }
                    ],
                    "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "finish": [
                        266,
                        22
                    ],
                    "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "returns": [
                        {
                            "name": "len",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        266,
                        0
                    ],
                    "type": "function",
                    "view": "function rawlen(v: string|table)\n  -> len: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    266,
                    15
                ],
                "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                "start": [
                    266,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawlen",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                279,
                                21
                            ],
                            "name": "table",
                            "start": [
                                279,
                                16
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                279,
                                28
                            ],
                            "name": "index",
                            "start": [
                                279,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                279,
                                35
                            ],
                            "name": "value",
                            "start": [
                                279,
                                30
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "finish": [
                        279,
                        40
                    ],
                    "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        279,
                        0
                    ],
                    "type": "function",
                    "view": "function rawset(table: table, index: any, value: any)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    279,
                    15
                ],
                "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                "start": [
                    279,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "rawset",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": {
                    "finish": [
                        4,
                        7
                    ],
                    "start": [
                        4,
                        5
                    ],
                    "type": "table",
                    "view": "table"
                },
                "file": "re.lua",
                "finish": [
                    4,
                    2
                ],
                "start": [
                    4,
                    0
                ],
                "type": "setglobal",
                "view": "table",
                "visible": "public"
            }
        ],
        "name": "re",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nreadmode:\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "finish": [
                    177,
                    8
                ],
                "rawdesc": "```lua\nreadmode:\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                "start": [
                    173,
                    10
                ],
                "type": "doc.alias",
                "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
            }
        ],
        "fields": [],
        "name": "readmode",
        "type": "type",
        "view": "readmode"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                10,
                                24
                            ],
                            "name": "modname",
                            "start": [
                                10,
                                17
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "finish": [
                        10,
                        29
                    ],
                    "rawdesc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        },
                        {
                            "name": "loaderdata",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": [
                        10,
                        0
                    ],
                    "type": "function",
                    "view": "function require(modname: string)\n  -> unknown\n  2. loaderdata: unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/package.lua",
                "finish": [
                    10,
                    16
                ],
                "rawdesc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                "start": [
                    10,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "require",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\nseekwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "finish": [
                    227,
                    10
                ],
                "rawdesc": "```lua\nseekwhence:\n    | \"set\" -- Base is beginning of the file.\n   -> \"cur\" -- Base is current position.\n    | \"end\" -- Base is end of file.\n```",
                "start": [
                    224,
                    10
                ],
                "type": "doc.alias",
                "view": "\"cur\"|\"end\"|\"set\""
            }
        ],
        "fields": [],
        "name": "seekwhence",
        "type": "type",
        "view": "seekwhence"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                290,
                                21
                            ],
                            "name": "index",
                            "start": [
                                290,
                                16
                            ],
                            "type": "local",
                            "view": "integer|\"#\""
                        },
                        {
                            "finish": [
                                290,
                                26
                            ],
                            "start": [
                                290,
                                23
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "finish": [
                        290,
                        31
                    ],
                    "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        290,
                        0
                    ],
                    "type": "function",
                    "view": "function select(index: integer|\"#\", ...any)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    290,
                    15
                ],
                "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                "start": [
                    290,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "select",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                301,
                                18
                            ],
                            "name": "f",
                            "start": [
                                301,
                                17
                            ],
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                301,
                                25
                            ],
                            "name": "table",
                            "start": [
                                301,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "finish": [
                        301,
                        30
                    ],
                    "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": [
                        301,
                        0
                    ],
                    "type": "function",
                    "view": "function setfenv(f: integer|fun(...any):...unknown, table: table)\n  -> function"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    301,
                    16
                ],
                "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                "start": [
                    301,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "setfenv",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                347,
                                27
                            ],
                            "name": "table",
                            "start": [
                                347,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                347,
                                38
                            ],
                            "name": "metatable",
                            "start": [
                                347,
                                29
                            ],
                            "type": "local",
                            "view": "(table|metatable)?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "finish": [
                        347,
                        43
                    ],
                    "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        347,
                        0
                    ],
                    "type": "function",
                    "view": "function setmetatable(table: table, metatable?: table|metatable)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    347,
                    21
                ],
                "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                "start": [
                    347,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "setmetatable",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "finish": [
                        8,
                        11
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "start": [
                        8,
                        9
                    ],
                    "type": "table",
                    "view": "stringlib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    8,
                    6
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "stringlib",
                "visible": "public"
            }
        ],
        "name": "string",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                        "finish": [
                            12,
                            27
                        ],
                        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                        "start": [
                            12,
                            18
                        ],
                        "type": "doc.extends.name",
                        "view": "stringlib"
                    }
                ],
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    12,
                    27
                ],
                "start": [
                    12,
                    10
                ],
                "type": "doc.class",
                "view": "string",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                39
                            ],
                            "name": "init",
                            "start": [
                                79,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        44
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number, init?: integer)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string",
        "type": "type",
        "view": "string"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.byte",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.char",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.dump",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.find",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.format",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                39
                            ],
                            "name": "init",
                            "start": [
                                79,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        44
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number, init?: integer)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.gmatch",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.gsub",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.len",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.lower",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.match",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.pack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.packsize",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.rep",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.reverse",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.sub",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.unpack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "string.upper",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    7,
                    19
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "stringlib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                20,
                                22
                            ],
                            "name": "s",
                            "start": [
                                20,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                20,
                                25
                            ],
                            "name": "i",
                            "start": [
                                20,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                20,
                                28
                            ],
                            "name": "j",
                            "start": [
                                20,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": [
                        20,
                        33
                    ],
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        20,
                        0
                    ],
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    20,
                    20
                ],
                "name": "byte",
                "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                "start": [
                    20,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                31,
                                25
                            ],
                            "name": "byte",
                            "start": [
                                31,
                                21
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                31,
                                30
                            ],
                            "start": [
                                31,
                                27
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": [
                        31,
                        35
                    ],
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        31,
                        0
                    ],
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    31,
                    20
                ],
                "name": "char",
                "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                "start": [
                    31,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                42,
                                22
                            ],
                            "name": "f",
                            "start": [
                                42,
                                21
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                42,
                                29
                            ],
                            "name": "strip",
                            "start": [
                                42,
                                24
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": [
                        42,
                        34
                    ],
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        42,
                        0
                    ],
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    42,
                    20
                ],
                "name": "dump",
                "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                "start": [
                    42,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                22
                            ],
                            "name": "s",
                            "start": [
                                57,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                57,
                                37
                            ],
                            "name": "init",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                44
                            ],
                            "name": "plain",
                            "start": [
                                57,
                                39
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": [
                        57,
                        49
                    ],
                    "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    57,
                    20
                ],
                "name": "find",
                "rawdesc": "\nMiss locale <string.find>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                68,
                                24
                            ],
                            "name": "s",
                            "start": [
                                68,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                68,
                                29
                            ],
                            "start": [
                                68,
                                26
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": [
                        68,
                        34
                    ],
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        68,
                        0
                    ],
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    68,
                    22
                ],
                "name": "format",
                "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                "start": [
                    68,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                79,
                                24
                            ],
                            "name": "s",
                            "start": [
                                79,
                                23
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                33
                            ],
                            "name": "pattern",
                            "start": [
                                79,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                79,
                                39
                            ],
                            "name": "init",
                            "start": [
                                79,
                                35
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": [
                        79,
                        44
                    ],
                    "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": [
                        79,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number, init?: integer)\n  -> fun():string, ...unknown"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    79,
                    22
                ],
                "name": "gmatch",
                "rawdesc": "\nMiss locale <string.gmatch>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                "start": [
                    79,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                92,
                                22
                            ],
                            "name": "s",
                            "start": [
                                92,
                                21
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                31
                            ],
                            "name": "pattern",
                            "start": [
                                92,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                92,
                                37
                            ],
                            "name": "repl",
                            "start": [
                                92,
                                33
                            ],
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": [
                                92,
                                40
                            ],
                            "name": "n",
                            "start": [
                                92,
                                39
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": [
                        92,
                        45
                    ],
                    "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        92,
                        0
                    ],
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    92,
                    20
                ],
                "name": "gsub",
                "rawdesc": "\nMiss locale <string.gsub>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                "start": [
                    92,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                102,
                                21
                            ],
                            "name": "s",
                            "start": [
                                102,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": [
                        102,
                        26
                    ],
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        102,
                        0
                    ],
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    102,
                    19
                ],
                "name": "len",
                "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                "start": [
                    102,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                112,
                                23
                            ],
                            "name": "s",
                            "start": [
                                112,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": [
                        112,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        112,
                        0
                    ],
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    112,
                    21
                ],
                "name": "lower",
                "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                "start": [
                    112,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                124,
                                23
                            ],
                            "name": "s",
                            "start": [
                                124,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                32
                            ],
                            "name": "pattern",
                            "start": [
                                124,
                                25
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                124,
                                38
                            ],
                            "name": "init",
                            "start": [
                                124,
                                34
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": [
                        124,
                        43
                    ],
                    "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        124,
                        0
                    ],
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    124,
                    21
                ],
                "name": "match",
                "rawdesc": "\nMiss locale <string.match>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                "start": [
                    124,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                138,
                                24
                            ],
                            "name": "fmt",
                            "start": [
                                138,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                138,
                                28
                            ],
                            "name": "v1",
                            "start": [
                                138,
                                26
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                138,
                                32
                            ],
                            "name": "v2",
                            "start": [
                                138,
                                30
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": [
                                138,
                                37
                            ],
                            "start": [
                                138,
                                34
                            ],
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": [
                        138,
                        42
                    ],
                    "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        138,
                        0
                    ],
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    138,
                    20
                ],
                "name": "pack",
                "rawdesc": "\nMiss locale <string.pack>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                "start": [
                    138,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "fmt",
                            "start": [
                                149,
                                25
                            ],
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": [
                        149,
                        33
                    ],
                    "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    149,
                    24
                ],
                "name": "packsize",
                "rawdesc": "\nMiss locale <string.packsize>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                161,
                                21
                            ],
                            "name": "s",
                            "start": [
                                161,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                161,
                                24
                            ],
                            "name": "n",
                            "start": [
                                161,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                161,
                                29
                            ],
                            "name": "sep",
                            "start": [
                                161,
                                26
                            ],
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": [
                        161,
                        34
                    ],
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        161,
                        0
                    ],
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    161,
                    19
                ],
                "name": "rep",
                "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                "start": [
                    161,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                171,
                                25
                            ],
                            "name": "s",
                            "start": [
                                171,
                                24
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": [
                        171,
                        30
                    ],
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        171,
                        0
                    ],
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    171,
                    23
                ],
                "name": "reverse",
                "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                "start": [
                    171,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                183,
                                21
                            ],
                            "name": "s",
                            "start": [
                                183,
                                20
                            ],
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": [
                                183,
                                24
                            ],
                            "name": "i",
                            "start": [
                                183,
                                23
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                183,
                                27
                            ],
                            "name": "j",
                            "start": [
                                183,
                                26
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": [
                        183,
                        32
                    ],
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        183,
                        0
                    ],
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    183,
                    19
                ],
                "name": "sub",
                "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                "start": [
                    183,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                196,
                                26
                            ],
                            "name": "fmt",
                            "start": [
                                196,
                                23
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                29
                            ],
                            "name": "s",
                            "start": [
                                196,
                                28
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                196,
                                34
                            ],
                            "name": "pos",
                            "start": [
                                196,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": [
                        196,
                        39
                    ],
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        196,
                        0
                    ],
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    196,
                    22
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                "start": [
                    196,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                206,
                                23
                            ],
                            "name": "s",
                            "start": [
                                206,
                                22
                            ],
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": [
                        206,
                        28
                    ],
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        206,
                        0
                    ],
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/string.lua",
                "finish": [
                    206,
                    21
                ],
                "name": "upper",
                "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                "start": [
                    206,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "stringlib",
        "type": "type",
        "view": "stringlib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "fields": [
                            {
                                "finish": [
                                    11,
                                    31
                                ],
                                "name": {
                                    "finish": [
                                        11,
                                        27
                                    ],
                                    "start": [
                                        11,
                                        26
                                    ],
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": [
                                                11,
                                                27
                                            ],
                                            "start": [
                                                11,
                                                26
                                            ],
                                            "type": "doc.generic.name",
                                            "view": "<K>"
                                        }
                                    ],
                                    "view": "<K>"
                                },
                                "start": [
                                    11,
                                    26
                                ],
                                "type": "doc.type.field",
                                "view": "<V>"
                            }
                        ],
                        "finish": [
                            11,
                            33
                        ],
                        "start": [
                            11,
                            23
                        ],
                        "type": "doc.type.table",
                        "view": "{ [<K>]: <V> }"
                    }
                ],
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    11,
                    33
                ],
                "start": [
                    11,
                    10
                ],
                "type": "doc.class",
                "view": "table",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "table",
        "type": "type",
        "view": "table"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "finish": [
                        8,
                        10
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "start": [
                        8,
                        8
                    ],
                    "type": "table",
                    "view": "tablelib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    8,
                    5
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "start": [
                    8,
                    0
                ],
                "type": "setglobal",
                "view": "tablelib",
                "visible": "public"
            }
        ],
        "name": "table",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "name": "list",
                            "start": [
                                21,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                21,
                                31
                            ],
                            "name": "sep",
                            "start": [
                                21,
                                28
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                21,
                                34
                            ],
                            "name": "i",
                            "start": [
                                21,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                21,
                                37
                            ],
                            "name": "j",
                            "start": [
                                21,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "finish": [
                        21,
                        42
                    ],
                    "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    21,
                    21
                ],
                "name": "concat",
                "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.concat",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                136,
                                27
                            ],
                            "name": "list",
                            "start": [
                                136,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                136,
                                37
                            ],
                            "name": "callback",
                            "start": [
                                136,
                                29
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "finish": [
                        136,
                        42
                    ],
                    "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        136,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    136,
                    22
                ],
                "name": "foreach",
                "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "start": [
                    136,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.foreach",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "list",
                            "start": [
                                149,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                149,
                                38
                            ],
                            "name": "callback",
                            "start": [
                                149,
                                30
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "finish": [
                        149,
                        43
                    ],
                    "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    149,
                    23
                ],
                "name": "foreachi",
                "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.foreachi",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                162,
                                24
                            ],
                            "name": "list",
                            "start": [
                                162,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "finish": [
                        162,
                        29
                    ],
                    "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    162,
                    19
                ],
                "name": "getn",
                "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "start": [
                    162,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.getn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                26
                            ],
                            "name": "list",
                            "start": [
                                32,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                32,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                32,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                32,
                                38
                            ],
                            "name": "value",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "finish": [
                        32,
                        43
                    ],
                    "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    32,
                    21
                ],
                "name": "insert",
                "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.insert",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                25
                            ],
                            "name": "table",
                            "start": [
                                43,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "finish": [
                        43,
                        30
                    ],
                    "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    43,
                    19
                ],
                "name": "maxn",
                "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.maxn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                22
                            ],
                            "name": "a1",
                            "start": [
                                63,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                63,
                                25
                            ],
                            "name": "f",
                            "start": [
                                63,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                28
                            ],
                            "name": "e",
                            "start": [
                                63,
                                27
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                31
                            ],
                            "name": "t",
                            "start": [
                                63,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                35
                            ],
                            "name": "a2",
                            "start": [
                                63,
                                33
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "finish": [
                        63,
                        40
                    ],
                    "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    63,
                    19
                ],
                "name": "move",
                "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.move",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                23
                            ],
                            "start": [
                                73,
                                20
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "finish": [
                        73,
                        28
                    ],
                    "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    73,
                    19
                ],
                "name": "pack",
                "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.pack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "list",
                            "start": [
                                83,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                83,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    83,
                    21
                ],
                "name": "remove",
                "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.remove",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                24
                            ],
                            "name": "list",
                            "start": [
                                93,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": [
                                93,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                93,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "finish": [
                        93,
                        35
                    ],
                    "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    93,
                    19
                ],
                "name": "sort",
                "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.sort",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                123,
                                26
                            ],
                            "name": "list",
                            "start": [
                                123,
                                22
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }"
                        },
                        {
                            "finish": [
                                123,
                                29
                            ],
                            "name": "i",
                            "start": [
                                123,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                123,
                                32
                            ],
                            "name": "j",
                            "start": [
                                123,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "finish": [
                        123,
                        37
                    ],
                    "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T10>"
                        }
                    ],
                    "start": [
                        123,
                        0
                    ],
                    "type": "function",
                    "view": "function table.unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }, i?: integer, j?: integer)\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>\n 10. <T10>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    123,
                    21
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "start": [
                    123,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "table.unpack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "desc": "```lua\ntable_alignment:\n    | 'AlignDefault'\n    | 'AlignLeft'\n    | 'AlignCenter'\n    | 'AlightRight'\n```",
                "finish": [
                    2,
                    80
                ],
                "rawdesc": "```lua\ntable_alignment:\n    | 'AlignDefault'\n    | 'AlignLeft'\n    | 'AlignCenter'\n    | 'AlightRight'\n```",
                "start": [
                    2,
                    10
                ],
                "type": "doc.alias",
                "view": "'AlightRight'|'AlignCenter'|'AlignDefault'|'AlignLeft'"
            }
        ],
        "fields": [],
        "name": "table_alignment",
        "type": "type",
        "view": "table_alignment"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    7,
                    18
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                "start": [
                    7,
                    10
                ],
                "type": "doc.class",
                "view": "tablelib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                21,
                                26
                            ],
                            "name": "list",
                            "start": [
                                21,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                21,
                                31
                            ],
                            "name": "sep",
                            "start": [
                                21,
                                28
                            ],
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": [
                                21,
                                34
                            ],
                            "name": "i",
                            "start": [
                                21,
                                33
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                21,
                                37
                            ],
                            "name": "j",
                            "start": [
                                21,
                                36
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "finish": [
                        21,
                        42
                    ],
                    "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        21,
                        0
                    ],
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    21,
                    21
                ],
                "name": "concat",
                "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                "start": [
                    21,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                136,
                                27
                            ],
                            "name": "list",
                            "start": [
                                136,
                                23
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                136,
                                37
                            ],
                            "name": "callback",
                            "start": [
                                136,
                                29
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "finish": [
                        136,
                        42
                    ],
                    "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        136,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    136,
                    22
                ],
                "name": "foreach",
                "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                "start": [
                    136,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                149,
                                28
                            ],
                            "name": "list",
                            "start": [
                                149,
                                24
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                149,
                                38
                            ],
                            "name": "callback",
                            "start": [
                                149,
                                30
                            ],
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "finish": [
                        149,
                        43
                    ],
                    "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": [
                        149,
                        0
                    ],
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    149,
                    23
                ],
                "name": "foreachi",
                "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                "start": [
                    149,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                162,
                                24
                            ],
                            "name": "list",
                            "start": [
                                162,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "finish": [
                        162,
                        29
                    ],
                    "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        162,
                        0
                    ],
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    162,
                    19
                ],
                "name": "getn",
                "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                "start": [
                    162,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                32,
                                26
                            ],
                            "name": "list",
                            "start": [
                                32,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                32,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                32,
                                28
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                32,
                                38
                            ],
                            "name": "value",
                            "start": [
                                32,
                                33
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "finish": [
                        32,
                        43
                    ],
                    "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "start": [
                        32,
                        0
                    ],
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    32,
                    21
                ],
                "name": "insert",
                "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                "start": [
                    32,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                25
                            ],
                            "name": "table",
                            "start": [
                                43,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "finish": [
                        43,
                        30
                    ],
                    "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    43,
                    19
                ],
                "name": "maxn",
                "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                63,
                                22
                            ],
                            "name": "a1",
                            "start": [
                                63,
                                20
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                63,
                                25
                            ],
                            "name": "f",
                            "start": [
                                63,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                28
                            ],
                            "name": "e",
                            "start": [
                                63,
                                27
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                31
                            ],
                            "name": "t",
                            "start": [
                                63,
                                30
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                63,
                                35
                            ],
                            "name": "a2",
                            "start": [
                                63,
                                33
                            ],
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "finish": [
                        63,
                        40
                    ],
                    "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        63,
                        0
                    ],
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    63,
                    19
                ],
                "name": "move",
                "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                "start": [
                    63,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                73,
                                23
                            ],
                            "start": [
                                73,
                                20
                            ],
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "finish": [
                        73,
                        28
                    ],
                    "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": [
                        73,
                        0
                    ],
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    73,
                    19
                ],
                "name": "pack",
                "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                "start": [
                    73,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                26
                            ],
                            "name": "list",
                            "start": [
                                83,
                                22
                            ],
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": [
                                83,
                                31
                            ],
                            "name": "pos",
                            "start": [
                                83,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "finish": [
                        83,
                        36
                    ],
                    "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    83,
                    21
                ],
                "name": "remove",
                "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                93,
                                24
                            ],
                            "name": "list",
                            "start": [
                                93,
                                20
                            ],
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": [
                                93,
                                30
                            ],
                            "name": "comp",
                            "start": [
                                93,
                                26
                            ],
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "finish": [
                        93,
                        35
                    ],
                    "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "start": [
                        93,
                        0
                    ],
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    93,
                    19
                ],
                "name": "sort",
                "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                "start": [
                    93,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                123,
                                26
                            ],
                            "name": "list",
                            "start": [
                                123,
                                22
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }"
                        },
                        {
                            "finish": [
                                123,
                                29
                            ],
                            "name": "i",
                            "start": [
                                123,
                                28
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                123,
                                32
                            ],
                            "name": "j",
                            "start": [
                                123,
                                31
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "finish": [
                        123,
                        37
                    ],
                    "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T10>"
                        }
                    ],
                    "start": [
                        123,
                        0
                    ],
                    "type": "function",
                    "view": "function table.unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }, i?: integer, j?: integer)\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>\n 10. <T10>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/table.lua",
                "finish": [
                    123,
                    21
                ],
                "name": "unpack",
                "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                "start": [
                    123,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "tablelib",
        "type": "type",
        "view": "tablelib"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    10,
                    16
                ],
                "start": [
                    10,
                    10
                ],
                "type": "doc.class",
                "view": "thread",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "thread",
        "type": "type",
        "view": "thread"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                361,
                                19
                            ],
                            "name": "e",
                            "start": [
                                361,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "finish": [
                        361,
                        24
                    ],
                    "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number?"
                        }
                    ],
                    "start": [
                        361,
                        0
                    ],
                    "type": "function",
                    "view": "function tonumber(e: any)\n  -> number?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    361,
                    17
                ],
                "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                "start": [
                    361,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "tonumber",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                376,
                                19
                            ],
                            "name": "v",
                            "start": [
                                376,
                                18
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "finish": [
                        376,
                        24
                    ],
                    "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        376,
                        0
                    ],
                    "type": "function",
                    "view": "function tostring(v: any)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    376,
                    17
                ],
                "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                "start": [
                    376,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "tostring",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "extends": [
                    {
                        "finish": [
                            6,
                            23
                        ],
                        "start": [
                            6,
                            16
                        ],
                        "type": "doc.extends.name",
                        "view": "boolean"
                    }
                ],
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    6,
                    23
                ],
                "start": [
                    6,
                    10
                ],
                "type": "doc.class",
                "view": "true",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "true",
        "type": "type",
        "view": "true"
    },
    {
        "defines": [
            {
                "desc": "```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "finish": [
                    386,
                    15
                ],
                "rawdesc": "```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "start": [
                    378,
                    10
                ],
                "type": "doc.alias",
                "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
            }
        ],
        "fields": [],
        "name": "type",
        "type": "type",
        "view": "type"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                397,
                                15
                            ],
                            "name": "v",
                            "start": [
                                397,
                                14
                            ],
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "finish": [
                        397,
                        20
                    ],
                    "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "returns": [
                        {
                            "name": "type",
                            "type": "function.return",
                            "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                        }
                    ],
                    "start": [
                        397,
                        0
                    ],
                    "type": "function",
                    "view": "function type(v: any)\n  -> type: \"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    397,
                    13
                ],
                "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                "start": [
                    397,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "type",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    2,
                    17
                ],
                "start": [
                    2,
                    10
                ],
                "type": "doc.class",
                "view": "unknown",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "unknown",
        "type": "type",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": true,
                "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                457,
                                20
                            ],
                            "name": "list",
                            "start": [
                                457,
                                16
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }"
                        },
                        {
                            "finish": [
                                457,
                                23
                            ],
                            "name": "i",
                            "start": [
                                457,
                                22
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                457,
                                26
                            ],
                            "name": "j",
                            "start": [
                                457,
                                25
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "finish": [
                        457,
                        31
                    ],
                    "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T10>"
                        }
                    ],
                    "start": [
                        457,
                        0
                    ],
                    "type": "function",
                    "view": "function unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9>, [10]: <T10> }, i?: integer, j?: integer)\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>\n 10. <T10>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    457,
                    15
                ],
                "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                "start": [
                    457,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": true,
                "extends": {
                    "args": [
                        {
                            "finish": [
                                464,
                                20
                            ],
                            "name": "list",
                            "start": [
                                464,
                                16
                            ],
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> }"
                        }
                    ],
                    "finish": [
                        464,
                        25
                    ],
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        }
                    ],
                    "start": [
                        464,
                        0
                    ],
                    "type": "function",
                    "view": "function unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> })\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    464,
                    15
                ],
                "start": [
                    464,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "unpack",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/builtin.lua",
                "finish": [
                    13,
                    18
                ],
                "start": [
                    13,
                    10
                ],
                "type": "doc.class",
                "view": "userdata",
                "visible": "public"
            }
        ],
        "fields": [],
        "name": "userdata",
        "type": "type",
        "view": "userdata"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                    "finish": [
                        15,
                        9
                    ],
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                    "start": [
                        15,
                        7
                    ],
                    "type": "table",
                    "view": "utf8lib"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    15,
                    4
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                "start": [
                    15,
                    0
                ],
                "type": "setglobal",
                "view": "utf8lib",
                "visible": "public"
            }
        ],
        "name": "utf8",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                23
                            ],
                            "name": "code",
                            "start": [
                                26,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                26,
                                28
                            ],
                            "start": [
                                26,
                                25
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "finish": [
                        26,
                        33
                    ],
                    "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.char(code: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    26,
                    18
                ],
                "name": "char",
                "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "utf8.char",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                25
                            ],
                            "name": "s",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                57,
                                28
                            ],
                            "name": "i",
                            "start": [
                                57,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "j",
                            "start": [
                                57,
                                30
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                36
                            ],
                            "name": "lax",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "finish": [
                        57,
                        41
                    ],
                    "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "returns": [
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.codepoint(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> code: integer\n  2. ...integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    57,
                    23
                ],
                "name": "codepoint",
                "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "utf8.codepoint",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                21
                            ],
                            "name": "s",
                            "start": [
                                43,
                                20
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                43,
                                26
                            ],
                            "name": "lax",
                            "start": [
                                43,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "finish": [
                        43,
                        31
                    ],
                    "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(s: string, p: integer):integer, integer"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.codes(s: string, lax?: boolean)\n  -> fun(s: string, p: integer):integer, integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    43,
                    19
                ],
                "name": "codes",
                "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "utf8.codes",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                19
                            ],
                            "name": "s",
                            "start": [
                                71,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                71,
                                22
                            ],
                            "name": "i",
                            "start": [
                                71,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                71,
                                25
                            ],
                            "name": "j",
                            "start": [
                                71,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                71,
                                30
                            ],
                            "name": "lax",
                            "start": [
                                71,
                                27
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "finish": [
                        71,
                        35
                    ],
                    "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        },
                        {
                            "name": "errpos",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.len(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> integer?\n  2. errpos: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    71,
                    17
                ],
                "name": "len",
                "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "utf8.len",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                22
                            ],
                            "name": "s",
                            "start": [
                                83,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                83,
                                25
                            ],
                            "name": "n",
                            "start": [
                                83,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                83,
                                28
                            ],
                            "name": "i",
                            "start": [
                                83,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "finish": [
                        83,
                        33
                    ],
                    "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "returns": [
                        {
                            "name": "p",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.offset(s: string, n: integer, i?: integer)\n  -> p: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    83,
                    20
                ],
                "name": "offset",
                "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "utf8.offset",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    8,
                    17
                ],
                "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                "start": [
                    8,
                    10
                ],
                "type": "doc.class",
                "view": "utf8lib",
                "visible": "public"
            }
        ],
        "fields": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                26,
                                23
                            ],
                            "name": "code",
                            "start": [
                                26,
                                19
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                26,
                                28
                            ],
                            "start": [
                                26,
                                25
                            ],
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "finish": [
                        26,
                        33
                    ],
                    "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": [
                        26,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.char(code: integer, ...integer)\n  -> string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    26,
                    18
                ],
                "name": "char",
                "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                "start": [
                    26,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nThe pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.charpattern\"])\n",
                "extends": {
                    "finish": [
                        14,
                        28
                    ],
                    "start": [
                        14,
                        22
                    ],
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": [
                                14,
                                28
                            ],
                            "start": [
                                14,
                                22
                            ],
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    14,
                    28
                ],
                "name": "charpattern",
                "rawdesc": "\nThe pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.charpattern\"])\n",
                "start": [
                    14,
                    10
                ],
                "type": "doc.field",
                "view": "string",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                57,
                                25
                            ],
                            "name": "s",
                            "start": [
                                57,
                                24
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                57,
                                28
                            ],
                            "name": "i",
                            "start": [
                                57,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                31
                            ],
                            "name": "j",
                            "start": [
                                57,
                                30
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                57,
                                36
                            ],
                            "name": "lax",
                            "start": [
                                57,
                                33
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "finish": [
                        57,
                        41
                    ],
                    "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "returns": [
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        57,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.codepoint(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> code: integer\n  2. ...integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    57,
                    23
                ],
                "name": "codepoint",
                "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                "start": [
                    57,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                43,
                                21
                            ],
                            "name": "s",
                            "start": [
                                43,
                                20
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                43,
                                26
                            ],
                            "name": "lax",
                            "start": [
                                43,
                                23
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "finish": [
                        43,
                        31
                    ],
                    "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(s: string, p: integer):integer, integer"
                        }
                    ],
                    "start": [
                        43,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.codes(s: string, lax?: boolean)\n  -> fun(s: string, p: integer):integer, integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    43,
                    19
                ],
                "name": "codes",
                "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                "start": [
                    43,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                71,
                                19
                            ],
                            "name": "s",
                            "start": [
                                71,
                                18
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                71,
                                22
                            ],
                            "name": "i",
                            "start": [
                                71,
                                21
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                71,
                                25
                            ],
                            "name": "j",
                            "start": [
                                71,
                                24
                            ],
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": [
                                71,
                                30
                            ],
                            "name": "lax",
                            "start": [
                                71,
                                27
                            ],
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "finish": [
                        71,
                        35
                    ],
                    "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        },
                        {
                            "name": "errpos",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": [
                        71,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.len(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> integer?\n  2. errpos: integer?"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    71,
                    17
                ],
                "name": "len",
                "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                "start": [
                    71,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            },
            {
                "async": false,
                "deprecated": false,
                "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                83,
                                22
                            ],
                            "name": "s",
                            "start": [
                                83,
                                21
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                83,
                                25
                            ],
                            "name": "n",
                            "start": [
                                83,
                                24
                            ],
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": [
                                83,
                                28
                            ],
                            "name": "i",
                            "start": [
                                83,
                                27
                            ],
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "finish": [
                        83,
                        33
                    ],
                    "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "returns": [
                        {
                            "name": "p",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": [
                        83,
                        0
                    ],
                    "type": "function",
                    "view": "function utf8.offset(s: string, n: integer, i?: integer)\n  -> p: integer"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/utf8.lua",
                "finish": [
                    83,
                    20
                ],
                "name": "offset",
                "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                "start": [
                    83,
                    9
                ],
                "type": "setfield",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "utf8lib",
        "type": "type",
        "view": "utf8lib"
    },
    {
        "defines": [
            {
                "desc": "```lua\nvbuf:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "finish": [
                    243,
                    11
                ],
                "rawdesc": "```lua\nvbuf:\n    | \"no\" -- Output operation appears immediately.\n    | \"full\" -- Performed only when the buffer is full.\n    | \"line\" -- Buffered until a newline is output.\n```",
                "start": [
                    240,
                    10
                ],
                "type": "doc.alias",
                "view": "\"full\"|\"line\"|\"no\""
            }
        ],
        "fields": [],
        "name": "vbuf",
        "type": "type",
        "view": "vbuf"
    },
    {
        "defines": [
            {
                "desc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "finish": [
                    22,
                    67
                ],
                "rawdesc": "A version object. This represents a software version like\n\"2.7.3\". The object behaves like a numerically indexed table,\ni.e., if `version` represents the version `2.7.3`, then\n\n    version[1] == 2\n    version[2] == 7\n    version[3] == 3\n    #version == 3   -- length\n\nComparisons are performed element-wise, i.e.\n\n    Version '1.12' > Version '1.9'\n",
                "start": [
                    22,
                    10
                ],
                "type": "doc.alias",
                "view": "string|integer|integer[]|pandoc.Version"
            }
        ],
        "fields": [],
        "name": "version_specifier",
        "type": "type",
        "view": "version_specifier"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                414,
                                21
                            ],
                            "name": "message",
                            "start": [
                                414,
                                14
                            ],
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": [
                                414,
                                26
                            ],
                            "start": [
                                414,
                                23
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "finish": [
                        414,
                        31
                    ],
                    "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "start": [
                        414,
                        0
                    ],
                    "type": "function",
                    "view": "function warn(message: string, ...any)"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    414,
                    13
                ],
                "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                "start": [
                    414,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "warn",
        "type": "variable",
        "view": "unknown"
    },
    {
        "defines": [
            {
                "async": false,
                "deprecated": false,
                "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                "extends": {
                    "args": [
                        {
                            "finish": [
                                428,
                                17
                            ],
                            "name": "f",
                            "start": [
                                428,
                                16
                            ],
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": [
                                428,
                                23
                            ],
                            "name": "msgh",
                            "start": [
                                428,
                                19
                            ],
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "finish": [
                                428,
                                29
                            ],
                            "name": "arg1",
                            "start": [
                                428,
                                25
                            ],
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": [
                                428,
                                34
                            ],
                            "start": [
                                428,
                                31
                            ],
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "finish": [
                        428,
                        39
                    ],
                    "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": [
                        428,
                        0
                    ],
                    "type": "function",
                    "view": "function xpcall(f: fun(...any):...unknown, msgh: function, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "[FOREIGN] /Users/cscheid/repos/github/LuaLS/lua-language-server/meta/Lua 5.4 en-us utf8/basic.lua",
                "finish": [
                    428,
                    15
                ],
                "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                "start": [
                    428,
                    9
                ],
                "type": "setglobal",
                "view": "function",
                "visible": "public"
            }
        ],
        "name": "xpcall",
        "type": "variable",
        "view": "unknown"
    }
]