---
title: RStudio IDE
---

## Overview

{{< include _rstudio.md >}}


## Visual Editor

RStudio IDE includes a visual editor for Quarto markdown, including support for tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more:

[![](../visual-editor/images/visual-editing.png){fig-alt="An RMarkdown file opened in the RStudio visual editor. The page is titled 'Filter joins'. Underneath is a table containing R syntax, mathematical notation, and definitions for the semi- and anti-joins. Underneath this table is an R code chunk that displays a graphical representation of a semi-join."}](../visual-editor/index.qmd)

To learn more, see the documentation on [Using the Visual Editor](../visual-editor/index.qmd) with RStudio.

## Knitr Engine

Quarto is designed to be highly compatible with existing [R Markdown](https://rmarkdown.rstudio.com/) documents. You should generally be able to use Quarto to render an existing Rmd document without changes.

{{< include _chunk-options.md >}}


## Jupyter Engine

You can also work with Quarto markdown documents that target the Jupyter engine within RStudio. These files will typically include a `jupyter` option in the YAML front matter indicating which kernel to use. For example:

``` yaml
---
title: "Matplotlib Demo"
author: "Norah Smith"
jupyter: python3
---
```

If you want to work within a virtual environment ([venv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment)), use the **File :** **New Project...** command, specify the **Jupyter** engine with a venv, and specify which packages you'd like to seed the venv with:

![](images/rstudio-new-jupyter-project.png){fig-alt="A section of the 'New Project Wizard' menu from Rstudio. This section is titled 'Create Quarto Project'. The Quarto logo is displayed on the left. ON the right are fields for 'Type', 'Directory name', and 'Create project as subdirectory of:'. Underneath that are options for 'Engine' and 'Kernel'. The option for 'Engine' is set to 'Jupyter,' and the option for 'Kernel' is set to 'Python 3'. Underneath these are options for 'Create a git repository', and 'Use venv with this project'. The button for 'Use venv...' is selected, and there is a text box to the right with the Python package names 'matplotlib' and 'pandas' filled in. There are buttons for 'Create Project' and 'Cancel' arranged side-by-side in the bottom right of the window. There is an option to 'Open in new session' in the button left corner."}

RStudio will automatically activate this virtual environment whenever you open the project. You can install additional Python packages into the environment using the RStudio **Terminal** tab. For example:

![](images/rstudio-pip-install.png){width="726" fig-alt="An RStudio terminal window. The prompt is prefixed by the word '(env)', indicating that this prompt is taking place in a Python virtual environment named 'env.' The first line is empty and the second line contains the command 'python3 -m pip install scikit-learn.'"}

## YAML Intelligence

YAML code completion is available for project files, YAML front matter, and executable cell options:

![](images/rstudio-yaml-completion.png){.border fig-alt="Quarto document with YAML being edited. Next to the cursor code completion helper is open showing YAML options beginning with the letters preceding the cursor ('to')."}

If you have incorrect YAML it will also be highlighted when documents are saved:

![](images/rstudio-yaml-diagnostics.png){.border fig-alt="Quarto document YAML metadata with an incorrect option underlined in red."}


## R Package

If you are not using RStudio and/or you prefer to render from the R console, you can do so using the **quarto** R package. To install the R package:

``` r
install.packages("quarto")
```

Then, to render a document:

``` r
library(quarto)
quarto_render("document.qmd")
```

To render a website (ie; all qmd in a directory organized as a website):

``` r
library(quarto)
quarto_render()
```

To live preview (automatically render & refresh the browser on save) for a document you are working on, use the `quarto_preview()` function:

``` r
library(quarto)
quarto_preview("document.qmd")
```

If you are working on a [website](/docs/websites/website-basics.qmd) or [book](/docs/books/book-basics.qmd) project, you can also use `quarto_preview()` on a project directory:

``` r
library(quarto)
quarto_preview()
```
