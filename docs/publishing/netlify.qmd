---
title: "Netlify"
provider: netlify
provider-name: Netlify
provider-token: NETLIFY_AUTH_TOKEN
provider-publish-url: "https://tubular-unicorn-97bb3c.netlify.app"
---

## Overview

[Netlify](https://www.netlify.com/) is a professional web publishing platform with support for many advanced features including custom domains, authentication, branch previews, and instant rollbacks. Netlify also has a free plan that is ideal for personal projects, hobby sites, or experiments.

There are several ways to publish Quarto content to Netlify:

1.  Use the `quarto publish` command to publish content rendered on your local machine.

2.  If you are using GitHub, GitLab, Bitbucket, or Azure DevOps, you can point Netlify at your site's source code and have it deployed whenever your code changes.

3.  If you are using GitHub, you can use a [GitHub Action] to automatically render your project and publish the resulting content whenever your code changes.

4.  If you are using another Continuous Integration (CI) service, you can script the `quarto publish` command to render and publish content to Netlify.

We'll cover each of these methods below, starting with the most straightforward and then proceeding to more sophisticated scenarios.

{{< include _publish-command.md >}}

### Domain Name

The domain name for your published site will by default use a random identifier (e.g. `mystifying-jepsen-fa4396.netlify.app`). You can pick a more descriptive sub-domain (still using `netlify.app` as the main domain) or if you own another domain, assign that one to the site. These options are available (respectively) from the **Site settings** and **Domain settings** panels:

![](images/netlify-control-panel.png)

Within **Site settings**, click the **Change site name** button to specify a different sub-domain:

![](images/netlify-site-settings.png)

If you own another domain that you want to use for your site, follow the directions in **Domain settings**.

## Publish from Git Provider

Netlify has the ability to automatically deploy sites when changes are committed to Git repositories hosted on GitHub, GitLab, Bitbucket, and Azure DevOps. The most straightforward approach to this is to check your rendered site (i.e. the `_site` or `_book` directory) into version control and have Netlify deploy that. We'll cover that scenario first and then explore using a Netlify Build Plugin to render the site on Netlify servers.

### Importing a Project

Start by going to the main Netlify page for your team, choosing **Add new site,** and then **Import an existing project**:

![](images/netlify-import-project.png)

You'll be prompted to authenticate with your version control provider, select a repository, and then finally specify the configuration for publishing the site.

### Publishing Configuration

The build settings for our project will have no **Build command** and will specify `_site` or `_book` (as appropriate) for the **Publish directory**:

![](images/netlify-build-settings.png){.border}

If you have your `_site` or `_book` directory checked into version control then everything is now configured and your site will be deployed to Netlify automatically whenever you commit to your repository.

### Rendering on Netlify

If you prefer not to check your rendered site into version control, you can also use the Quarto [Netlify Build Plugin](https://github.com/quarto-dev/netlify-plugin-quarto) to render on a Netlify build server (note that Netlify servers can only render markdown and cannot execute R, Python, or Julia code).

#### Freezing Computations

{{< include _freeze-basics.md >}}

#### Ignoring Output

{{< include _ignoring-output.md >}}

#### Plugin Configuration

To use the Quarto Netlify Build Plugin, add the following two files to your project:

``` {.toml filename="netlify.toml"}
[[plugins]]
package = "@quarto/netlify-plugin-quarto"
```

``` {.json filename="package.json"}
{
  "dependencies": {
    "@quarto/netlify-plugin-quarto": "^0.0.5"
  }
}
```

Now, commit and push your modified project (including `_freeze`, `netlify.toml`, and `package.json`). Assuming that you configured the project correctly in the previous step (i.e. **Publish directory** set to the `_site` or `_book` directory) then Netlify will begin rendering and publishing your site each time you push a new commit.

## GitHub Action

{{< include _github-action-basics.md >}}

``` {.yaml filename=".github/workflows/publish.yml"}
on:
  workflow_dispatch:
  push:
    branches: [main]

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Render and Publish 
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: {{< meta provider >}}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
```

### Netlify Credentials

The final step is to configure your GitHub Action with the credentials required for publishing to Netlify. To do this you need to create a Netlify personal access token and then configure your GitHub action to be able to read it:

1.  If you don't already have an access token, go to the Netlify [applications page](https://app.netlify.com/user/applications), and click on **New Access Token** to create a new personal access token. Give this token a memorable name, and copy the token to the clipboard.

2.  Add the Netlify personal access token to your repository's action **Secrets** (accessible within repository **Settings**). You will see a **New repository secret** button at the top right:

    ![](images/gh-new-repository-secret.png){.border}

    Click the button and add the personal access token from step 1 as a secret named `NETLIFY_AUTH_TOKEN`:

    ![](images/netlify-gh-action-secret.png){.border}

### Ignoring Output

{{< include _ignoring-output.md >}}

### Commit to Publish

Once you've specified your publishing action and Netlify credentials, and pushed your updated repository (including the `_freeze` directory) to GitHub, your action will run with this and subsequent commits, automatically rendering and publishing to Netlify.

{{< include _github-action-executing-code.md >}}

#### Example: Jupyter with venv

Here is a complete example of a GitHub Action that installs Python, Jupyter, and package dependencies from `requirements.txt`, then executes code and renders output to Netlify:

``` {.yaml filename=".github/workflows/publish.yml"}
on:
  workflow_dispatch:
  push:
    branches: [main]

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        
      - name: Install Python and Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install jupyter
      - run: pip install -r requirements.txt
      
      - name: Render and Publish 
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: {{< meta provider >}}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
```

#### Example: Knitr with renv

Here is a complete example of a GitHub Action that installs R and package dependencies from `renv.lock`, then executes code and renders output to Netlify:

``` {.yaml filename=".github/workflows/publish.yml"}
on:
  workflow_dispatch:
  push:
    branches: [main]

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.0'
      
      - name: Install R Dependencies 
        uses: r-lib/actions/setup-renv@v2
        with:
          cache-version: 1
      
      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: {{< meta provider >}}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
```

### Additional Options

It's possible to have a Quarto project in a larger GitHub repository, where the Quarto project does not reside at the top-level directory. In this case, add a `path` input to the invocation of the `publish` action. For example:

``` yaml
- name: Render and Publish
  uses: quarto-dev/quarto-actions/publish@v2
  with:
    target: {{< meta provider >}}
    path: subdirectory-to-use
    NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
```

By default, `quarto publish` will re-render your project before publishing it. However, if you store the rendered output in version control, you don't need the GitHub action to re-render the project. In that case, add the option `render: false` to the `publish` action:

``` yaml
- name: Render and Publish
  uses: quarto-dev/quarto-actions/publish@v2
  with:
    target: {{< meta provider >}}
    render: false
    NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
```

## Continuous Integration

You can publish Quarto content to Netlify using any CI service by scripting the `quarto publish` command.

{{< include _netlify-ci-example.md >}}

See the article on [Publishing with CI](ci.qmd) for additional details on the various approaches to rendering and publishing with Continuous Integration.
