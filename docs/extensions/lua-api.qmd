---
title: "Lua API Reference"
---

{{< include _extension-version.qmd >}}

## Overview

This article provides documentation on the standard APIs available when implementing Lua filters and shortcodes. There are three major sets of APIs available:

-   **Lua Base API**---Base functions provided for string handling, pattern matching, table manipulation, and file input and output.

-   **Pandoc Lua API**---Core API provided by Pandoc for filter development, and includes both core AST types (e.g. `pandoc.Div`, `pandoc.CodeBlock`, etc.) as well as a wide variety of helper functions for common tasks.

-   **Quarto Lua API**---Additional functions used for debugging, format detection, encoding (e.g. JSON), and adding dependencies to documents (e.g. JavaScript libraries or LaTeX packages).

To get started with programming in Lua and learn about some recommended tools and workflow, see the article on [Lua Development](lua.qmd).

## Lua Base API

The Lua standard library provides core functions for low-level string, math, table, and file operations. Here we provide links to a few of the more useful standard libaries (complete documentation can be found in the [Lua Reference Manual](https://www.lua.org/manual/5.3/)).

| Library                                                                                                      | Description                                                                                                                         |
|---------------------------------|---------------------------------------|
| [string](https://www.lua.org/manual/5.3/manual.html#6.4)                                                     | This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching.   |
| [utf8](https://www.lua.org/manual/5.3/manual.html#6.5)                                                       | This library provides basic support for UTF-8 encoding.                                                                             |
| [table](https://www.lua.org/manual/5.3/manual.html#6.6)                                                      | This library provides generic functions for table manipulation.                                                                     |
| [math](https://www.lua.org/manual/5.3/manual.html#6.7)                                                       | This library provides basic mathematical functions.                                                                                 |
| [io](https://www.lua.org/manual/5.3/manual.html#6.8), [file](https://www.lua.org/manual/5.3/manual.html#6.8) | The I/O library provides two different styles for file manipulation: one uses implicit file handles and the other explicit handles. |
| [os](https://www.lua.org/manual/5.3/manual.html#6.9)                                                         | Date/time, locales, environment variables, etc.                                                                                     |

: {tbl-colwidths="\[30,70\]"}

## Pandoc Lua API

Complete documentation for the Pandoc Lua API can be found in the [Lua Filters](https://pandoc.org/lua-filters.html) article available on the Pandoc website. Here are the various components of the API along with links to their reference documentation:

| Lua Module                                                                    | Description                                                                                                                                               |
|--------------------------|----------------------------------------------|
| [pandoc](https://pandoc.org/lua-filters.html#module-pandoc) (ast)             | Constructors for document tree elements (e.g. `pandoc.Div()`, `pandoc.Strong()`, etc.) as well as core components (e.g. `pandoc.Attr()`)                  |
| [pandoc](https://pandoc.org/lua-filters.html#helper-functions) (functions)    | Functions to parse text in a given format, filter and modify a sub-tree, and run child processes.                                                         |
| [pandoc.text](https://pandoc.org/lua-filters.html#module-text)                | UTF-8 aware text manipulation functions (e.g. `upper()`, `lower()`, etc.)                                                                                 |
| [pandoc.List](https://pandoc.org/lua-filters.html#module-pandoc.list)         | This module defines pandoc's list type. It comes with useful methods and convenience function (e.g `find_if()`, `includes()`, `filter()`, `map()`, etc.)  |
| [pandoc.utils](https://pandoc.org/lua-filters.html#module-pandoc.utils)       | Internal pandoc functions and utility functions (e.g. `blocks_to_inlines()`, `stringify()`, `citeproc()`, etc.)                                           |
| [pandoc.path](https://pandoc.org/lua-filters.html#module-pandoc.path)         | Module for file path manipulations (e.g. `is_absolute()`, `is_relative()`, `join()`, etc.                                                                 |
| [pandoc.system](https://pandoc.org/lua-filters.html#module-pandoc.system)     | Access to system information and functionality (e.g. `get_working_directory()`, `list_directory()`, etc.                                                  |
| [pandoc.mediabag](https://pandoc.org/lua-filters.html#module-pandoc.mediabag) | Access to pandoc's media storage. The "media bag" is used when pandoc is called with the `--extract-media` or (for HTML only) `--embed-resources` option. |
| [pandoc.template](https://pandoc.org/lua-filters.html#module-pandoc.template) | Compile and access defualt pandoc templates (e.g. `compile()`)                                                                                            |
| [pandoc.types](https://pandoc.org/lua-filters.html#module-pandoc.types)       | Constructors for types which are not part of the pandoc AST (e.g. `Version()`)                                                                            |

: {tbl-colwidths="\[30,70\]"}

## Quarto Lua API

### Utility Functions

Various utility functions are provided:

| Function                                     | Description                                                                                                                                                                                    |
|-------------------|-----------------------------------------------------|
| `quarto.version`                             | Return the current Quarto version as a `pandoc.Version` object.                                                                                                                                |
| `quarto.log.output(obj)`                     | Dump a text representation of the passed object to stdout.                                                                                                                                     |
| `quarto.utils.resolve_path(path)`            | Compute the full path to a file that is installed alongside your extension's Lua script. This is useful for *internal* resources that your filter needs but should not be visible to the user. |
| `quarto.utils.string_to_inlines(path, sep)`  | Converts a string to a list of Pandoc Inlines, processing any Quarto custom syntax in the string.                                                                                              |
| `quarto.utils.string_to_blocks(path)`        | Converts a string to a list of Pandoc Blocks, processing any Quarto custom syntax in the string.                                                                                               |

Quarto includes the [pandoc-lua-logging](https://github.com/wlupton/pandoc-lua-logging) library, which should be used in preference to the dump function. For example, you can examine an element passed to a filter function as follows:

``` lua
function Div(el)
  quarto.log.output(el)
end
```

### `require()`

In larger, more complex filters, it becomes useful to structure your Lua code in modules.
Quarto overwrites the standard LUA `require()` to support the use of relative paths, 
so that small modules can be easily created and reused.

For example:

```{.lua filename="filter.lua"}
local utility = require('./utils')
function Pandoc(doc)
  -- process 
end
```

Using relative paths makes it harder for multiple filters to accidentally
create conflicting module names (as would eventually happen when using the standard Lua
`require('utils')` syntax). It's possible to refer to subdirectories and parent directories as well:

```{.lua filename="filter2.lua"}
local parsing = require('./utils/parsing')
function Pandoc(doc)
  -- process 
end
```

```{.lua filename="utils/parsing.lua"}
local utils = require("../utils")
-- ...
```

### Document Metadata

Extensions may need to access the path for the input and output files. 
Quarto makes these variables available:

| Function                 | Description                                      |
|--------------------------|--------------------------------------------------|
| `quarto.doc.input_file`  | Full path to input file for the current render.  |
| `quarto.doc.output_file` | Full path to output file for the current render. |

### Project Metadata

Extensions may need to know about paths relevant to the project.
Quarto makes these variables available:


| Function                          | Description                                                                                                     |
|-----------------------------------|-----------------------------------------------------------------------------------------------------------------|        
| `quarto.project.directory`        | Full path to current project directory (`nil` if no project).                                                   |
| `quarto.project.output_directory` | Full path to current project output directory (`nil` if no project).                                            |
| `quarto.project.offset`           | Offset (relative path) from the directory of the current file to the root of the project (`nil` if no project). |
| `quarto.project.profile`          | List of currently active project profiles.                                                                      |


### Format Detection

Extensions will often need to detect the current format to create custom content depending on the target output medium. The `quarto.doc.is_format()` function

| Function                     | Description                                                                                                                                                                                                 |
|-------------------|-----------------------------------------------------|
| `quarto.doc.is_format(name)` | Detect if the current format matches `name`.                                                                                                                                                                |
| `quarto.doc.has_bootstrap()` | Query whether [Bootstrap CSS](https://getbootstrap.com/) is available within the current document (it is by default for standard `html` documents but this may have been overridden by e.g. `theme: none`). |

The `name` parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match based on an alias that groups commonly targeted formats together. The following values format aliases are handled specially by `quarto.doc.is_format()`:

{{< include ../authoring/_format-aliases.md >}}

For example, here we check for PDF and HTML output:

``` lua
if quarto.doc.is_format("pdf") then
  -- pdf specific output
elseif quarto.doc.is_format("html") then
  -- html specific output
else
  -- output for other formats
end
```

For LaTeX output, you may need to additionally detect which citation utility and pdf engine are being used for the current render. You can use these functions to do that detection:

| Function                   | Description                                                                                                                      |
|--------------------|----------------------------------------------------|
| `quarto.doc.cite_method()` | Returns a string (`citeproc`, `natbib`, or `biblatex)` indicating the cite method in use.                                        |
| `quarto.doc.pdf_engine()`  | Returns a string (`pdflatex`, `xelatex`, `lualatex`, or `tectonic`) indicating the PDF engine being used to render the document. |

### Includes

Sometimes extensions need to inject content into the target document. There are three locations that content can be included (pass one of these locations as the first argument of the include functions):

| Location      | Description                                                         |
|--------------------|----------------------------------------------------|
| `in-header`   | In the header of the document (HTML `<head>` tag or LaTeX preamble) |
| `before-body` | Before the document body                                            |
| `after-body`  | After the document body                                             |

Note that the included content should use the *raw target format* (e.g. HTML or LaTeX) rather than markdown. You can use these functions to include text or the contents of a file:

| Function                                  | Description                                                                                                                                                           |
|--------------------|----------------------------------------------------|
| `quarto.doc.include_text(location, text)` | Include text at the specified location (`in-header`, `before-body`, or `after-body`)                                                                                  |
| `quarto.doc.include_file(location, file)` | Include file at the specified location (`in-header`, `before-body`, or `after-body`). The path to the file should *relative* to the Lua script calling this function. |

For example the following code includes an HTML file after the body in the rendered document:

``` lua
quarto.doc.include_file("after-body", "comments.html")
```

### Dependencies

Extensions will sometimes want to add external dependencies (for example, a JavaScript library and related CSS, or the usage of a LaTeX package). This can be accomplished with the following functions:

| Function                                        | Description                                                                                                                                                                                                                                               |
|-------------------|-----------------------------------------------------|
| `quarto.doc.add_html_dependency(dep)`           | Add an HTML dependency (additional resources and content) to a document. See docs on the [HTML Dependencies](#html-dependencies) below for additional details.                                                                                            |
| `quarto.doc.attach_to_dependency(name, attach)` | Attach a file to an existing dependency. `attach` is a file path relative to the Lua filter or table with \`path\` and \`name\` for renaming the file as its copied.                                                                                      |
| `quarto.doc.use_latex_package(pkg, opt)`        | Adds a `\usepackage` statement to the LaTeX output (along an options string specified in `opt`)                                                                                                                                                           |
| `quarto.doc.add_format_resource(path)`          | Add a format resource to the document. Format resources will be copied into the directory next to the rendered output. This is useful, for example, if your format references a `bst` or `cls` file which must be copied into the LaTeX output directory. |
| `quarto.doc.add_resource(path)`                 | Add a resource file to the current render, copying that file to the same relative location in the output directory.                                                                                                                                       | 
| `quarto.doc.add_supporting(path)`               | Add a supporting file to the current render, moving that file file to the same relative location in the output directory.                                                                                                                                 |

For example, here we add a LaTeX package dependency:

``` lua
quarto.doc.use_latex_package("gamebook")
```

#### HTML Dependencies {#html-dependencies}

HTML Dependencies can bundle together JavaScript, CSS, and even arbitrary content to inject into the `<head>` of the document. These dependencies have a name and a version, which is used to ensure that the same dependency isn't bundled into the document more than once.

The `dep` object passed to `quarto.doc.add_html_dependency()` has the following fields:

| Field            | Description                                                                                                                                                                                        |
|-------------------|-----------------------------------------------------|
| `name`           | Unique name. Required.                                                                                                                                                                             |
| `version`        | Version number (as a string). Required.                                                                                                                                                            |
| `scripts`        | List of scripts to include (paths can be absolute or relative to the Lua file calling the function). Scripts can be either a simple path or a [script object](#script-object).                     |
| `stylesheets`    | List of CSS style-sheets to include (paths can be absolute or relative to the Lua file calling the function). Stylesheets can either be a simple path or a [stylesheet object](#stylesheet-object) |
| `links`          | List of link tags to add to the document. Each tag should be a table with `rel` and `ref` (required) and optionally `type`                                                                         |
| `resources`      | Additional files to copy to the input directory (each resource is an object with `name` (target file name in input directory) and `path` (source file name relative to Lua script).                |
| `serviceworkers` | JavaScript serviceworker files that should be copied to the root output directory (can be a simple string file name or table with \`path\` and \`name\` for renaming the file as its copied).      |
| `meta`           | Table of optional `key = value` meta tags to insert into the document `<head>`                                                                                                                     |
| `head`           | Arbitrary string to include in document `<head>`                                                                                                                                                   |

For example, here we add a dependency to a JavaScript library:

``` lua
quarto.doc.add_html_dependency({
  name = "glightbox",
  version = "3.2.0",
  scripts = {"glightbox.min.js"},
  stylesheets = {"glightbox.min.css"}
})
```

#### Script Object {#script-object}

The easiest way to specify `scripts` is with simple paths. However, in some cases you may need to add attributes to the `<script>` tag or specify that the script should go after the body. In those cases pass a script object:

| Field       | Description                                                       |
|--------------------|----------------------------------------------------|
| `path`      | Path to the script (relative to the calling Lua script)           |
| `attribs`   | Table with `key = value` attributes to add to the `<script>` tag  |
| `afterBody` | Specify that the `<script>` tag should be inserted after the body |

For example, here update the previous example to add an `integrity` attribute to the script:

``` lua
quarto.doc.add_html_dependency({
  name = "glightbox",
  version = "3.2.0",
  scripts = {
    { path = "glightbox.min.js ", attribs = {integrity = "R9GqQ8K/uxy9rx"} }
  },
  stylesheets = {"glightbox.min.css"}
})
```

#### Stylesheet Object {#stylesheet-object}

The easiest way to specify `stylesheets` is with simple paths. However, in some cases you may need to add attributes to the `<link>` tag generated for the stylesheet. In those cases pass a stylesheet object:

| Field     | Description                                                    |
|-------------------|-----------------------------------------------------|
| `path`    | Path to the stylesheet (relative to the calling Lua script)    |
| `attribs` | Table with `key = value` attributes to add to the `<link>` tag |

For example, here we update the previous example to add an `integrity` attribute to the stylesheet:

``` lua
quarto.doc.add_html_dependency({
  name = "glightbox",
  version = "3.2.0",
  scripts = {
    { 
      path = "glightbox.min.js ", 
      attribs = {integrity = "R9GqQ8K/uxy9rx"} 
    }
  },
  stylesheets = {
    { 
      path = "glightbox.min.css ", 
      attribs = {integrity = "GYl1kPzQho1wx"} 
    }
  }
})
```

### Custom Nodes

Quarto adds some custom AST node types. You can read more about them in [Quarto AST](/docs/advanced/quarto-ast.qmd#custom-nodes). You can create them with the following constructors:

| Function                        | Node                                                                                                              |
|--------------------------------|-----------------------------------------|
| `quarto.Callout(tbl)`          | Callout: `tbl` is a table with entries `type`, `title`, and `content`.                                    |
| `quarto.Tabset(tbl)`           | Tabset: `tbl` is a table with entries `tabs`, `level` and `attr`.                                         |
| `quarto.ConditionalBlock(tbl)` | Conditional block: `tbl` is a table with entries `node`, `behavior`, and `condition`.                     |
| `quarto.FloatRefTarget(tbl)`   | Cross-referencable element: `tbl` is a table with entries `content`, `caption_long`, and `caption_short`. |

### JSON Encoding

Quarto includes a copy of [json.lua](https://github.com/rxi/json.lua). a lightweight JSON library for Lua. You can access the JSON functions as follows:

| Function                    | Description                            |
|-----------------------------|----------------------------------------|
| `quarto.json.encode(input)` | Encode a Lua table into a JSON string. |
| `quarto.json.decode(str)`   | Parse a JSON string into a Lua table.  |

For example, here we encode and then decode a table:

``` lua
local json = quarto.json.encode({foo = "bar"})
local obj = quarto.json.decode(json)
```

### Base64 Encoding

Quarto includes a copy of [lbase64](https://github.com/iskolbin/lbase64), a pure Lua implementation of Base64 encoding. You can access the Base 64 encoding functions as follows:

| Function                       | Description                   |
|--------------------------------|-------------------------------|
| `quarto.base64.encode(str)`    | Encode a string into Base 64. |
| `quarto.base64.decode(b64str)` | Decode a Base 64 string.      |

### Paths

Quarto exposes paths to utilities that are likely to be useful to Lua extension and filter authors. Currently, only `quarto.paths.rscript()` is supported:

| Function | Description |
|---|---|
| `quarto.paths.rscript()` | Returns the path to `Rscript` that Quarto uses in the `knitr` engine and R files for `quarto run` scripts |