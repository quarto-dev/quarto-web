## Distributing Formats

You can distribute format extensions in one of two ways:

1.  As a template that includes both the format in the `_extensions` directory and the `template.qmd` (which is automatically renamed to match the name of the enclosing directory).

2.  As a plain format with no template scaffolding (this is useful for adding the format to an existing document or project).

If you have a GitHub repository containing the files enumerated above in the `{{< meta example-format >}}` example, users could install your extension and associated template as follows (where `{{< meta example-org >}}` is the GitHub organization hosting the repo):

``` {.bash filename="Terminal"}
quarto use template {{< meta example-org >}}/{{< meta example-format >}}
```

This is often the preferred way to get started with a format as it provides the user with a working document right out of the box. It's also possible to install *only* the format if you are working with an existing project:

``` {.bash filename="Terminal"}
quarto add {{< meta example-org >}}/{{< meta example-format >}}
```

Note that it is possible to bundle and distribute extensions as simple gzip archives (as opposed to using a GitHub repository as described above). See the article on [Distributing Extensions](/docs/extensions/distributing.qmd) for additional details.

## Multiple Formats

A single format extension can support more than one output format. For example, an extension may target `html` and `pdf` output. To support multiple formats in your extension, you can add additional base formats to the `contributes / format` key like so:

``` yaml
contributes:
  format:
    html:
      # html-specific options
    pdf:
      # pdf-specific options
```

## Common Metadata

If you have metadata that is common to any output format when your format extension is targeted, you can place that metadata under the `common` key. For example:

``` yaml
contributes:
  format:
    common:
      filters:
        - filter.lua
      shortcodes:
        - quarto-ext/fancy-text
    html:
      # html-specific
    pdf:
      # pdf-specific
```

## Format Resources

You can usually include other files and resources within a format extension by placing those files within the extension directory and using relative paths to reference them in your `_extension.yml` metadata file. These relative paths will be properly handled as your extension's metadata is merged with the rendered document metadata.

If there are resources that you need to have copied to the input directory as a part of rendering the document (for example, a `bst` file for LaTeX bibliographies or a logo or other file referenced from a LaTeX template), you can provide `format-resources`, which is a list of file paths[^_formats-common-1]. Each of these files will be copied into the directory containing the input that is being rendered when the document is rendered. For example:

``` yaml
contributes:
  format:
    pdf:
      format-resources:
        - plos2015.bst
```

## Extension Embedding

In some cases format extensions will want to make use of other extensions. This is permitted, but adding extensions for use within a custom format must be done with a special command line flag to ensure they are embedded correctly.

``` {.bash filename="Terminal"}
quarto create extension format:pdf myformat
cd myformat
quarto add quarto-ext/fancy-text --embed myformat
```

For example, here we want to make the [fancy-text](https://github.com/quarto-ext/fancy-text) extension (which provides special formatting for the words {{< latex >}} and {{< bibtex >}}) available for users of the [jss](https://github.com/quarto-journals/jss) custom format:

``` {.bash filename="Terminal"}
quarto add quarto-ext/fancy-text --embed jss
```

This will produce the following output:

``` {.bash filename="Output"}
quarto-journals/jss
└── _extensions
    └── jss
        ├── _extensions
        │   └── quarto-ext
        │       └── fancy-text
        └── partials
```

This will add the `quarto-ext/fancy-text` extension into the `jss` extension in the `_extensions` folder. By embedding an extension you make it available without creating the potential for conflict with other versions of the extension that users might already have installed.

[^_formats-common-1]: This is most common in the the case of PDF based formats which have a secondary step of converting the LaTeX produced by Pandoc into a PDF. If there are files that are referenced indirectly by the LaTeX, they will need to be discoverable and should typically be copied into the same directory that contains the LaTeX input.
