---
title: "Tutorial: Hello, Quarto"
editor_options:
  markdown:
    wrap: sentence
    canonical: true
tool:
  name: vscode
---

{{< include ../_tool-chooser.md >}}


## Overview

In this tutorial we'll show you how to use Quarto with VS Code.
Before getting started, you should install the [Quarto VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto), which includes many tools that enhance working with Quarto, including:

-   Integrated render and preview for Quarto documents.
-   Syntax highlighting for markdown and embedded languages
-   Completion and diagnostics for YAML options
-   Completion for embedded languages (e.g. Python, R, Julia, etc.)
-   Commands and key-bindings for running cells and selected lines.

You can install the Quarto extension from within the **Extensions** tab in VS Code, from the [Extension Marketplace](https://marketplace.visualstudio.com/items?itemName=quarto.quarto), the [Open VSX Registry](https://open-vsx.org/extension/quarto/quarto) or directly from a [VISX extension file](https://github.com/quarto-dev/quarto-vscode#visx-install).

::: callout-note
This tutorial focuses on editing plain text Quarto `.qmd` files in VS Code. Depending on your preferences and the task at hand there are two other editing modes available for Quarto documents: the [Visual Editor](/docs/tools/vscode/visual-editor.qmd) and the [Notebook Editor](/docs/tools/vscode/notebook.qmd). For the purposes of learning we recommend you work through this tutorial using the VS Code text editor, then after you've mastered the basics explore using the other editing modes.
:::

### Basic Workflow

Quarto `.qmd` files contain a combination of markdown and executable code cells.
Here's what it might look like in VS Code to edit and preview a `.qmd` file:

![](/docs/tools/images/vscode-render.png){.border fig-alt="Two windows arranged side by side. The window on the left is a qmd file opened in VSCode. The contents of this document are the same as the first part of the Getting Started: Welcome section of this website. The contents of this document are rendered by Quarto in the window on the right."}

The document on the left is *rendered* into the HTML version you see on the right.
This is the basic model for Quarto publishing---take a source document and render it to a variety of [output formats](/docs/output-formats/all-formats.qmd), including HTML, PDF, MS Word, etc.

The tutorials will make use of the `matplotlib` and `plotly` Python packages---the commands you can use to install them are given in the table below.

+-----------+---------------------------------------------------+
| Platform  | Commands                                          |
+===========+===================================================+
|           | ```{.bash filename="Terminal"}                    |
| Mac/Linux | python3 -m pip install jupyter matplotlib plotly  |
|           | ```                                               |
+-----------+---------------------------------------------------+
|           | ```{.powershell filename="Terminal"}              |
| Windows   | py -m pip install jupyter matplotlib plotly       |
|           | ```                                               |
+-----------+---------------------------------------------------+

::: callout-note
Note that while this tutorial uses Python, using Julia (via the [IJulia](https://julialang.github.io/IJulia.jl/stable/) kernel) is also well supported.
See the article on [Using Julia](/docs/computations/julia.qmd) for additional details.
:::

## Render and Preview

We'll start out by rendering a simple example (`hello.qmd`) to a couple of formats.
If you want to follow along step-by-step in your own environment, create a new file named `hello.qmd` and copy the following content into it.

```` markdown
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

Note that if you are following along be sure to install the required dependencies if you haven't already:

+-----------+----------------------------------------------------+
| Platform  | Commands                                           |
+===========+====================================================+
|           | ```{.bash filename="Terminal"}                     |
| Mac/Linux | python3 -m pip install jupyter matplotlib plotly   |
|           | ```                                                |
+-----------+----------------------------------------------------+
|           | ```{.powershell filename="Terminal"}               |
| Windows   | py -m pip install jupyter matplotlib plotly        |
|           | ```                                                |
+-----------+----------------------------------------------------+

To render and preview, execute the **Quarto: Preview** command.
You can alternatively use the <kbd>Ctrl+Shift+K</kbd> keyboard shortcut, or the **Preview** button (![](/docs/tools/images/vscode-preview-icon.svg){fig-alt="Preview icon"}) at the top right of the editor:

![](/docs/tools/images/vscode-preview-button.png){.border fig-alt="The top of the Visual Studio code editor. The right side of the editor tab area includes a Preview button."}

::: {.callout-note appearance="simple"}
Note that on the Mac you should use `Cmd` rather than `Ctrl` as the prefix for all Quarto keyboard shortcuts.
:::


### How it Works

When you render a `.qmd` file with Quarto, the executable code blocks are processed by Jupyter, and the resulting combination of code, markdown, and output is converted to plain markdown.
Then, this markdown is processed by [Pandoc](http://pandoc.org/), which creates the finished format.

![](images/qmd-how-it-works.png){alt="" fig-alt="Workflow diagram starting with a qmd file, then Jupyter, then md, then pandoc, then PDF, MS Word, or HTML." fig-align="left"}

### Authoring

Let's try making a small change and then re-rendering:

1.  Change the line of code that defines `theta` as follows:

    ``` python
    theta = 4 * np.pi * r
    ```

2.  Re-render the file (using **Quarto: Preview** or the <kbd>Ctrl+Shift+K</kbd> shortcut) The document is rendered, and the browser preview is updated.

This is the basic workflow for authoring with Quarto.

You do not need to save the file before rendering (as this happens automatically when you render).
If you prefer, you can configure the Quarto extension to render whenever you save a document.
See the documentation on [Render on Save](/docs/tools/vscode/index.qmd#render-on-save) for additional details.

### Running Cells

You don't need to fully render documents in order to iterate on code cells.
You'll notice that there is a **Run Cell** button above the code cell.
Click that button to execute the cell (output is shown side by side in the Jupyter interactive console):

![](/docs/tools/images/vscode-execute-cell.png){.border fig-alt="VS Code with two panes open, vscode.qmd source code on the right, and the interactive output of that code shown in a second pane on the left."}

Execute the current cell with <kbd>Ctrl+Shift+Enter</kbd>, the current line(s) with <kbd>Ctrl+Enter</kbd>, or previous cells with <kbd>Ctrl+Alt+P</kbd> (note that on the Mac you should use `Cmd` rather than `Ctrl` as the prefix for all Quarto keyboard shortcuts).

There are few different types of content in `hello.qmd`, let's work a bit with each type.

## YAML Options

At the top of the file there is a YAML block with document level options.

``` yaml
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---
```

Try changing the `code-fold` option to `false`:

``` yaml
format: 
  html:
    code-fold: false
```

Then re-render the document (again, no need to save before rendering).
You'll notice that the code is now shown above the plot, where previously it was hidden with a **Code** button that could be used to show it.

## Markdown

Narrative content is written using markdown.
Here we specify a heading and a cross-reference to the figure created in the code cell below.

``` markdown
## Polar Axis

For a demonstration of a line plot on a polar axis, see @fig-polar.
```

Try changing the heading and re-rendering---the preview will update with the new heading text.

## Code Cells

Code cells contain executable code to be run during render, with the output (and optionally the code) included in the rendered document.

```` markdown
```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

You are likely familiar with the Matplotlib code given here.
However, there are some less familiar components at the top of the code cell: `label` and `fig-cap` options.
Cell options are written in YAML using a specially prefixed comment (`#|`).

In this example, the cell options are used to make the figure cross-reference-able.
Try changing the `fig-cap` and/or the code then re-rendering to see the updated preview.

There are a wide variety of [cell options](/docs/reference/cells/cells-jupyter.qmd) that you can apply to tailor your output.
We'll delve into these options in the next tutorial.

::: callout-note
One particularly useful cell option for figures is `fig-alt`, which enables you to add alternative text to images for users with visual impairments.
See Amy Cesal's article on [Writing Alt Text for Data Visualization](https://medium.com/nightingale/writing-alt-text-for-data-visualization-2a218ef43f81) to learn more.
:::

## External Preview

In this tutorial we've demonstrated previewing rendered output in a pane within VS Code.
If you prefer to use an external browser for preview (or have no preview triggered at all by rendering) you can use the **Preview Type** option to specify an alternate behavior:

![](/docs/tools/images/vscode-preview-settings.png){.border fig-alt="VS Code settings interface with 'quarto preview type' entered into the search bar. User settings reveals Quarto > Render: Preview Type, with a dropdown to select location for document preview after render. The default, internal, is selected, which previews using a side-by-side panel in VS Code. The other two options in the dropdown are external and none."}

{{< include _footer.md >}}

Additionally, you may wish to learn about the other editing modes for Quarto documents available within VS Code:

-  The [Visual Editor](/docs/tools/vscode/visual-editor.qmd) for WYSIWYG editing of `.qmd` documents.

-  The [Notebook Editor](/docs/tools/vscode/notebook.qmd) for editing `.ipynb` notebooks.
