---
title: "Using R"
---

## Overview

Quarto is a multi-language, next generation version of R Markdown from RStudio, with many new features and capabilities. Like R Markdown, Quarto uses [Knitr](https://yihui.org/knitr/) to execute R code, and is therefore able to render most existing Rmd files without modification.

We'll start by covering the basics of Quarto, then delve into the differences between Quarto and R Markdown in the sections on [Chunk Options](#chunk-options) and [Output Formats](#output-formats) below.

### Code Blocks

Code blocks that use braces around the language name (e.g. ```` ```{r} ````) are executable, and will be run by Quarto during render. Here is a simple example:

```` markdown
---
title: "ggplot2 demo"
author: "Norah Jones"
date: "5/22/2021"
format: 
  html:
    code-fold: true
---

## Air Quality

@fig-airquality further explores the impact of temperature on ozone level.

```{{r}}
#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
````

You'll note that there are some special comments at the top of the code block. These are cell level options that make the figure [cross-referenceable](/docs/authoring/cross-references.qmd).

This document results in the following rendered output:

![](/images/hello-knitr.png){.border fig-alt="Example output with title (ggplot2 demo), author (Norah Jones), and date (5/22/2021). Below is a header reading Air Quality followed by body text (Figure 1 further explores the impact of temperature on ozone level.) with a toggleable code field, and figure with caption that reads Figure 1 Temperature and ozone level."}

You can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).

There are many options which control the behavior of code execution and output, you can read more about them in the article on [Execution Options](execution-options.qmd). 

In addition to code blocks which interrupt the flow of markdown, you can also include code inline. Read more about inline code in the [Inline Code](inline-code.qmd) article.

### Rendering

When a Quarto document is rendered, R code blocks are automatically executed. You can render Quarto documents in a variety of ways:

1)  Using the **Render** button in RStudio:

    ![](/docs/tools/images/rstudio-render.png){.border-bottom width="612" fig-alt="The top section of a qmd file as displayed in RStudio. There is a toolbar right above the document containing various options, including 'Render.' There is a stylized, segmented blue arrow pointing at the word."}
    
    The **Render** button will render the first format listed in the document YAML. If no format is specified, then it will render to HTML.

2)  From the system shell using the `quarto render` command:

    ```{.bash filename="Terminal"}
    quarto render document.qmd # all formats
    quarto render document.qmd --to pdf
    quarto render document.qmd --to docx
    ```

    Note that the target file (in this case `document.qmd`) should always be the very first command line argument. 
    
    The `render` command will render all formats listed in the document YAML. If no formats are specified, then it will render to HTML. You can also provide the `--to` argument to target a specific format.

3)  From the R console using the **quarto** R package:

    ``` r
    library(quarto)
    quarto_render("document.qmd") # all formats
    quarto_render("document.qmd", output_format = "pdf")
    ```
    
    The function `quarto_render()` is a wrapper around `quarto render` and by default, will render all formats listed in the document YAML. 
     
    Note that the Quarto R package is a convenience for command line rendering from R, and is not required for using Quarto with R. 

## Installation

To use Quarto with R, you should install the **rmarkdown** R package:

``` r
install.packages("rmarkdown")
```

Installation of the **rmarkdown** package will also install the **knitr** package so you will have everything required to render documents containing R code.

Quarto will select a version of R by looking on the system `PATH`. In addition, on Windows when R is not found on the `PATH`, the registry will be scanned for the current R version. You can override the version of R used by Quarto by setting the `QUARTO_R` environment variable to the directory where the R binary `RScript` is. 

## RStudio

{{< include ../tools/_rstudio.md >}}


## VS Code

The [Quarto Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) for VS Code provides a variety of tools for working with `.qmd` files in VS Code. The extension integrates directly with the [R Extension](https://marketplace.visualstudio.com/items?itemName=REditorSupport.r) to provide the following R-specific capabilities:

1)  Code completion
2)  Cell execution
3)  Contextual help

![](images/r-vscode.png){.border fig-alt="Screen shot of qmd file open in VS code with source markdown shown in left pane and output plot shown in the right."}

You can install the VS Code extension by searching for 'quarto' in the extensions panel or from the [extension marketplace](https://marketplace.visualstudio.com/items?itemName=quarto.quarto).

The VS Code extension includes a **Quarto: Preview** command that can be accessed via the Command Palette, the keyboard shortcut {{< kbd mac=Command-Shift-K win=Control-Shift-K linux=Control-Shift-K >}}, or a **Preview** button (![](/docs/tools/images/vscode-preview-icon.svg){fig-alt="Preview icon"}) in the editor. 
After rendering, a preview is displayed in a pane within VS Code alongside your document.

You can read more about using VS Code in [Tools: VS Code](/docs/tools/vscode/index.qmd).

## Emacs

The [quarto-mode](https://melpa.org/#/quarto-mode) MELPA package is an Emacs mode for editing Quarto documents. Install `quarto-mode` as follows:

``` default
M-x package-refresh-contents
M-x package-install
  quarto-mode
```

If you have [ESS](https://ess.r-project.org/), `quarto-mode` will make use of it for executing R code.

Use `M-x quarto-preview` to start a `quarto preview` server that watches quarto content for changes and automatically refreshes it. If the current buffer has an associated file that exists in a quarto project, the command will preview the entire project. Otherwise, it will preview the specific file.

## Chunk Options {#chunk-options}

{{< include ../tools/_chunk-options.md >}}

## Chunk Labels

You can set a label for a code chunk with the `label`  option:

````markdown
```{{r}}
#| label: convert
airquality$TempC <- (5 / 9) * (airquality$Temp - 32)
```
````

Unless you want to specify a cross-reference avoid using the [reserved cross-reference prefixes](/docs/authoring/cross-references.qmd#reserved-prefixes) for chunk labels.

## Output Formats {#output-formats}

Another difference between R Markdown and Quarto is related to output formats. Quarto includes many more built in output formats (and many more options for customizing each format). Quarto also has native features for special project types like [Websites](/docs/websites/), [Books](/docs/books/), and [Blogs](/docs/websites/website-blog.qmd) (rather than relying on external packages).

To use a format in Quarto you use the `format` key rather than the `output` key as you did in R Markdown. Here's a comparison of equivalent format specifications:

::: {layout-ncol="2"}
#### R Markdown

``` yaml
title: "My Document"
output:
  html_document:
    toc: true
    number_sections: true
    css: styles.css
```

#### Quarto

``` yaml
title: "My Document"
format:
  html:
    toc: true
    number-sections: true
    css: styles.css
```
:::

One source of the difference in syntax is that Quarto is more closely aligned with [Pandoc](https://pandoc.org) format names and options (thus the use of `-` as a word separator rather than `_`).

See the listing of all [supported formats](/docs/output-formats/all-formats.qmd) along with their user guides and reference pages for more details.

See the articles on creating [Websites](/docs/websites/), [Books](/docs/books/), and [Blogs](/docs/websites/website-blog.qmd) for additional details on more advanced output formats.


## Data Frames

{{< include _knitr-df-print.md >}}

{{< include _knitr-options.md >}}


## Caching

The [Knitr Cache](https://bookdown.org/yihui/rmarkdown-cookbook/cache.html) operates at the level of individual cells rather than the entire document. While this can be very convenient, it also introduced some special requirements around managing the dependencies between cells.

You can enable the Knitr cache at the document or project level using standard YAML options:

``` yaml
---
title: "My Document"
format: html
execute: 
  cache: true
---
```

You can also enable caching on a per-cell basis (in this you would *not* set the document level option):

```{{r}}
#| cache: true

summary(cars)
```

There are a variety of other cell-level options that affect Knitr caching behavior. You can learn about them in the Knitr [cell options](/docs/reference/cells/cells-knitr.qmd#cache) reference. Another excellent resource is Yihui Xie's article on [cache invalidation](https://yihui.org/en/2018/06/cache-invalidation/).

{{< include _caching-more.md >}}
