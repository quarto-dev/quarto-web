---
title: "Using Julia"
jupyter-language: "Julia"
jupyter-screenshot: "![](images/julia-jupyter.png){.border fig-alt='Side-by-side preview of notebook on the left and live preview in the browser on the right.'}"
vscode-extension: "[Julia Extension](https://www.julia-vscode.org/docs)"
vscode-screenshot: "![](images/julia-vscode){.border fig-alt='Screen shot of VS Code with quarto document containing Julia code on the left, the output of a plot from the Julia code on the right, and the Quarto Help pane at the bottom.'}"
---

## Overview

Quarto supports executable Julia code blocks within markdown. This allows you to create fully reproducible documents and reports---the Julia code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.

Quarto has two available engines for executing Julia code. The older one is using the [IJulia](https://github.com/JuliaLang/IJulia.jl) Jupyter kernel and depends on Python to run. The newer engine is using the [QuartoNotebookRunner.jl](https://github.com/PumasAI/QuartoNotebookRunner.jl/) package to render notebooks and does not have any additional dependencies beyond a Julia installation.

Using either of these engines will require manually installing Julia if
you have not done so already. You can download it from
https://julialang.org/downloads/. There are two options for installation: the
Juliaup installation manager, or the "manual" installation approach. Unless
you know that you need to use the "manual" approach, use
Juliaup since it allows you to manage multiple Julia versions on your system.

## Using the `jupyter` engine

Below we'll describe how to [install](#installation) IJulia and related requirements but first we'll cover the basics of creating and rendering documents with Julia code blocks.

#### Code Blocks

Code blocks that use braces around the language name (e.g. ```` ```{julia} ````) are executable, and will be run by Quarto during render. Here is a simple example:

```` markdown
---
title: "Plots Demo"
author: "Norah Jones"
date: "5/22/2021"
format:
  html:
    code-fold: true
jupyter: julia-1.8
---

### Parametric Plots

Plot function pair (x(u), y(u)). 
See @fig-parametric for an example.

```{{julia}}
#| label: fig-parametric
#| fig-cap: "Parametric Plots"

using Plots

plot(sin, 
     x->sin(2x), 
     0, 
     2Ï€, 
     leg=false, 
     fill=(0,:lavender))
```
````

You'll note that there are some special comments at the top of the code block. These are cell level options that make the figure [cross-referenceable](/docs/authoring/cross-references.qmd).

This document would result in the following rendered output:

![](/images/hello-julia.png){.border fig-alt="Example Plots Demo output with title, author, date published and main section on Parametric plots which contains text, a toggleable code field, and the output of the plot, with the caption Figure 1 Parametric Plots."}

You can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).

There are many options which control the behavior of code execution and output, you can read more about them in the article on [Execution Options](execution-options.qmd).

In addition to code blocks which interrupt the flow of markdown, you can also include code inline. Read more about inline code in the [Inline Code](inline-code.qmd) article.

#### Multiple Outputs

By default Julia cells will automatically print the value of their last statement (as with the example above where the call to `plot()` resulted in plot output). If you want to display multiple plots (or other types of output) from a single cell you should call the `display()` function explicitly. For example, here we output two plots side-by-side with sub-captions:

```{{julia}}
#| label: fig-plots
#| fig-cap: "Multiple Plots"
#| fig-subcap:
#|   - "Plot 1"
#|   - "Plot 2"
#| layout-ncol: 2

using Plots
display(plot(sin, x -> sin(2x), 0, 2))
display(plot(x -> sin(4x), y -> sin(5y), 0, 2))
```

{{< include _jupyter-rendering.md >}}


### Installation {#installation}

In order to render documents with embedded Julia code you'll need to install the following components:

1)  IJulia
2)  Revise.jl
3)  Optionally, Jupyter Cache

We'll cover each of these in turn below.

#### IJulia {#ijulia}

[IJulia](https://julialang.github.io/IJulia.jl/stable) is a Julia-language execution kernel for Jupyter. You can install IJulia from within the Julia REPL as follows:

``` julia
using Pkg
Pkg.add("IJulia")
using IJulia
notebook()
```

The first time you run `notebook()`, it will prompt you for whether it should install Jupyter. Hit enter to have it use the [Conda.jl](https://github.com/Luthaf/Conda.jl) package to install a minimal Python+Jupyter distribution (via [Miniconda](https://docs.conda.io/projects/conda/en/stable/user-guide/install/index.html)) that is private to Julia (not in your `PATH`). On Linux, it defaults to looking for `jupyter` in your `PATH` first, and only asks to installs the Conda Jupyter if that fails.

If you choose not to use Conda.jl to install Python and Jupyter you will need to make sure that you have another installation of it on your system (see the section on [Installing Jupyter](#installing-jupyter) if you need help with this).

#### Revise.jl

In addition to IJulia, you'll want to install [Revise.jl](https://timholy.github.io/Revise.jl/stable) and configure it for use with IJulia. Revise.jl is a library that helps you keep your Julia sessions running longer, reducing the need to restart when you make changes to code.

Quarto maintains a persistent [kernel daemon](#kernel-daemon) for each document to mitigate Jupyter start up time during iterative work. Revise.jl will make this persistent process robust in the face of package updates, git branch checkouts, etc. Install Revise.jl with:

``` julia
using Pkg
Pkg.add("Revise")
```

To configure Revise to launch automatically within IJulia, create a `.julia/config/startup_ijulia.jl` file with the contents:

``` default
try
  @eval using Revise
catch e
  @warn "Revise init" exception=(e, catch_backtrace())
end
```

You can learn more about Revise.jl at <https://timholy.github.io/Revise.jl/stable>.

#### Jupyter Cache

[Jupyter Cache](https://jupyter-cache.readthedocs.io/en/latest/) enables you to cache all of the cell outputs for a notebook. If any of the cells in the notebook change then all of the cells will be re-executed.

If you are using the integrated version of Jupyter installed by `IJulia.notebook()`, then you will need to add `jupyter-cache` to the Python environment managed by IJulia. You can do that as follows:

``` julia
using Conda
Conda.add("jupyter-cache")
```

Alternatively, if you are using Jupyter from within any other version of Python not managed by IJulia, see the instructions below on [Installing Jupyter](#installing-jupyter) for details on installing `jupyter cache`,

{{< include _jupyter-authoring-tools.md >}}

{{< include _jupyter-cache.md >}}

{{< include _caching-more.md >}}

### Kernel Selection

You'll note in our first example that we specified the use of the `julia-1.8` kernel explicitly in our document options (shortened for brevity):

``` markdown
---
title: "StatsPlots Demo"
jupyter: julia-1.8
---
```

If no `jupyter` kernel is explicitly specified, then Quarto will attempt to automatically discover a kernel on the system that supports Julia.

You can discover the available Jupyter kernels on your system using the `quarto check` command:

``` {.bash filename="Terminal"}
quarto check jupyter
```

{{< include _jupyter-daemon.md >}}


### Installing Jupyter {#installing-jupyter}

You can rely on the minimal version of Python and Jupyter that is installed automatically by **IJulia**, or you can choose to install Python and Jupyter separately. If you need to install another version of Jupyter this section describes how.

{{< include _jupyter-install.md >}}

#### Jupyter Cache

[Jupyter Cache](https://jupyter-cache.readthedocs.io/en/latest/) enables you to cache all of the cell outputs for a notebook. If any of the cells in the notebook change then all of the cells will be re-executed.

To use Jupyter Cache you'll want to first install the `jupyter-cache` package:

+-----------+--------------------------------------+
| Platform  | Command                              |
+===========+======================================+
| Mac/Linux | ```{.bash filename="Terminal"}       |
|           | python3 -m pip install jupyter-cache |
|           | ```                                  |
+-----------+--------------------------------------+
| Windows   | ```{.powershell filename="Terminal"} |
|           | py -m pip install jupyter-cache      |
|           | ```                                  |
+-----------+--------------------------------------+
| Conda     | ```{.bash filename="Terminal"}       |
|           | conda install jupyter-cache          |
|           | ```                                  |
+-----------+--------------------------------------+

To enable the cache for a document, add the `cache` option. For example:

## Using the `julia` engine

{{< include /docs/prerelease/1.5/_pre-release-feature.qmd >}}

### Installation

The `julia` engine uses the [QuartoNotebookRunner.jl](https://github.com/PumasAI/QuartoNotebookRunner.jl/) package to render notebooks. When you first attempt to render a notebook with the `julia` engine, Quarto will automatically install this package into a private environment that is owned by Quarto. This means you don't have to install anything in your global Julia environment for Quarto to work and Quarto will not interfere with any other Julia environments on your system. Quarto will use the `julia` binary on your PATH by default, but you can override this using the `QUARTO_JULIA` environment variable.

#### Using custom versions of `QuartoNotebookRunner`

In special circumstances, you may not want to use the specific `QuartoNotebookRunner` version that Quarto installs for you. For example, you might be developing `QuartoNotebookRunner` itself, or you need to use a fork or an unreleased version with a bugfix. In this case, set the [environment variable](/docs/projects/environment.qmd) `QUARTO_JULIA_PROJECT` to a directory of a julia environment that has `QuartoNotebookRunner` installed. 

As an example, you could install the main branch of `QuartoNotebookRunner` into the directory `/some/dir` by executing `]activate /some/dir` in a julia REPL followed by `]add QuartoNotebookRunner#main`. As long as there is no server currently running, running a command like `QUARTO_JULIA_PROJECT=/some/dir quarto render some_notebook.qmd` in your terminal will ensure the server process is started using the custom `QuartoNotebookRunner`. You can also set `quarto`'s `--execute-debug` flag and check the output to verify that the custom environment is being used.

### Rendering notebooks

To use the `julia` engine, you have to specify it in your frontmatter:

```` markdown
---
title: "A julia engine notebook"
engine: julia
---

```{{julia}}
1 + 2
```
````

Rendering a notebook will start a persistent server process if it hasn't already started. This server process first loads QuartoNotebookRunner from Quarto's private environment. QuartoNotebookRunner then spins up a separate Julia worker process for each notebook you want to render.

#### Notebook environments

By default, QuartoNotebookRunner will use the `--project=@.` flag when starting a worker. This makes Julia search for an environment (a `Project.toml` or `JuliaProject.toml` file) starting in the directory where the quarto notebook is stored and walking up the directory tree from there.

For example, for a file `/some/dir/notebook.qmd` it will look at `/some/dir/[Julia]Project.toml`, `/some/[Julia]Project.toml` and so on. You could use this behavior to let all notebooks in a quarto project share the same Julia environment, by placing it at the project's top-level directory.

If no environment has previously been set up in any of these directories, the worker process will start with an empty environment. This means that only Julia's standard library packages will be available for use in the notebook.

::: {.callout-note}
Creating a separate environment for each notebook or each set of closely related notebooks is considered best practice.
If too many different notebooks share the same environment (for example the main shared environment that Julia usually loads by default), you're likely to break some of them unintentionally whenever you make a change to the environment.
:::

You can create a Julia environment in multiple ways, for more information have a look at the [official documentation](https://pkgdocs.julialang.org/v1/environments/). One simple option for adding packages to the default environment of a new quarto notebook is to add some `Pkg` installation commands to the notebook and run it once. Afterwards, those commands can be deleted and a `Project.toml` and `Manifest.toml` file representing the environment should be present in the notebook's directory.

````markdown
---
engine: julia
---

```{{julia}}
using Pkg
Pkg.add("DataFrames")
```
````

Another option is to start `julia` in a terminal which loads the REPL, and to press `]` to switch to the `Pkg` REPL mode.
In this mode, you can first activate the desired environment by running `activate /some/dir` and then, for example, install the `DataFrames` package with the command `add DataFrames`.

If you do not want to use the notebook's directory as the environment, you may specify a different directory via the `--project` flag in the `exeflags` frontmatter setting:

````markdown
---
engine: julia
julia:
  exeflags: ["--project=/some/other/dir"]
---
````

#### Worker process reuse

An idle worker process will be kept alive for 5 minutes by default, this can be changed by passing the desired number of seconds to the `daemon` key:

````markdown
---
title: "A julia notebook with ten minutes timeout"
engine: julia
execute:
  daemon: 600
---
````

Each re-render of a notebook will reuse the worker process with all dependencies already loaded, which reduces latency.
As far as technically possible, QuartoNotebookRunner.jl will release resources from previous runs to the garbage collector.
In each run, the code is evaluated into a fresh module so you cannot run into conflicts with variables defined in previous runs.
Note, however, that certain state changes like modifications to package runtime settings or the removal or addition of function methods will persist across runs.
If necessary, you can use the `--execute-daemon-restart` flag to force a restart of a notebook's worker process.

You can also disable the daemon which will use a new process for each render (with higher latency due to package reloads):

```yaml
execute:
  daemon: false
```

The server process itself will time out after five minutes if no more worker processes exist.

### Engine options

Engine options can be passed under the `julia` top-level key:

````markdown
---
title: "A julia engine notebook"
engine: julia
julia:
  key: value
---
````

The currently available options are:

- `exeflags`: An array of strings which are appended to the `julia` command that starts the worker process. For example, a notebook is run with `--project=@.` by default (the environment in the directory where the notebook is stored) but this could be overridden by setting `exeflags: ["--project=/some/directory/"]`.
- `env`: An array of strings where each string specifies one environment variable that is passed to the worker process. For example, `env: ["SOMEVAR=SOMEVALUE"]`.

### `juliaup` integration

[`juliaup`](https://github.com/JuliaLang/juliaup) is the recommended way to
install and manage Julia versions. The `julia` engine supports using
`juliaup`'s `+` channel specifier to select the Julia version that a notebook
uses. This allow users to run several notebooks concurrently with different
Julia versions on the same machine without the need for customizing their
`PATH` in any way.

To use this feature, ensure that you have used `juliaup` to install the channels
that you wish to use in your notebooks. Then add the channel specifier to the notebook
frontmatter in the `julia.exeflags` option:

````markdown
---
title: "A Julia 1.11 notebook"
engine: julia
julia:
  exeflags: ["+1.11"]
---

```{{julia}}
VERSION
```
````

`QuartoNotebookRunner` currently supports running Julia versions from 1.6
onwards. Support for earlier versions is not planned.

### Revise.jl integration

[Revise](https://github.com/timholy/Revise.jl) allows for automatically
updating function definitions in Julia sessions. It is an essential tool in the
Julia ecosystem for any user that wishes to develop their own packages or large
projects. The `julia` engine supports using `Revise` within notebook processes
by simply importing the package into a cell at the start of a notebook. Once
imported `Revise` will automatically update functions imported from locally
developed packages in the same way as it behaves in a Julia REPL.

Ensure that `Revise` is installed in the project environment that the notebook
is using, since the global environment is not included in the load path
provided to Julia, unlike the behaviour of a Julia REPL session.

### Caching {#caching-julia}

The engine has built-in support for caching notebook results. This feature is disabled by
default but can be enabled by setting the `execute.cache` option to `true` in a notebook's
frontmatter:

````markdown
---
title: "A caching example"
engine: julia
execute:
  cache: true
---

```{{julia}}
rand()
```
````

Notebook caches are invalidated based on the following criteria:

- Using a different Julia version to run the notebook.
- Changes to the `Manifest.toml` of the environment the notebook is run in. Adding, removing, or changing package versions will invalidate the cache.
- Changing any contents in the notebook's frontmatter.
- Changing any contents of any executable Julia cells, including cell options.

Changes that do not invalidate a cache:

- Editing markdown content outside of executable Julia cells.

Caches are saved to file in a `.cache` directory alongside the notebook file.
This directory is safe to remove if you want to invalidate all caches. The
contents of the individual cache files is an internal implementation detail and
should not be relied upon.

These caches are safe to save in CI via such tools as GitHub Actions
`action/cache` to help improve the render time of long-running notebooks that
do not often change.

### R and Python support

`{{r}}` and `{{python}}` executable code blocks are supported in the `julia`
engine via integrations with the
[RCall](https://github.com/JuliaInterop/RCall.jl) and
[PythonCall](https://github.com/JuliaPy/PythonCall.jl) packages respectively.
Using this feature requires the notebook author to explicitly `import` those
packages into their notebooks in a `{{julia}}` cell afterwhich they can use
`{{r}}` and `{{python}}` cells.

````markdown
---
title: "Multi-language notebooks"
engine: julia
---

```{{julia}}
import PythonCall
import RCall
```

Create some data in Julia:

```{{julia}}
data = sin.(0:0.1:4pi)
```

Then plot it in R by interpolating the `data` variable from Julia into `R` via
the `$` syntax:

```{{r}}
plot($data)
```

The same `$` syntax can be used to interpolate Julia variables into Python code as well:

```{{python}}
len($data)
```
````

### Engine "extensions"

The implementation of `QuartoNotebookRunner` allows for extending the behaviour
of notebooks via external Julia packages.

One example of this is the
[QuartoTools.jl](https://pumasai.github.io/QuartoTools.jl) package, which
enables fine-grained function call caching, support for serializing data
between notebook processes and normal `julia` processes, and "expandable" cell
outputs that allow for programatic creating of cell inputs and outputs within
notebooks. See the linked documentation for more thorough discussion of that
package's features.

The same approach used by that package can be applied to other third-party
packages that wish to extend the functionality of notebooks in other ways.
Please direct questions and requests regarding this functionality to the
[QuartoNotebookRunner](https://github.com/PumasAI/QuartoNotebookRunner.jl)
repository.

### Limitations

Currently, the `engine: julia` option must be specified in each `.qmd` file. Setting the engine project-wide via `_quarto.yml` [is not yet supported](https://github.com/quarto-dev/quarto-cli/issues/3157).
