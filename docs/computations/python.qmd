---
title: "Using Python"
positron-extension: "Positron's native Python support"
positron-screenshot: "/docs/get-started/hello/images/positron-hello-python.png"
jupyter-language: "Python"
jupyter-screenshot: "![](/docs/get-started/hello/images/jupyter-basics.png){.border fig-alt='A Jupyter notebook titled Quarto Basics containing some text, a code cell, and the result of the code cell, which is a line plot on a polar axis.'}"
vscode-extension: "[Python Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)"
vscode-screenshot: "![](images/python-vscode){.border fig-alt='Screen shot of VS Code editor with three vertical sections. The leftmost includes the file explorer, and quarto help. The second pane is the source code for a quarto file with python code. The third is interactive with Python running and output of the code cells shown.'}"
---

## Overview

Quarto supports executable Python code blocks within markdown. This allows you to create fully reproducible documents and reports---the Python code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.

If you have Python and the `jupyter` package installed then you have all you need to render documents that contain embedded Python code (if you don't, we'll cover this in the [installation](#installation) section below). Next, we'll cover the basics of creating and rendering documents with Python code blocks.

### Code Blocks

Code blocks that use braces around the language name (e.g. ```` ```{python} ````) are executable, and will be run by Quarto during render. Here is a simple example:

```` markdown
---
title: "matplotlib demo"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

You'll note that there are some special comments at the top of the code block. These are cell level options that make the figure [cross-referenceable](/docs/authoring/cross-references.qmd).

This document would result in the following rendered output:

![](/images/hello-jupyter.png){.border fig-alt="Example output where header reads: matplotlib demo, the body reads: For a demonstration of a line plot on a polar axis, see Figure 1. Below the body text is a toggleable field to reveal the code, and the Figure 1 image with a caption that reads: Figure 1: A line plot on a polar axis."}

You can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).

There are many options which control the behavior of code execution and output, you can read more about them in the article on [Execution Options](execution-options.qmd).

In addition to code blocks which interrupt the flow of markdown, you can also include code inline. Read more about inline code in the [Inline Code](inline-code.qmd) article.

{{< include _jupyter-rendering.md >}}

## Installation {#installation}

If you already have Python 3 and Jupyter installed in your environment, then you should have everything required to render Jupyter notebooks with Python kernels.

{{< include _jupyter-install.md >}}

{{< include _jupyter-authoring-tools.md >}}

{{< include _jupyter-cache.md >}}

{{< include _caching-more.md >}}


## Kernel Selection

The Jupyter kernel used by Quarto is determined using the `jupyter` metadata option. For example, to use the [Xeus Python](https://github.com/jupyter-xeus/xeus-python) kernel, do this:

``` yaml
---
title: "My Document"
jupyter: xpython
---
```

Note that you can also provide a full `kernelspec`, for example:

``` yaml
---
title: "My Document"
jupyter: 
  kernelspec:
    name: "xpython"
    language: "python"
    display_name: "Python 3.7 (XPython)"
---
```

If no Jupyter kernel is specified, then the kernel is determined by finding an available kernel that supports the language of the first executable code block found within the file (e.g. ```` ```{python} ````).

::: callout-important
## Kernels from Conda

If you are using a kernel that is contained within an external conda environment you need to take an extra step to make sure it is recognized by Quarto. Please follow the instructions here to make conda managed kernels available:

<https://github.com/Anaconda-Platform/nb_conda_kernels#use-with-nbconvert-voila-papermill>

Note that this step is not required if you are merely using conda with Quarto. It applies to using kernels other than the default Python kernel that happen to be installed within a conda environment separate from the one you are using.
:::

{{< include _jupyter-daemon.md >}}
