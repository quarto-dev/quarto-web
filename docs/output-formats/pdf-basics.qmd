---
title: PDF Basics
format: html
---

## Overview

Use the `pdf` format to create PDF output. For example:

``` yaml
---
title: "My document"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---
```

This example highlights a few of the options available for PDF output. This article covers these and other options in detail. See the PDF [format reference](/docs/reference/formats/pdf.qmd) for a complete list of all available options.

If you want to produce raw LaTeX output (a .tex file) rather than a PDF, all of the options documented here are still available (see the [LaTeX Output] section below for additional details).

::: callout-note
Note that while we will focus here exclusively on the use of LaTeX to create PDFs, Pandoc also has support for creating PDFs using ConTeXt, roff ms, or HTML (via wkhtmltopdf). See the Pandoc documentation on [Creating a PDF](https://pandoc.org/MANUAL.html#creating-a-pdf) for additional details.
:::

### Prerequisites

In order to create PDFs you will need to install a recent distribution of TeX. We recommend the use of TinyTeX (which is based on TexLive), which you can install with the following command:

```{.bash filename="Terminal"}
quarto install tinytex
```

See the article on [PDF Engines](pdf-engine.qmd) for details on using other TeX distributions and PDF compilation engines.

## Document Class

Quarto uses [KOMA Script](https://ctan.org/pkg/koma-script) document classes by default for PDF documents and books. KOMA-Script classes are drop-in replacements for the standard classes with an emphasis on typography and versatility.

For PDF documents this results in the following Pandoc options set by default:

``` yaml
format:
  pdf:
    documentclass: scrartcl
    papersize: letter
```

You can set `documentclass` to the standard `article`, `report` or `book` classes, to the KOMA Script equivalents `scrartcl`, `scrreprt`, and `scrbook` respectively, or to any other class made available by LaTeX packages you have installed.

::: callout-note
Setting your `documentclass` to either `book` or `scrbook` will automatically handle many of the common needs for printing and binding PDFs into a physical book (i.e., chapters start on odd pages, alternating margin sizes, etc).
:::

See the [Output Options] section below for additional details on customizing LaTeX document options.

{{< include _document-options-begin.md >}}


## Output Options

There are numerous options available for customizing PDF output, including:

-   Specifying document classes and their options

-   Including lists of figures and tables

-   Using the `geometry` and `hyperref` packages

-   Numerous options for customizing fonts and colors.

For example, here we use a few of these options:

``` yaml
---
title: "My Document"
format: 
  pdf: 
    documentclass: report
    classoption: [twocolumn, landscape]
    lof: true
    lot: true
    geometry:
      - top=30mm
      - left=20mm
      - heightrounded
    mainfont: Times New Roman
    colorlinks: true
---
```

See the Pandoc documentation on metadata [variables for LaTeX](https://pandoc.org/MANUAL.html#variables-for-latex) for documentation on all available options.

## Fonts

Using `xelatex`, the default engine, or the `lualatex` engine, you can specify fonts with the YAML options:

| Option         | Document Element         |
|----------------|--------------------------|
| `sansfont`     | Headings                 |
| `mainfont`     | Main body text           |
| `monofont`     | Code                     |
| `mathfont`     | Math                     |
| `CJKmainfont`  | The CJK main font family |

Values for these options should be the family name of system installed fonts. For example:

```{.yaml}
---
format: 
  pdf:
    mainfont: "Times New Roman"
---
```

Fonts are set using the [`fontspec`](https://ctan.org/pkg/fontspec) package.
You can set additional font features using the corresponding `<fontoption>options` key.
For example, you could set headings to the color `#39729E`:

```{.yaml}
---
format: 
  pdf:
    sansfont: "Open Sans"
    sansfontoptions: 
      - Color=39729E
---
```

### `pdflatex` 

If you use the `pdflatex` engine, use the `fontfamily` option to specify a font from the [The LaTeX Font Catalogue](https://tug.org/FontCatalogue/). For example:

``` yaml
---
title: pdflatex fonts
format:
  pdf:
    pdf-engine: pdflatex
    fontfamily: anttor
---
```

## Unicode Characters

By default, Quarto uses the `xelatex` engine to produce PDFs from LaTeX. `xelatex` has native support for unicode characters, but it is possible some customization will be required in order to properly typeset specific unicode characters. In particular, it is important that you use a font that supports the characters that you using in your document. To identify fonts on your system that support specific language characters, you can use the following command:

``` {.bash filename="Terminal"}
fc-list :lang=<lang> family
```

Where `<lang>` is a [ISO 639 language code](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes). For example, to see a list of fonts that support Japanese characters, use:

``` {.bash filename="Terminal"}
fc-list :lang=ja family
```

Select a font name from the list and use that as the document's main font:

``` markdown
---
title: Unicode test
format: pdf
mainfont: "Hiragino Sans GB"
---

## Test Document

青黑體簡體中文,ヒラギノ角
```

Another common example of Unicode characters are documents that include Greek symbols:

````{.markdown filename="greek.qmd"}
---
format: pdf
---

## α

```r
α <- 3
```

α is a great constant.
```
````

Follow the same process as above to discover fonts that support Greek:

``` {.bash filename="Terminal"}
fc-list :lang=el family
```

Then set the appropriate font options:

````{.markdown filename="greek.qmd"}
---
format: 
  pdf:
    mainfont: "EB Garamond"
    sansfont: "Open Sans"
    monofont: "Roboto Mono"
---
````

*(These particular fonts are available from [Google Fonts](https://fonts.google.com).)*

With fonts with appropriate support, Greek symbols render correctly in headings, the main text and code cells:

![Greek symbols in a rendered PDF](images/pdf-unicode-greek.png){.border fig-alt="Screenshot of at PDF displaying the Greek symbol alpha in a heading, main text and code cell."}


 
## Citations

{{< include _pdf-citations.md >}}


## Raw LaTeX

When creating a PDF document, Pandoc allows the use of [raw LaTeX](https://pandoc.org/MANUAL.html#extension-raw_tex) directives intermixed with markdown.
Although Pandoc allows LaTeX to appear unescaped in Markdown, we instead recommend to wrap the content in a raw block. For example:

```` markdown
```{=latex}
\begin{tabular}{|l|l|}\hline
Age & Frequency \\ \hline
18--25  & 15 \\
26--35  & 33 \\
36--45  & 22 \\ \hline
\end{tabular}
```
````

Raw LaTeX can be specified as a block element (as shown above), or as an inline element, such as `` `\textrm{hello}`{=latex} ``.
Raw LaTeX commands will be preserved and passed unchanged to the LaTeX writer.

::: callout-warning
While it's very convenient to use raw LaTeX, raw LaTeX is ignored when rendering to other formats like HTML and MS Word. If you plan on rendering to other formats then the example above would be better written using native [markdown tables](/docs/authoring/markdown-basics.qmd#tables).
:::

In some cases raw LaTeX will require additional LaTeX packages. The [LaTeX Includes] section below describes how to include `\usepackage` commands for these packages in your document.

## LaTeX Includes

{{< include _document-options-includes.md >}}

For example:

``` yaml
format:
  pdf:
    include-in-header:
      - text: |
          \usepackage{eplain}
          \usepackage{easy-todo}
      - file: packages.tex
      - macros.tex 
```

Any packages specified using includes that you don't already have installed locally will be installed by Quarto during the rendering of the document.

## LaTeX Output

If you want Quarto to produce a LaTeX file (`.tex`) rather than a PDF (for example, if you want to do your own processing of the PDF) there are two ways to accomplish this:

1.  Use the `latex` format rather than the `pdf` format. For example:

    ``` yaml
    format:
      latex:
        documentclass: report
        classoption: [twocolumn, landscape]
        lof: true
        lot: true
    ```

    Note that all of the PDF format options documented above will also work for the `latex` format.

2.  Use the `pdf` format along with the `keep-tex` option. For example:

    ``` yaml
    format:
      pdf:
        documentclass: report
        keep-tex: true
    ```

    This technique will produce a PDF file for preview, but will also create a `.tex` file alongside it that you can do subsequent processing on.

Both techniques will also produce all LaTeX temporary files, including `.bbl` files and so on, that might be required by a publisher that wants LaTeX sources.
