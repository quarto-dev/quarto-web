import { stringify as yamlStringify } from "stdlib/yaml"; // Quarto 1.6 syntax
import { dirname, basename, join } from "stdlib/path";

const json = JSON.parse(Deno.readTextFileSync("./docs/lua/doc.json"));

const groupby = (
  lst: Record<string, unknown>[],
  keyFn: (x: Record<string, unknown>) => string,
) => {
  const map: Record<string, unknown[]> = {};
  for (const item of lst) {
    const key = keyFn(item);
    if (!map[key]) {
      map[key] = [];
    }
    map[key].push(item);
  }
  return map;
};

const prefixes = groupby(
  json,
  (entry: any) => {
    const path = entry.name.split(".");
    path.pop();
    while (path[path.length - 1]?.toLowerCase() !== path[path.length - 1]) {
      path.pop();
    }
    return path.join(".");
  },
);

const prefixKeys = Object.keys(prefixes);
for (const prefix of prefixKeys) {
  if (prefix === "") continue;
  const entries = prefixes[prefix] as Record<string, unknown>[];
  const rawfilename = "docs/lua/" + prefix.replace(/\./g, "/") + ".md";
  const filename = join(dirname(rawfilename), "_" + basename(rawfilename))
  const metadata: Record<string, unknown> = {
    title: `\`${prefix}\``,
  };

  const contents: string[] = [];
  contents.push(`---\n${yamlStringify(metadata)}---`);
  contents.push("\n```{=comment}\nThis is an autogenerated file. Do not edit it directly.\n```\n");
  for (const entry of entries) {
    contents.push("");
    contents.push("## `" + (entry as any).name.split(".").pop() + "`");
    contents.push("");
    const defn = (entry as any).defines[0];
    if (defn?.extends?.view) {
      contents.push("```\n" + defn.extends.view + "\n```");
      contents.push("");
    } else {
      console.log("No `view` for", entry.name);
    }
    if (defn?.rawdesc) {
      contents.push(defn.rawdesc);
      contents.push("");
    } else {
      console.log("No `rawdesc` for", entry.name);
    }
  }
  Deno.mkdirSync(dirname(filename), { recursive: true });
  Deno.writeTextFileSync(
    filename,
    contents.join("\n"),
  );
  console.log("Wrote", filename);
}

if (Deno.args[0] === "stubs") {
  for (const prefix of prefixKeys) {
    if (prefix === "") continue;
    // const entries = prefixes[prefix] as Record<string, unknown>[];
    const rawfilename = "docs/lua/" + prefix.replace(/\./g, "/") + ".qmd";
    const includefilename = basename(rawfilename).replace(/\.qmd$/, ".md");
    Deno.writeTextFileSync(
      rawfilename,
      "{{< include \"_" + includefilename + "\" >}}\n");
    console.log("Wrote", rawfilename);
  }
}